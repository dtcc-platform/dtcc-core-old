// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dtcc.proto

#ifndef GOOGLE_PROTOBUF_INCLUDED_dtcc_2eproto
#define GOOGLE_PROTOBUF_INCLUDED_dtcc_2eproto

#include <limits>
#include <string>

#include <google/protobuf/port_def.inc>
#if PROTOBUF_VERSION < 3012000
#error This file was generated by a newer version of protoc which is
#error incompatible with your Protocol Buffer headers. Please update
#error your headers.
#endif
#if 3012004 < PROTOBUF_MIN_PROTOC_VERSION
#error This file was generated by an older version of protoc which is
#error incompatible with your Protocol Buffer headers. Please
#error regenerate this file with a newer version of protoc.
#endif

#include <google/protobuf/port_undef.inc>
#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/arena.h>
#include <google/protobuf/arenastring.h>
#include <google/protobuf/generated_message_table_driven.h>
#include <google/protobuf/generated_message_util.h>
#include <google/protobuf/inlined_string_field.h>
#include <google/protobuf/metadata_lite.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/message.h>
#include <google/protobuf/repeated_field.h>  // IWYU pragma: export
#include <google/protobuf/extension_set.h>  // IWYU pragma: export
#include <google/protobuf/unknown_field_set.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
#define PROTOBUF_INTERNAL_EXPORT_dtcc_2eproto
PROTOBUF_NAMESPACE_OPEN
namespace internal {
class AnyMetadata;
}  // namespace internal
PROTOBUF_NAMESPACE_CLOSE

// Internal implementation detail -- do not use these members.
struct TableStruct_dtcc_2eproto {
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTableField entries[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::AuxillaryParseTableField aux[]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::ParseTable schema[24]
    PROTOBUF_SECTION_VARIABLE(protodesc_cold);
  static const ::PROTOBUF_NAMESPACE_ID::internal::FieldMetadata field_metadata[];
  static const ::PROTOBUF_NAMESPACE_ID::internal::SerializationTable serialization_table[];
  static const ::PROTOBUF_NAMESPACE_ID::uint32 offsets[];
};
extern const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dtcc_2eproto;
namespace DTCC {
class BoundingBox2D;
class BoundingBox2DDefaultTypeInternal;
extern BoundingBox2DDefaultTypeInternal _BoundingBox2D_default_instance_;
class BoundingBox3D;
class BoundingBox3DDefaultTypeInternal;
extern BoundingBox3DDefaultTypeInternal _BoundingBox3D_default_instance_;
class Building;
class BuildingDefaultTypeInternal;
extern BuildingDefaultTypeInternal _Building_default_instance_;
class CityModel;
class CityModelDefaultTypeInternal;
extern CityModelDefaultTypeInternal _CityModel_default_instance_;
class Grid2D;
class Grid2DDefaultTypeInternal;
extern Grid2DDefaultTypeInternal _Grid2D_default_instance_;
class Grid3D;
class Grid3DDefaultTypeInternal;
extern Grid3DDefaultTypeInternal _Grid3D_default_instance_;
class GridField2D;
class GridField2DDefaultTypeInternal;
extern GridField2DDefaultTypeInternal _GridField2D_default_instance_;
class GridField3D;
class GridField3DDefaultTypeInternal;
extern GridField3DDefaultTypeInternal _GridField3D_default_instance_;
class GridVectorField2D;
class GridVectorField2DDefaultTypeInternal;
extern GridVectorField2DDefaultTypeInternal _GridVectorField2D_default_instance_;
class GridVectorField3D;
class GridVectorField3DDefaultTypeInternal;
extern GridVectorField3DDefaultTypeInternal _GridVectorField3D_default_instance_;
class Mesh2D;
class Mesh2DDefaultTypeInternal;
extern Mesh2DDefaultTypeInternal _Mesh2D_default_instance_;
class Mesh3D;
class Mesh3DDefaultTypeInternal;
extern Mesh3DDefaultTypeInternal _Mesh3D_default_instance_;
class MeshField2D;
class MeshField2DDefaultTypeInternal;
extern MeshField2DDefaultTypeInternal _MeshField2D_default_instance_;
class MeshField3D;
class MeshField3DDefaultTypeInternal;
extern MeshField3DDefaultTypeInternal _MeshField3D_default_instance_;
class MeshVectorField2D;
class MeshVectorField2DDefaultTypeInternal;
extern MeshVectorField2DDefaultTypeInternal _MeshVectorField2D_default_instance_;
class MeshVectorField3D;
class MeshVectorField3DDefaultTypeInternal;
extern MeshVectorField3DDefaultTypeInternal _MeshVectorField3D_default_instance_;
class Polygon;
class PolygonDefaultTypeInternal;
extern PolygonDefaultTypeInternal _Polygon_default_instance_;
class Simplex1D;
class Simplex1DDefaultTypeInternal;
extern Simplex1DDefaultTypeInternal _Simplex1D_default_instance_;
class Simplex2D;
class Simplex2DDefaultTypeInternal;
extern Simplex2DDefaultTypeInternal _Simplex2D_default_instance_;
class Simplex3D;
class Simplex3DDefaultTypeInternal;
extern Simplex3DDefaultTypeInternal _Simplex3D_default_instance_;
class Surface2D;
class Surface2DDefaultTypeInternal;
extern Surface2DDefaultTypeInternal _Surface2D_default_instance_;
class Surface3D;
class Surface3DDefaultTypeInternal;
extern Surface3DDefaultTypeInternal _Surface3D_default_instance_;
class Vector2D;
class Vector2DDefaultTypeInternal;
extern Vector2DDefaultTypeInternal _Vector2D_default_instance_;
class Vector3D;
class Vector3DDefaultTypeInternal;
extern Vector3DDefaultTypeInternal _Vector3D_default_instance_;
}  // namespace DTCC
PROTOBUF_NAMESPACE_OPEN
template<> ::DTCC::BoundingBox2D* Arena::CreateMaybeMessage<::DTCC::BoundingBox2D>(Arena*);
template<> ::DTCC::BoundingBox3D* Arena::CreateMaybeMessage<::DTCC::BoundingBox3D>(Arena*);
template<> ::DTCC::Building* Arena::CreateMaybeMessage<::DTCC::Building>(Arena*);
template<> ::DTCC::CityModel* Arena::CreateMaybeMessage<::DTCC::CityModel>(Arena*);
template<> ::DTCC::Grid2D* Arena::CreateMaybeMessage<::DTCC::Grid2D>(Arena*);
template<> ::DTCC::Grid3D* Arena::CreateMaybeMessage<::DTCC::Grid3D>(Arena*);
template<> ::DTCC::GridField2D* Arena::CreateMaybeMessage<::DTCC::GridField2D>(Arena*);
template<> ::DTCC::GridField3D* Arena::CreateMaybeMessage<::DTCC::GridField3D>(Arena*);
template<> ::DTCC::GridVectorField2D* Arena::CreateMaybeMessage<::DTCC::GridVectorField2D>(Arena*);
template<> ::DTCC::GridVectorField3D* Arena::CreateMaybeMessage<::DTCC::GridVectorField3D>(Arena*);
template<> ::DTCC::Mesh2D* Arena::CreateMaybeMessage<::DTCC::Mesh2D>(Arena*);
template<> ::DTCC::Mesh3D* Arena::CreateMaybeMessage<::DTCC::Mesh3D>(Arena*);
template<> ::DTCC::MeshField2D* Arena::CreateMaybeMessage<::DTCC::MeshField2D>(Arena*);
template<> ::DTCC::MeshField3D* Arena::CreateMaybeMessage<::DTCC::MeshField3D>(Arena*);
template<> ::DTCC::MeshVectorField2D* Arena::CreateMaybeMessage<::DTCC::MeshVectorField2D>(Arena*);
template<> ::DTCC::MeshVectorField3D* Arena::CreateMaybeMessage<::DTCC::MeshVectorField3D>(Arena*);
template<> ::DTCC::Polygon* Arena::CreateMaybeMessage<::DTCC::Polygon>(Arena*);
template<> ::DTCC::Simplex1D* Arena::CreateMaybeMessage<::DTCC::Simplex1D>(Arena*);
template<> ::DTCC::Simplex2D* Arena::CreateMaybeMessage<::DTCC::Simplex2D>(Arena*);
template<> ::DTCC::Simplex3D* Arena::CreateMaybeMessage<::DTCC::Simplex3D>(Arena*);
template<> ::DTCC::Surface2D* Arena::CreateMaybeMessage<::DTCC::Surface2D>(Arena*);
template<> ::DTCC::Surface3D* Arena::CreateMaybeMessage<::DTCC::Surface3D>(Arena*);
template<> ::DTCC::Vector2D* Arena::CreateMaybeMessage<::DTCC::Vector2D>(Arena*);
template<> ::DTCC::Vector3D* Arena::CreateMaybeMessage<::DTCC::Vector3D>(Arena*);
PROTOBUF_NAMESPACE_CLOSE
namespace DTCC {

// ===================================================================

class Vector2D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DTCC.Vector2D) */ {
 public:
  inline Vector2D() : Vector2D(nullptr) {};
  virtual ~Vector2D();

  Vector2D(const Vector2D& from);
  Vector2D(Vector2D&& from) noexcept
    : Vector2D() {
    *this = ::std::move(from);
  }

  inline Vector2D& operator=(const Vector2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector2D& operator=(Vector2D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vector2D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector2D* internal_default_instance() {
    return reinterpret_cast<const Vector2D*>(
               &_Vector2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    0;

  friend void swap(Vector2D& a, Vector2D& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector2D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector2D* New() const final {
    return CreateMaybeMessage<Vector2D>(nullptr);
  }

  Vector2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vector2D& from);
  void MergeFrom(const Vector2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.Vector2D";
  }
  protected:
  explicit Vector2D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dtcc_2eproto);
    return ::descriptor_table_dtcc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // @@protoc_insertion_point(class_scope:DTCC.Vector2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class Vector3D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DTCC.Vector3D) */ {
 public:
  inline Vector3D() : Vector3D(nullptr) {};
  virtual ~Vector3D();

  Vector3D(const Vector3D& from);
  Vector3D(Vector3D&& from) noexcept
    : Vector3D() {
    *this = ::std::move(from);
  }

  inline Vector3D& operator=(const Vector3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Vector3D& operator=(Vector3D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Vector3D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Vector3D* internal_default_instance() {
    return reinterpret_cast<const Vector3D*>(
               &_Vector3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    1;

  friend void swap(Vector3D& a, Vector3D& b) {
    a.Swap(&b);
  }
  inline void Swap(Vector3D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Vector3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Vector3D* New() const final {
    return CreateMaybeMessage<Vector3D>(nullptr);
  }

  Vector3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Vector3D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Vector3D& from);
  void MergeFrom(const Vector3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Vector3D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.Vector3D";
  }
  protected:
  explicit Vector3D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dtcc_2eproto);
    return ::descriptor_table_dtcc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kXFieldNumber = 1,
    kYFieldNumber = 2,
    kZFieldNumber = 3,
  };
  // float x = 1;
  void clear_x();
  float x() const;
  void set_x(float value);
  private:
  float _internal_x() const;
  void _internal_set_x(float value);
  public:

  // float y = 2;
  void clear_y();
  float y() const;
  void set_y(float value);
  private:
  float _internal_y() const;
  void _internal_set_y(float value);
  public:

  // float z = 3;
  void clear_z();
  float z() const;
  void set_z(float value);
  private:
  float _internal_z() const;
  void _internal_set_z(float value);
  public:

  // @@protoc_insertion_point(class_scope:DTCC.Vector3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  float x_;
  float y_;
  float z_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class Simplex1D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DTCC.Simplex1D) */ {
 public:
  inline Simplex1D() : Simplex1D(nullptr) {};
  virtual ~Simplex1D();

  Simplex1D(const Simplex1D& from);
  Simplex1D(Simplex1D&& from) noexcept
    : Simplex1D() {
    *this = ::std::move(from);
  }

  inline Simplex1D& operator=(const Simplex1D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Simplex1D& operator=(Simplex1D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Simplex1D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Simplex1D* internal_default_instance() {
    return reinterpret_cast<const Simplex1D*>(
               &_Simplex1D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    2;

  friend void swap(Simplex1D& a, Simplex1D& b) {
    a.Swap(&b);
  }
  inline void Swap(Simplex1D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Simplex1D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Simplex1D* New() const final {
    return CreateMaybeMessage<Simplex1D>(nullptr);
  }

  Simplex1D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Simplex1D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Simplex1D& from);
  void MergeFrom(const Simplex1D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Simplex1D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.Simplex1D";
  }
  protected:
  explicit Simplex1D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dtcc_2eproto);
    return ::descriptor_table_dtcc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kV0FieldNumber = 1,
    kV1FieldNumber = 2,
  };
  // int32 v0 = 1;
  void clear_v0();
  ::PROTOBUF_NAMESPACE_ID::int32 v0() const;
  void set_v0(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_v0() const;
  void _internal_set_v0(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 v1 = 2;
  void clear_v1();
  ::PROTOBUF_NAMESPACE_ID::int32 v1() const;
  void set_v1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_v1() const;
  void _internal_set_v1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DTCC.Simplex1D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 v0_;
  ::PROTOBUF_NAMESPACE_ID::int32 v1_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class Simplex2D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DTCC.Simplex2D) */ {
 public:
  inline Simplex2D() : Simplex2D(nullptr) {};
  virtual ~Simplex2D();

  Simplex2D(const Simplex2D& from);
  Simplex2D(Simplex2D&& from) noexcept
    : Simplex2D() {
    *this = ::std::move(from);
  }

  inline Simplex2D& operator=(const Simplex2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Simplex2D& operator=(Simplex2D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Simplex2D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Simplex2D* internal_default_instance() {
    return reinterpret_cast<const Simplex2D*>(
               &_Simplex2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    3;

  friend void swap(Simplex2D& a, Simplex2D& b) {
    a.Swap(&b);
  }
  inline void Swap(Simplex2D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Simplex2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Simplex2D* New() const final {
    return CreateMaybeMessage<Simplex2D>(nullptr);
  }

  Simplex2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Simplex2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Simplex2D& from);
  void MergeFrom(const Simplex2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Simplex2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.Simplex2D";
  }
  protected:
  explicit Simplex2D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dtcc_2eproto);
    return ::descriptor_table_dtcc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kV0FieldNumber = 1,
    kV1FieldNumber = 2,
    kV2FieldNumber = 3,
  };
  // int32 v0 = 1;
  void clear_v0();
  ::PROTOBUF_NAMESPACE_ID::int32 v0() const;
  void set_v0(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_v0() const;
  void _internal_set_v0(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 v1 = 2;
  void clear_v1();
  ::PROTOBUF_NAMESPACE_ID::int32 v1() const;
  void set_v1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_v1() const;
  void _internal_set_v1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 v2 = 3;
  void clear_v2();
  ::PROTOBUF_NAMESPACE_ID::int32 v2() const;
  void set_v2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_v2() const;
  void _internal_set_v2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DTCC.Simplex2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 v0_;
  ::PROTOBUF_NAMESPACE_ID::int32 v1_;
  ::PROTOBUF_NAMESPACE_ID::int32 v2_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class Simplex3D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DTCC.Simplex3D) */ {
 public:
  inline Simplex3D() : Simplex3D(nullptr) {};
  virtual ~Simplex3D();

  Simplex3D(const Simplex3D& from);
  Simplex3D(Simplex3D&& from) noexcept
    : Simplex3D() {
    *this = ::std::move(from);
  }

  inline Simplex3D& operator=(const Simplex3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Simplex3D& operator=(Simplex3D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Simplex3D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Simplex3D* internal_default_instance() {
    return reinterpret_cast<const Simplex3D*>(
               &_Simplex3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    4;

  friend void swap(Simplex3D& a, Simplex3D& b) {
    a.Swap(&b);
  }
  inline void Swap(Simplex3D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Simplex3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Simplex3D* New() const final {
    return CreateMaybeMessage<Simplex3D>(nullptr);
  }

  Simplex3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Simplex3D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Simplex3D& from);
  void MergeFrom(const Simplex3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Simplex3D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.Simplex3D";
  }
  protected:
  explicit Simplex3D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dtcc_2eproto);
    return ::descriptor_table_dtcc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kV0FieldNumber = 1,
    kV1FieldNumber = 2,
    kV2FieldNumber = 3,
    kV3FieldNumber = 4,
  };
  // int32 v0 = 1;
  void clear_v0();
  ::PROTOBUF_NAMESPACE_ID::int32 v0() const;
  void set_v0(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_v0() const;
  void _internal_set_v0(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 v1 = 2;
  void clear_v1();
  ::PROTOBUF_NAMESPACE_ID::int32 v1() const;
  void set_v1(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_v1() const;
  void _internal_set_v1(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 v2 = 3;
  void clear_v2();
  ::PROTOBUF_NAMESPACE_ID::int32 v2() const;
  void set_v2(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_v2() const;
  void _internal_set_v2(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 v3 = 4;
  void clear_v3();
  ::PROTOBUF_NAMESPACE_ID::int32 v3() const;
  void set_v3(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_v3() const;
  void _internal_set_v3(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // @@protoc_insertion_point(class_scope:DTCC.Simplex3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::int32 v0_;
  ::PROTOBUF_NAMESPACE_ID::int32 v1_;
  ::PROTOBUF_NAMESPACE_ID::int32 v2_;
  ::PROTOBUF_NAMESPACE_ID::int32 v3_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class BoundingBox2D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DTCC.BoundingBox2D) */ {
 public:
  inline BoundingBox2D() : BoundingBox2D(nullptr) {};
  virtual ~BoundingBox2D();

  BoundingBox2D(const BoundingBox2D& from);
  BoundingBox2D(BoundingBox2D&& from) noexcept
    : BoundingBox2D() {
    *this = ::std::move(from);
  }

  inline BoundingBox2D& operator=(const BoundingBox2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoundingBox2D& operator=(BoundingBox2D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BoundingBox2D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BoundingBox2D* internal_default_instance() {
    return reinterpret_cast<const BoundingBox2D*>(
               &_BoundingBox2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    5;

  friend void swap(BoundingBox2D& a, BoundingBox2D& b) {
    a.Swap(&b);
  }
  inline void Swap(BoundingBox2D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoundingBox2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BoundingBox2D* New() const final {
    return CreateMaybeMessage<BoundingBox2D>(nullptr);
  }

  BoundingBox2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BoundingBox2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BoundingBox2D& from);
  void MergeFrom(const BoundingBox2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoundingBox2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.BoundingBox2D";
  }
  protected:
  explicit BoundingBox2D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dtcc_2eproto);
    return ::descriptor_table_dtcc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPFieldNumber = 1,
    kQFieldNumber = 2,
  };
  // .DTCC.Vector2D p = 1;
  bool has_p() const;
  private:
  bool _internal_has_p() const;
  public:
  void clear_p();
  const ::DTCC::Vector2D& p() const;
  ::DTCC::Vector2D* release_p();
  ::DTCC::Vector2D* mutable_p();
  void set_allocated_p(::DTCC::Vector2D* p);
  private:
  const ::DTCC::Vector2D& _internal_p() const;
  ::DTCC::Vector2D* _internal_mutable_p();
  public:
  void unsafe_arena_set_allocated_p(
      ::DTCC::Vector2D* p);
  ::DTCC::Vector2D* unsafe_arena_release_p();

  // .DTCC.Vector2D q = 2;
  bool has_q() const;
  private:
  bool _internal_has_q() const;
  public:
  void clear_q();
  const ::DTCC::Vector2D& q() const;
  ::DTCC::Vector2D* release_q();
  ::DTCC::Vector2D* mutable_q();
  void set_allocated_q(::DTCC::Vector2D* q);
  private:
  const ::DTCC::Vector2D& _internal_q() const;
  ::DTCC::Vector2D* _internal_mutable_q();
  public:
  void unsafe_arena_set_allocated_q(
      ::DTCC::Vector2D* q);
  ::DTCC::Vector2D* unsafe_arena_release_q();

  // @@protoc_insertion_point(class_scope:DTCC.BoundingBox2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::DTCC::Vector2D* p_;
  ::DTCC::Vector2D* q_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class BoundingBox3D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DTCC.BoundingBox3D) */ {
 public:
  inline BoundingBox3D() : BoundingBox3D(nullptr) {};
  virtual ~BoundingBox3D();

  BoundingBox3D(const BoundingBox3D& from);
  BoundingBox3D(BoundingBox3D&& from) noexcept
    : BoundingBox3D() {
    *this = ::std::move(from);
  }

  inline BoundingBox3D& operator=(const BoundingBox3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline BoundingBox3D& operator=(BoundingBox3D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const BoundingBox3D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const BoundingBox3D* internal_default_instance() {
    return reinterpret_cast<const BoundingBox3D*>(
               &_BoundingBox3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    6;

  friend void swap(BoundingBox3D& a, BoundingBox3D& b) {
    a.Swap(&b);
  }
  inline void Swap(BoundingBox3D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(BoundingBox3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline BoundingBox3D* New() const final {
    return CreateMaybeMessage<BoundingBox3D>(nullptr);
  }

  BoundingBox3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<BoundingBox3D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const BoundingBox3D& from);
  void MergeFrom(const BoundingBox3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(BoundingBox3D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.BoundingBox3D";
  }
  protected:
  explicit BoundingBox3D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dtcc_2eproto);
    return ::descriptor_table_dtcc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kPFieldNumber = 1,
    kQFieldNumber = 2,
  };
  // .DTCC.Vector3D p = 1;
  bool has_p() const;
  private:
  bool _internal_has_p() const;
  public:
  void clear_p();
  const ::DTCC::Vector3D& p() const;
  ::DTCC::Vector3D* release_p();
  ::DTCC::Vector3D* mutable_p();
  void set_allocated_p(::DTCC::Vector3D* p);
  private:
  const ::DTCC::Vector3D& _internal_p() const;
  ::DTCC::Vector3D* _internal_mutable_p();
  public:
  void unsafe_arena_set_allocated_p(
      ::DTCC::Vector3D* p);
  ::DTCC::Vector3D* unsafe_arena_release_p();

  // .DTCC.Vector3D q = 2;
  bool has_q() const;
  private:
  bool _internal_has_q() const;
  public:
  void clear_q();
  const ::DTCC::Vector3D& q() const;
  ::DTCC::Vector3D* release_q();
  ::DTCC::Vector3D* mutable_q();
  void set_allocated_q(::DTCC::Vector3D* q);
  private:
  const ::DTCC::Vector3D& _internal_q() const;
  ::DTCC::Vector3D* _internal_mutable_q();
  public:
  void unsafe_arena_set_allocated_q(
      ::DTCC::Vector3D* q);
  ::DTCC::Vector3D* unsafe_arena_release_q();

  // @@protoc_insertion_point(class_scope:DTCC.BoundingBox3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::DTCC::Vector3D* p_;
  ::DTCC::Vector3D* q_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class Polygon PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DTCC.Polygon) */ {
 public:
  inline Polygon() : Polygon(nullptr) {};
  virtual ~Polygon();

  Polygon(const Polygon& from);
  Polygon(Polygon&& from) noexcept
    : Polygon() {
    *this = ::std::move(from);
  }

  inline Polygon& operator=(const Polygon& from) {
    CopyFrom(from);
    return *this;
  }
  inline Polygon& operator=(Polygon&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Polygon& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Polygon* internal_default_instance() {
    return reinterpret_cast<const Polygon*>(
               &_Polygon_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    7;

  friend void swap(Polygon& a, Polygon& b) {
    a.Swap(&b);
  }
  inline void Swap(Polygon* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Polygon* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Polygon* New() const final {
    return CreateMaybeMessage<Polygon>(nullptr);
  }

  Polygon* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Polygon>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Polygon& from);
  void MergeFrom(const Polygon& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Polygon* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.Polygon";
  }
  protected:
  explicit Polygon(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dtcc_2eproto);
    return ::descriptor_table_dtcc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerticesFieldNumber = 1,
  };
  // repeated .DTCC.Vector2D vertices = 1;
  int vertices_size() const;
  private:
  int _internal_vertices_size() const;
  public:
  void clear_vertices();
  ::DTCC::Vector2D* mutable_vertices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >*
      mutable_vertices();
  private:
  const ::DTCC::Vector2D& _internal_vertices(int index) const;
  ::DTCC::Vector2D* _internal_add_vertices();
  public:
  const ::DTCC::Vector2D& vertices(int index) const;
  ::DTCC::Vector2D* add_vertices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >&
      vertices() const;

  // @@protoc_insertion_point(class_scope:DTCC.Polygon)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D > vertices_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class Grid2D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DTCC.Grid2D) */ {
 public:
  inline Grid2D() : Grid2D(nullptr) {};
  virtual ~Grid2D();

  Grid2D(const Grid2D& from);
  Grid2D(Grid2D&& from) noexcept
    : Grid2D() {
    *this = ::std::move(from);
  }

  inline Grid2D& operator=(const Grid2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Grid2D& operator=(Grid2D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Grid2D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Grid2D* internal_default_instance() {
    return reinterpret_cast<const Grid2D*>(
               &_Grid2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    8;

  friend void swap(Grid2D& a, Grid2D& b) {
    a.Swap(&b);
  }
  inline void Swap(Grid2D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Grid2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Grid2D* New() const final {
    return CreateMaybeMessage<Grid2D>(nullptr);
  }

  Grid2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Grid2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Grid2D& from);
  void MergeFrom(const Grid2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Grid2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.Grid2D";
  }
  protected:
  explicit Grid2D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dtcc_2eproto);
    return ::descriptor_table_dtcc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoundingBoxFieldNumber = 1,
    kXSizeFieldNumber = 2,
    kYSizeFieldNumber = 3,
    kXStepFieldNumber = 4,
    kYStepFieldNumber = 5,
  };
  // .DTCC.BoundingBox2D boundingBox = 1;
  bool has_boundingbox() const;
  private:
  bool _internal_has_boundingbox() const;
  public:
  void clear_boundingbox();
  const ::DTCC::BoundingBox2D& boundingbox() const;
  ::DTCC::BoundingBox2D* release_boundingbox();
  ::DTCC::BoundingBox2D* mutable_boundingbox();
  void set_allocated_boundingbox(::DTCC::BoundingBox2D* boundingbox);
  private:
  const ::DTCC::BoundingBox2D& _internal_boundingbox() const;
  ::DTCC::BoundingBox2D* _internal_mutable_boundingbox();
  public:
  void unsafe_arena_set_allocated_boundingbox(
      ::DTCC::BoundingBox2D* boundingbox);
  ::DTCC::BoundingBox2D* unsafe_arena_release_boundingbox();

  // int32 xSize = 2;
  void clear_xsize();
  ::PROTOBUF_NAMESPACE_ID::int32 xsize() const;
  void set_xsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xsize() const;
  void _internal_set_xsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ySize = 3;
  void clear_ysize();
  ::PROTOBUF_NAMESPACE_ID::int32 ysize() const;
  void set_ysize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ysize() const;
  void _internal_set_ysize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float xStep = 4;
  void clear_xstep();
  float xstep() const;
  void set_xstep(float value);
  private:
  float _internal_xstep() const;
  void _internal_set_xstep(float value);
  public:

  // float yStep = 5;
  void clear_ystep();
  float ystep() const;
  void set_ystep(float value);
  private:
  float _internal_ystep() const;
  void _internal_set_ystep(float value);
  public:

  // @@protoc_insertion_point(class_scope:DTCC.Grid2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::DTCC::BoundingBox2D* boundingbox_;
  ::PROTOBUF_NAMESPACE_ID::int32 xsize_;
  ::PROTOBUF_NAMESPACE_ID::int32 ysize_;
  float xstep_;
  float ystep_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class Grid3D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DTCC.Grid3D) */ {
 public:
  inline Grid3D() : Grid3D(nullptr) {};
  virtual ~Grid3D();

  Grid3D(const Grid3D& from);
  Grid3D(Grid3D&& from) noexcept
    : Grid3D() {
    *this = ::std::move(from);
  }

  inline Grid3D& operator=(const Grid3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Grid3D& operator=(Grid3D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Grid3D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Grid3D* internal_default_instance() {
    return reinterpret_cast<const Grid3D*>(
               &_Grid3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    9;

  friend void swap(Grid3D& a, Grid3D& b) {
    a.Swap(&b);
  }
  inline void Swap(Grid3D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Grid3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Grid3D* New() const final {
    return CreateMaybeMessage<Grid3D>(nullptr);
  }

  Grid3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Grid3D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Grid3D& from);
  void MergeFrom(const Grid3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Grid3D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.Grid3D";
  }
  protected:
  explicit Grid3D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dtcc_2eproto);
    return ::descriptor_table_dtcc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBoundingBoxFieldNumber = 1,
    kXSizeFieldNumber = 2,
    kYSizeFieldNumber = 3,
    kZSizeFieldNumber = 4,
    kXStepFieldNumber = 5,
    kYStepFieldNumber = 6,
    kZStepFieldNumber = 7,
  };
  // .DTCC.BoundingBox3D boundingBox = 1;
  bool has_boundingbox() const;
  private:
  bool _internal_has_boundingbox() const;
  public:
  void clear_boundingbox();
  const ::DTCC::BoundingBox3D& boundingbox() const;
  ::DTCC::BoundingBox3D* release_boundingbox();
  ::DTCC::BoundingBox3D* mutable_boundingbox();
  void set_allocated_boundingbox(::DTCC::BoundingBox3D* boundingbox);
  private:
  const ::DTCC::BoundingBox3D& _internal_boundingbox() const;
  ::DTCC::BoundingBox3D* _internal_mutable_boundingbox();
  public:
  void unsafe_arena_set_allocated_boundingbox(
      ::DTCC::BoundingBox3D* boundingbox);
  ::DTCC::BoundingBox3D* unsafe_arena_release_boundingbox();

  // int32 xSize = 2;
  void clear_xsize();
  ::PROTOBUF_NAMESPACE_ID::int32 xsize() const;
  void set_xsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_xsize() const;
  void _internal_set_xsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 ySize = 3;
  void clear_ysize();
  ::PROTOBUF_NAMESPACE_ID::int32 ysize() const;
  void set_ysize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_ysize() const;
  void _internal_set_ysize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // int32 zSize = 4;
  void clear_zsize();
  ::PROTOBUF_NAMESPACE_ID::int32 zsize() const;
  void set_zsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_zsize() const;
  void _internal_set_zsize(::PROTOBUF_NAMESPACE_ID::int32 value);
  public:

  // float xStep = 5;
  void clear_xstep();
  float xstep() const;
  void set_xstep(float value);
  private:
  float _internal_xstep() const;
  void _internal_set_xstep(float value);
  public:

  // float yStep = 6;
  void clear_ystep();
  float ystep() const;
  void set_ystep(float value);
  private:
  float _internal_ystep() const;
  void _internal_set_ystep(float value);
  public:

  // float zStep = 7;
  void clear_zstep();
  float zstep() const;
  void set_zstep(float value);
  private:
  float _internal_zstep() const;
  void _internal_set_zstep(float value);
  public:

  // @@protoc_insertion_point(class_scope:DTCC.Grid3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::DTCC::BoundingBox3D* boundingbox_;
  ::PROTOBUF_NAMESPACE_ID::int32 xsize_;
  ::PROTOBUF_NAMESPACE_ID::int32 ysize_;
  ::PROTOBUF_NAMESPACE_ID::int32 zsize_;
  float xstep_;
  float ystep_;
  float zstep_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class Mesh2D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DTCC.Mesh2D) */ {
 public:
  inline Mesh2D() : Mesh2D(nullptr) {};
  virtual ~Mesh2D();

  Mesh2D(const Mesh2D& from);
  Mesh2D(Mesh2D&& from) noexcept
    : Mesh2D() {
    *this = ::std::move(from);
  }

  inline Mesh2D& operator=(const Mesh2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mesh2D& operator=(Mesh2D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Mesh2D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mesh2D* internal_default_instance() {
    return reinterpret_cast<const Mesh2D*>(
               &_Mesh2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    10;

  friend void swap(Mesh2D& a, Mesh2D& b) {
    a.Swap(&b);
  }
  inline void Swap(Mesh2D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mesh2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Mesh2D* New() const final {
    return CreateMaybeMessage<Mesh2D>(nullptr);
  }

  Mesh2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Mesh2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Mesh2D& from);
  void MergeFrom(const Mesh2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mesh2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.Mesh2D";
  }
  protected:
  explicit Mesh2D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dtcc_2eproto);
    return ::descriptor_table_dtcc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerticesFieldNumber = 1,
    kCellsFieldNumber = 2,
    kMarkersFieldNumber = 3,
  };
  // repeated .DTCC.Vector2D vertices = 1;
  int vertices_size() const;
  private:
  int _internal_vertices_size() const;
  public:
  void clear_vertices();
  ::DTCC::Vector2D* mutable_vertices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >*
      mutable_vertices();
  private:
  const ::DTCC::Vector2D& _internal_vertices(int index) const;
  ::DTCC::Vector2D* _internal_add_vertices();
  public:
  const ::DTCC::Vector2D& vertices(int index) const;
  ::DTCC::Vector2D* add_vertices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >&
      vertices() const;

  // repeated .DTCC.Simplex2D cells = 2;
  int cells_size() const;
  private:
  int _internal_cells_size() const;
  public:
  void clear_cells();
  ::DTCC::Simplex2D* mutable_cells(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Simplex2D >*
      mutable_cells();
  private:
  const ::DTCC::Simplex2D& _internal_cells(int index) const;
  ::DTCC::Simplex2D* _internal_add_cells();
  public:
  const ::DTCC::Simplex2D& cells(int index) const;
  ::DTCC::Simplex2D* add_cells();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Simplex2D >&
      cells() const;

  // repeated int32 markers = 3;
  int markers_size() const;
  private:
  int _internal_markers_size() const;
  public:
  void clear_markers();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_markers(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_markers() const;
  void _internal_add_markers(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_markers();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 markers(int index) const;
  void set_markers(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_markers(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      markers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_markers();

  // @@protoc_insertion_point(class_scope:DTCC.Mesh2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D > vertices_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Simplex2D > cells_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > markers_;
  mutable std::atomic<int> _markers_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class Mesh3D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DTCC.Mesh3D) */ {
 public:
  inline Mesh3D() : Mesh3D(nullptr) {};
  virtual ~Mesh3D();

  Mesh3D(const Mesh3D& from);
  Mesh3D(Mesh3D&& from) noexcept
    : Mesh3D() {
    *this = ::std::move(from);
  }

  inline Mesh3D& operator=(const Mesh3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Mesh3D& operator=(Mesh3D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Mesh3D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Mesh3D* internal_default_instance() {
    return reinterpret_cast<const Mesh3D*>(
               &_Mesh3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    11;

  friend void swap(Mesh3D& a, Mesh3D& b) {
    a.Swap(&b);
  }
  inline void Swap(Mesh3D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Mesh3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Mesh3D* New() const final {
    return CreateMaybeMessage<Mesh3D>(nullptr);
  }

  Mesh3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Mesh3D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Mesh3D& from);
  void MergeFrom(const Mesh3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Mesh3D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.Mesh3D";
  }
  protected:
  explicit Mesh3D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dtcc_2eproto);
    return ::descriptor_table_dtcc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerticesFieldNumber = 1,
    kCellsFieldNumber = 2,
    kMarkersFieldNumber = 3,
  };
  // repeated .DTCC.Vector3D vertices = 1;
  int vertices_size() const;
  private:
  int _internal_vertices_size() const;
  public:
  void clear_vertices();
  ::DTCC::Vector3D* mutable_vertices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >*
      mutable_vertices();
  private:
  const ::DTCC::Vector3D& _internal_vertices(int index) const;
  ::DTCC::Vector3D* _internal_add_vertices();
  public:
  const ::DTCC::Vector3D& vertices(int index) const;
  ::DTCC::Vector3D* add_vertices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >&
      vertices() const;

  // repeated .DTCC.Simplex3D cells = 2;
  int cells_size() const;
  private:
  int _internal_cells_size() const;
  public:
  void clear_cells();
  ::DTCC::Simplex3D* mutable_cells(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Simplex3D >*
      mutable_cells();
  private:
  const ::DTCC::Simplex3D& _internal_cells(int index) const;
  ::DTCC::Simplex3D* _internal_add_cells();
  public:
  const ::DTCC::Simplex3D& cells(int index) const;
  ::DTCC::Simplex3D* add_cells();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Simplex3D >&
      cells() const;

  // repeated int32 markers = 3;
  int markers_size() const;
  private:
  int _internal_markers_size() const;
  public:
  void clear_markers();
  private:
  ::PROTOBUF_NAMESPACE_ID::int32 _internal_markers(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      _internal_markers() const;
  void _internal_add_markers(::PROTOBUF_NAMESPACE_ID::int32 value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      _internal_mutable_markers();
  public:
  ::PROTOBUF_NAMESPACE_ID::int32 markers(int index) const;
  void set_markers(int index, ::PROTOBUF_NAMESPACE_ID::int32 value);
  void add_markers(::PROTOBUF_NAMESPACE_ID::int32 value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
      markers() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
      mutable_markers();

  // @@protoc_insertion_point(class_scope:DTCC.Mesh3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D > vertices_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Simplex3D > cells_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 > markers_;
  mutable std::atomic<int> _markers_cached_byte_size_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class Surface2D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DTCC.Surface2D) */ {
 public:
  inline Surface2D() : Surface2D(nullptr) {};
  virtual ~Surface2D();

  Surface2D(const Surface2D& from);
  Surface2D(Surface2D&& from) noexcept
    : Surface2D() {
    *this = ::std::move(from);
  }

  inline Surface2D& operator=(const Surface2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Surface2D& operator=(Surface2D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Surface2D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Surface2D* internal_default_instance() {
    return reinterpret_cast<const Surface2D*>(
               &_Surface2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    12;

  friend void swap(Surface2D& a, Surface2D& b) {
    a.Swap(&b);
  }
  inline void Swap(Surface2D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Surface2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Surface2D* New() const final {
    return CreateMaybeMessage<Surface2D>(nullptr);
  }

  Surface2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Surface2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Surface2D& from);
  void MergeFrom(const Surface2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Surface2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.Surface2D";
  }
  protected:
  explicit Surface2D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dtcc_2eproto);
    return ::descriptor_table_dtcc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerticesFieldNumber = 1,
    kNormalsFieldNumber = 2,
    kEdgesFieldNumber = 3,
  };
  // repeated .DTCC.Vector2D vertices = 1;
  int vertices_size() const;
  private:
  int _internal_vertices_size() const;
  public:
  void clear_vertices();
  ::DTCC::Vector2D* mutable_vertices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >*
      mutable_vertices();
  private:
  const ::DTCC::Vector2D& _internal_vertices(int index) const;
  ::DTCC::Vector2D* _internal_add_vertices();
  public:
  const ::DTCC::Vector2D& vertices(int index) const;
  ::DTCC::Vector2D* add_vertices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >&
      vertices() const;

  // repeated .DTCC.Vector2D normals = 2;
  int normals_size() const;
  private:
  int _internal_normals_size() const;
  public:
  void clear_normals();
  ::DTCC::Vector2D* mutable_normals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >*
      mutable_normals();
  private:
  const ::DTCC::Vector2D& _internal_normals(int index) const;
  ::DTCC::Vector2D* _internal_add_normals();
  public:
  const ::DTCC::Vector2D& normals(int index) const;
  ::DTCC::Vector2D* add_normals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >&
      normals() const;

  // repeated .DTCC.Simplex1D edges = 3;
  int edges_size() const;
  private:
  int _internal_edges_size() const;
  public:
  void clear_edges();
  ::DTCC::Simplex1D* mutable_edges(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Simplex1D >*
      mutable_edges();
  private:
  const ::DTCC::Simplex1D& _internal_edges(int index) const;
  ::DTCC::Simplex1D* _internal_add_edges();
  public:
  const ::DTCC::Simplex1D& edges(int index) const;
  ::DTCC::Simplex1D* add_edges();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Simplex1D >&
      edges() const;

  // @@protoc_insertion_point(class_scope:DTCC.Surface2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D > vertices_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D > normals_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Simplex1D > edges_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class Surface3D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DTCC.Surface3D) */ {
 public:
  inline Surface3D() : Surface3D(nullptr) {};
  virtual ~Surface3D();

  Surface3D(const Surface3D& from);
  Surface3D(Surface3D&& from) noexcept
    : Surface3D() {
    *this = ::std::move(from);
  }

  inline Surface3D& operator=(const Surface3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline Surface3D& operator=(Surface3D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Surface3D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Surface3D* internal_default_instance() {
    return reinterpret_cast<const Surface3D*>(
               &_Surface3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    13;

  friend void swap(Surface3D& a, Surface3D& b) {
    a.Swap(&b);
  }
  inline void Swap(Surface3D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Surface3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Surface3D* New() const final {
    return CreateMaybeMessage<Surface3D>(nullptr);
  }

  Surface3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Surface3D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Surface3D& from);
  void MergeFrom(const Surface3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Surface3D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.Surface3D";
  }
  protected:
  explicit Surface3D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dtcc_2eproto);
    return ::descriptor_table_dtcc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kVerticesFieldNumber = 1,
    kNormalsFieldNumber = 2,
    kFacesFieldNumber = 3,
  };
  // repeated .DTCC.Vector3D vertices = 1;
  int vertices_size() const;
  private:
  int _internal_vertices_size() const;
  public:
  void clear_vertices();
  ::DTCC::Vector3D* mutable_vertices(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >*
      mutable_vertices();
  private:
  const ::DTCC::Vector3D& _internal_vertices(int index) const;
  ::DTCC::Vector3D* _internal_add_vertices();
  public:
  const ::DTCC::Vector3D& vertices(int index) const;
  ::DTCC::Vector3D* add_vertices();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >&
      vertices() const;

  // repeated .DTCC.Vector3D normals = 2;
  int normals_size() const;
  private:
  int _internal_normals_size() const;
  public:
  void clear_normals();
  ::DTCC::Vector3D* mutable_normals(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >*
      mutable_normals();
  private:
  const ::DTCC::Vector3D& _internal_normals(int index) const;
  ::DTCC::Vector3D* _internal_add_normals();
  public:
  const ::DTCC::Vector3D& normals(int index) const;
  ::DTCC::Vector3D* add_normals();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >&
      normals() const;

  // repeated .DTCC.Simplex2D faces = 3;
  int faces_size() const;
  private:
  int _internal_faces_size() const;
  public:
  void clear_faces();
  ::DTCC::Simplex2D* mutable_faces(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Simplex2D >*
      mutable_faces();
  private:
  const ::DTCC::Simplex2D& _internal_faces(int index) const;
  ::DTCC::Simplex2D* _internal_add_faces();
  public:
  const ::DTCC::Simplex2D& faces(int index) const;
  ::DTCC::Simplex2D* add_faces();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Simplex2D >&
      faces() const;

  // @@protoc_insertion_point(class_scope:DTCC.Surface3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D > vertices_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D > normals_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Simplex2D > faces_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class GridField2D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DTCC.GridField2D) */ {
 public:
  inline GridField2D() : GridField2D(nullptr) {};
  virtual ~GridField2D();

  GridField2D(const GridField2D& from);
  GridField2D(GridField2D&& from) noexcept
    : GridField2D() {
    *this = ::std::move(from);
  }

  inline GridField2D& operator=(const GridField2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline GridField2D& operator=(GridField2D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GridField2D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GridField2D* internal_default_instance() {
    return reinterpret_cast<const GridField2D*>(
               &_GridField2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    14;

  friend void swap(GridField2D& a, GridField2D& b) {
    a.Swap(&b);
  }
  inline void Swap(GridField2D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GridField2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GridField2D* New() const final {
    return CreateMaybeMessage<GridField2D>(nullptr);
  }

  GridField2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GridField2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GridField2D& from);
  void MergeFrom(const GridField2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GridField2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.GridField2D";
  }
  protected:
  explicit GridField2D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dtcc_2eproto);
    return ::descriptor_table_dtcc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kGridFieldNumber = 1,
  };
  // repeated float values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // .DTCC.Grid2D grid = 1;
  bool has_grid() const;
  private:
  bool _internal_has_grid() const;
  public:
  void clear_grid();
  const ::DTCC::Grid2D& grid() const;
  ::DTCC::Grid2D* release_grid();
  ::DTCC::Grid2D* mutable_grid();
  void set_allocated_grid(::DTCC::Grid2D* grid);
  private:
  const ::DTCC::Grid2D& _internal_grid() const;
  ::DTCC::Grid2D* _internal_mutable_grid();
  public:
  void unsafe_arena_set_allocated_grid(
      ::DTCC::Grid2D* grid);
  ::DTCC::Grid2D* unsafe_arena_release_grid();

  // @@protoc_insertion_point(class_scope:DTCC.GridField2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  ::DTCC::Grid2D* grid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class GridField3D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DTCC.GridField3D) */ {
 public:
  inline GridField3D() : GridField3D(nullptr) {};
  virtual ~GridField3D();

  GridField3D(const GridField3D& from);
  GridField3D(GridField3D&& from) noexcept
    : GridField3D() {
    *this = ::std::move(from);
  }

  inline GridField3D& operator=(const GridField3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline GridField3D& operator=(GridField3D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GridField3D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GridField3D* internal_default_instance() {
    return reinterpret_cast<const GridField3D*>(
               &_GridField3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    15;

  friend void swap(GridField3D& a, GridField3D& b) {
    a.Swap(&b);
  }
  inline void Swap(GridField3D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GridField3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GridField3D* New() const final {
    return CreateMaybeMessage<GridField3D>(nullptr);
  }

  GridField3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GridField3D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GridField3D& from);
  void MergeFrom(const GridField3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GridField3D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.GridField3D";
  }
  protected:
  explicit GridField3D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dtcc_2eproto);
    return ::descriptor_table_dtcc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kGridFieldNumber = 1,
  };
  // repeated float values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // .DTCC.Grid3D grid = 1;
  bool has_grid() const;
  private:
  bool _internal_has_grid() const;
  public:
  void clear_grid();
  const ::DTCC::Grid3D& grid() const;
  ::DTCC::Grid3D* release_grid();
  ::DTCC::Grid3D* mutable_grid();
  void set_allocated_grid(::DTCC::Grid3D* grid);
  private:
  const ::DTCC::Grid3D& _internal_grid() const;
  ::DTCC::Grid3D* _internal_mutable_grid();
  public:
  void unsafe_arena_set_allocated_grid(
      ::DTCC::Grid3D* grid);
  ::DTCC::Grid3D* unsafe_arena_release_grid();

  // @@protoc_insertion_point(class_scope:DTCC.GridField3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  ::DTCC::Grid3D* grid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class GridVectorField2D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DTCC.GridVectorField2D) */ {
 public:
  inline GridVectorField2D() : GridVectorField2D(nullptr) {};
  virtual ~GridVectorField2D();

  GridVectorField2D(const GridVectorField2D& from);
  GridVectorField2D(GridVectorField2D&& from) noexcept
    : GridVectorField2D() {
    *this = ::std::move(from);
  }

  inline GridVectorField2D& operator=(const GridVectorField2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline GridVectorField2D& operator=(GridVectorField2D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GridVectorField2D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GridVectorField2D* internal_default_instance() {
    return reinterpret_cast<const GridVectorField2D*>(
               &_GridVectorField2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    16;

  friend void swap(GridVectorField2D& a, GridVectorField2D& b) {
    a.Swap(&b);
  }
  inline void Swap(GridVectorField2D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GridVectorField2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GridVectorField2D* New() const final {
    return CreateMaybeMessage<GridVectorField2D>(nullptr);
  }

  GridVectorField2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GridVectorField2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GridVectorField2D& from);
  void MergeFrom(const GridVectorField2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GridVectorField2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.GridVectorField2D";
  }
  protected:
  explicit GridVectorField2D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dtcc_2eproto);
    return ::descriptor_table_dtcc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kGridFieldNumber = 1,
  };
  // repeated float values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // .DTCC.Grid2D grid = 1;
  bool has_grid() const;
  private:
  bool _internal_has_grid() const;
  public:
  void clear_grid();
  const ::DTCC::Grid2D& grid() const;
  ::DTCC::Grid2D* release_grid();
  ::DTCC::Grid2D* mutable_grid();
  void set_allocated_grid(::DTCC::Grid2D* grid);
  private:
  const ::DTCC::Grid2D& _internal_grid() const;
  ::DTCC::Grid2D* _internal_mutable_grid();
  public:
  void unsafe_arena_set_allocated_grid(
      ::DTCC::Grid2D* grid);
  ::DTCC::Grid2D* unsafe_arena_release_grid();

  // @@protoc_insertion_point(class_scope:DTCC.GridVectorField2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  ::DTCC::Grid2D* grid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class GridVectorField3D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DTCC.GridVectorField3D) */ {
 public:
  inline GridVectorField3D() : GridVectorField3D(nullptr) {};
  virtual ~GridVectorField3D();

  GridVectorField3D(const GridVectorField3D& from);
  GridVectorField3D(GridVectorField3D&& from) noexcept
    : GridVectorField3D() {
    *this = ::std::move(from);
  }

  inline GridVectorField3D& operator=(const GridVectorField3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline GridVectorField3D& operator=(GridVectorField3D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const GridVectorField3D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const GridVectorField3D* internal_default_instance() {
    return reinterpret_cast<const GridVectorField3D*>(
               &_GridVectorField3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    17;

  friend void swap(GridVectorField3D& a, GridVectorField3D& b) {
    a.Swap(&b);
  }
  inline void Swap(GridVectorField3D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(GridVectorField3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline GridVectorField3D* New() const final {
    return CreateMaybeMessage<GridVectorField3D>(nullptr);
  }

  GridVectorField3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<GridVectorField3D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const GridVectorField3D& from);
  void MergeFrom(const GridVectorField3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(GridVectorField3D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.GridVectorField3D";
  }
  protected:
  explicit GridVectorField3D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dtcc_2eproto);
    return ::descriptor_table_dtcc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kGridFieldNumber = 1,
  };
  // repeated float values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // .DTCC.Grid3D grid = 1;
  bool has_grid() const;
  private:
  bool _internal_has_grid() const;
  public:
  void clear_grid();
  const ::DTCC::Grid3D& grid() const;
  ::DTCC::Grid3D* release_grid();
  ::DTCC::Grid3D* mutable_grid();
  void set_allocated_grid(::DTCC::Grid3D* grid);
  private:
  const ::DTCC::Grid3D& _internal_grid() const;
  ::DTCC::Grid3D* _internal_mutable_grid();
  public:
  void unsafe_arena_set_allocated_grid(
      ::DTCC::Grid3D* grid);
  ::DTCC::Grid3D* unsafe_arena_release_grid();

  // @@protoc_insertion_point(class_scope:DTCC.GridVectorField3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  ::DTCC::Grid3D* grid_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class MeshField2D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DTCC.MeshField2D) */ {
 public:
  inline MeshField2D() : MeshField2D(nullptr) {};
  virtual ~MeshField2D();

  MeshField2D(const MeshField2D& from);
  MeshField2D(MeshField2D&& from) noexcept
    : MeshField2D() {
    *this = ::std::move(from);
  }

  inline MeshField2D& operator=(const MeshField2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeshField2D& operator=(MeshField2D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MeshField2D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MeshField2D* internal_default_instance() {
    return reinterpret_cast<const MeshField2D*>(
               &_MeshField2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    18;

  friend void swap(MeshField2D& a, MeshField2D& b) {
    a.Swap(&b);
  }
  inline void Swap(MeshField2D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MeshField2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MeshField2D* New() const final {
    return CreateMaybeMessage<MeshField2D>(nullptr);
  }

  MeshField2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MeshField2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MeshField2D& from);
  void MergeFrom(const MeshField2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeshField2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.MeshField2D";
  }
  protected:
  explicit MeshField2D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dtcc_2eproto);
    return ::descriptor_table_dtcc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kMeshFieldNumber = 1,
  };
  // repeated float values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // .DTCC.Mesh2D mesh = 1;
  bool has_mesh() const;
  private:
  bool _internal_has_mesh() const;
  public:
  void clear_mesh();
  const ::DTCC::Mesh2D& mesh() const;
  ::DTCC::Mesh2D* release_mesh();
  ::DTCC::Mesh2D* mutable_mesh();
  void set_allocated_mesh(::DTCC::Mesh2D* mesh);
  private:
  const ::DTCC::Mesh2D& _internal_mesh() const;
  ::DTCC::Mesh2D* _internal_mutable_mesh();
  public:
  void unsafe_arena_set_allocated_mesh(
      ::DTCC::Mesh2D* mesh);
  ::DTCC::Mesh2D* unsafe_arena_release_mesh();

  // @@protoc_insertion_point(class_scope:DTCC.MeshField2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  ::DTCC::Mesh2D* mesh_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class MeshField3D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DTCC.MeshField3D) */ {
 public:
  inline MeshField3D() : MeshField3D(nullptr) {};
  virtual ~MeshField3D();

  MeshField3D(const MeshField3D& from);
  MeshField3D(MeshField3D&& from) noexcept
    : MeshField3D() {
    *this = ::std::move(from);
  }

  inline MeshField3D& operator=(const MeshField3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeshField3D& operator=(MeshField3D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MeshField3D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MeshField3D* internal_default_instance() {
    return reinterpret_cast<const MeshField3D*>(
               &_MeshField3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    19;

  friend void swap(MeshField3D& a, MeshField3D& b) {
    a.Swap(&b);
  }
  inline void Swap(MeshField3D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MeshField3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MeshField3D* New() const final {
    return CreateMaybeMessage<MeshField3D>(nullptr);
  }

  MeshField3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MeshField3D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MeshField3D& from);
  void MergeFrom(const MeshField3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeshField3D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.MeshField3D";
  }
  protected:
  explicit MeshField3D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dtcc_2eproto);
    return ::descriptor_table_dtcc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kMeshFieldNumber = 1,
  };
  // repeated float values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // .DTCC.Mesh3D mesh = 1;
  bool has_mesh() const;
  private:
  bool _internal_has_mesh() const;
  public:
  void clear_mesh();
  const ::DTCC::Mesh3D& mesh() const;
  ::DTCC::Mesh3D* release_mesh();
  ::DTCC::Mesh3D* mutable_mesh();
  void set_allocated_mesh(::DTCC::Mesh3D* mesh);
  private:
  const ::DTCC::Mesh3D& _internal_mesh() const;
  ::DTCC::Mesh3D* _internal_mutable_mesh();
  public:
  void unsafe_arena_set_allocated_mesh(
      ::DTCC::Mesh3D* mesh);
  ::DTCC::Mesh3D* unsafe_arena_release_mesh();

  // @@protoc_insertion_point(class_scope:DTCC.MeshField3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  ::DTCC::Mesh3D* mesh_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class MeshVectorField2D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DTCC.MeshVectorField2D) */ {
 public:
  inline MeshVectorField2D() : MeshVectorField2D(nullptr) {};
  virtual ~MeshVectorField2D();

  MeshVectorField2D(const MeshVectorField2D& from);
  MeshVectorField2D(MeshVectorField2D&& from) noexcept
    : MeshVectorField2D() {
    *this = ::std::move(from);
  }

  inline MeshVectorField2D& operator=(const MeshVectorField2D& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeshVectorField2D& operator=(MeshVectorField2D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MeshVectorField2D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MeshVectorField2D* internal_default_instance() {
    return reinterpret_cast<const MeshVectorField2D*>(
               &_MeshVectorField2D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    20;

  friend void swap(MeshVectorField2D& a, MeshVectorField2D& b) {
    a.Swap(&b);
  }
  inline void Swap(MeshVectorField2D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MeshVectorField2D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MeshVectorField2D* New() const final {
    return CreateMaybeMessage<MeshVectorField2D>(nullptr);
  }

  MeshVectorField2D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MeshVectorField2D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MeshVectorField2D& from);
  void MergeFrom(const MeshVectorField2D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeshVectorField2D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.MeshVectorField2D";
  }
  protected:
  explicit MeshVectorField2D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dtcc_2eproto);
    return ::descriptor_table_dtcc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kMeshFieldNumber = 1,
  };
  // repeated float values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // .DTCC.Mesh2D mesh = 1;
  bool has_mesh() const;
  private:
  bool _internal_has_mesh() const;
  public:
  void clear_mesh();
  const ::DTCC::Mesh2D& mesh() const;
  ::DTCC::Mesh2D* release_mesh();
  ::DTCC::Mesh2D* mutable_mesh();
  void set_allocated_mesh(::DTCC::Mesh2D* mesh);
  private:
  const ::DTCC::Mesh2D& _internal_mesh() const;
  ::DTCC::Mesh2D* _internal_mutable_mesh();
  public:
  void unsafe_arena_set_allocated_mesh(
      ::DTCC::Mesh2D* mesh);
  ::DTCC::Mesh2D* unsafe_arena_release_mesh();

  // @@protoc_insertion_point(class_scope:DTCC.MeshVectorField2D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  ::DTCC::Mesh2D* mesh_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class MeshVectorField3D PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DTCC.MeshVectorField3D) */ {
 public:
  inline MeshVectorField3D() : MeshVectorField3D(nullptr) {};
  virtual ~MeshVectorField3D();

  MeshVectorField3D(const MeshVectorField3D& from);
  MeshVectorField3D(MeshVectorField3D&& from) noexcept
    : MeshVectorField3D() {
    *this = ::std::move(from);
  }

  inline MeshVectorField3D& operator=(const MeshVectorField3D& from) {
    CopyFrom(from);
    return *this;
  }
  inline MeshVectorField3D& operator=(MeshVectorField3D&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const MeshVectorField3D& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const MeshVectorField3D* internal_default_instance() {
    return reinterpret_cast<const MeshVectorField3D*>(
               &_MeshVectorField3D_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    21;

  friend void swap(MeshVectorField3D& a, MeshVectorField3D& b) {
    a.Swap(&b);
  }
  inline void Swap(MeshVectorField3D* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(MeshVectorField3D* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline MeshVectorField3D* New() const final {
    return CreateMaybeMessage<MeshVectorField3D>(nullptr);
  }

  MeshVectorField3D* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<MeshVectorField3D>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const MeshVectorField3D& from);
  void MergeFrom(const MeshVectorField3D& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(MeshVectorField3D* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.MeshVectorField3D";
  }
  protected:
  explicit MeshVectorField3D(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dtcc_2eproto);
    return ::descriptor_table_dtcc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kValuesFieldNumber = 2,
    kMeshFieldNumber = 1,
  };
  // repeated float values = 2;
  int values_size() const;
  private:
  int _internal_values_size() const;
  public:
  void clear_values();
  private:
  float _internal_values(int index) const;
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      _internal_values() const;
  void _internal_add_values(float value);
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      _internal_mutable_values();
  public:
  float values(int index) const;
  void set_values(int index, float value);
  void add_values(float value);
  const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
      values() const;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
      mutable_values();

  // .DTCC.Mesh3D mesh = 1;
  bool has_mesh() const;
  private:
  bool _internal_has_mesh() const;
  public:
  void clear_mesh();
  const ::DTCC::Mesh3D& mesh() const;
  ::DTCC::Mesh3D* release_mesh();
  ::DTCC::Mesh3D* mutable_mesh();
  void set_allocated_mesh(::DTCC::Mesh3D* mesh);
  private:
  const ::DTCC::Mesh3D& _internal_mesh() const;
  ::DTCC::Mesh3D* _internal_mutable_mesh();
  public:
  void unsafe_arena_set_allocated_mesh(
      ::DTCC::Mesh3D* mesh);
  ::DTCC::Mesh3D* unsafe_arena_release_mesh();

  // @@protoc_insertion_point(class_scope:DTCC.MeshVectorField3D)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedField< float > values_;
  mutable std::atomic<int> _values_cached_byte_size_;
  ::DTCC::Mesh3D* mesh_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class Building PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DTCC.Building) */ {
 public:
  inline Building() : Building(nullptr) {};
  virtual ~Building();

  Building(const Building& from);
  Building(Building&& from) noexcept
    : Building() {
    *this = ::std::move(from);
  }

  inline Building& operator=(const Building& from) {
    CopyFrom(from);
    return *this;
  }
  inline Building& operator=(Building&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const Building& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const Building* internal_default_instance() {
    return reinterpret_cast<const Building*>(
               &_Building_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    22;

  friend void swap(Building& a, Building& b) {
    a.Swap(&b);
  }
  inline void Swap(Building* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(Building* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline Building* New() const final {
    return CreateMaybeMessage<Building>(nullptr);
  }

  Building* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<Building>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const Building& from);
  void MergeFrom(const Building& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(Building* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.Building";
  }
  protected:
  explicit Building(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dtcc_2eproto);
    return ::descriptor_table_dtcc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kUuidFieldNumber = 1,
    kFootPrintFieldNumber = 2,
    kHeightFieldNumber = 3,
    kGroundHeightFieldNumber = 4,
  };
  // string uuid = 1;
  void clear_uuid();
  const std::string& uuid() const;
  void set_uuid(const std::string& value);
  void set_uuid(std::string&& value);
  void set_uuid(const char* value);
  void set_uuid(const char* value, size_t size);
  std::string* mutable_uuid();
  std::string* release_uuid();
  void set_allocated_uuid(std::string* uuid);
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  std::string* unsafe_arena_release_uuid();
  GOOGLE_PROTOBUF_RUNTIME_DEPRECATED("The unsafe_arena_ accessors for"
  "    string fields are deprecated and will be removed in a"
  "    future release.")
  void unsafe_arena_set_allocated_uuid(
      std::string* uuid);
  private:
  const std::string& _internal_uuid() const;
  void _internal_set_uuid(const std::string& value);
  std::string* _internal_mutable_uuid();
  public:

  // .DTCC.Polygon footPrint = 2;
  bool has_footprint() const;
  private:
  bool _internal_has_footprint() const;
  public:
  void clear_footprint();
  const ::DTCC::Polygon& footprint() const;
  ::DTCC::Polygon* release_footprint();
  ::DTCC::Polygon* mutable_footprint();
  void set_allocated_footprint(::DTCC::Polygon* footprint);
  private:
  const ::DTCC::Polygon& _internal_footprint() const;
  ::DTCC::Polygon* _internal_mutable_footprint();
  public:
  void unsafe_arena_set_allocated_footprint(
      ::DTCC::Polygon* footprint);
  ::DTCC::Polygon* unsafe_arena_release_footprint();

  // double height = 3;
  void clear_height();
  double height() const;
  void set_height(double value);
  private:
  double _internal_height() const;
  void _internal_set_height(double value);
  public:

  // double groundHeight = 4;
  void clear_groundheight();
  double groundheight() const;
  void set_groundheight(double value);
  private:
  double _internal_groundheight() const;
  void _internal_set_groundheight(double value);
  public:

  // @@protoc_insertion_point(class_scope:DTCC.Building)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::internal::ArenaStringPtr uuid_;
  ::DTCC::Polygon* footprint_;
  double height_;
  double groundheight_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// -------------------------------------------------------------------

class CityModel PROTOBUF_FINAL :
    public ::PROTOBUF_NAMESPACE_ID::Message /* @@protoc_insertion_point(class_definition:DTCC.CityModel) */ {
 public:
  inline CityModel() : CityModel(nullptr) {};
  virtual ~CityModel();

  CityModel(const CityModel& from);
  CityModel(CityModel&& from) noexcept
    : CityModel() {
    *this = ::std::move(from);
  }

  inline CityModel& operator=(const CityModel& from) {
    CopyFrom(from);
    return *this;
  }
  inline CityModel& operator=(CityModel&& from) noexcept {
    if (GetArena() == from.GetArena()) {
      if (this != &from) InternalSwap(&from);
    } else {
      CopyFrom(from);
    }
    return *this;
  }

  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* descriptor() {
    return GetDescriptor();
  }
  static const ::PROTOBUF_NAMESPACE_ID::Descriptor* GetDescriptor() {
    return GetMetadataStatic().descriptor;
  }
  static const ::PROTOBUF_NAMESPACE_ID::Reflection* GetReflection() {
    return GetMetadataStatic().reflection;
  }
  static const CityModel& default_instance();

  static void InitAsDefaultInstance();  // FOR INTERNAL USE ONLY
  static inline const CityModel* internal_default_instance() {
    return reinterpret_cast<const CityModel*>(
               &_CityModel_default_instance_);
  }
  static constexpr int kIndexInFileMessages =
    23;

  friend void swap(CityModel& a, CityModel& b) {
    a.Swap(&b);
  }
  inline void Swap(CityModel* other) {
    if (other == this) return;
    if (GetArena() == other->GetArena()) {
      InternalSwap(other);
    } else {
      ::PROTOBUF_NAMESPACE_ID::internal::GenericSwap(this, other);
    }
  }
  void UnsafeArenaSwap(CityModel* other) {
    if (other == this) return;
    GOOGLE_DCHECK(GetArena() == other->GetArena());
    InternalSwap(other);
  }

  // implements Message ----------------------------------------------

  inline CityModel* New() const final {
    return CreateMaybeMessage<CityModel>(nullptr);
  }

  CityModel* New(::PROTOBUF_NAMESPACE_ID::Arena* arena) const final {
    return CreateMaybeMessage<CityModel>(arena);
  }
  void CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) final;
  void CopyFrom(const CityModel& from);
  void MergeFrom(const CityModel& from);
  PROTOBUF_ATTRIBUTE_REINITIALIZES void Clear() final;
  bool IsInitialized() const final;

  size_t ByteSizeLong() const final;
  const char* _InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) final;
  ::PROTOBUF_NAMESPACE_ID::uint8* _InternalSerialize(
      ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const final;
  int GetCachedSize() const final { return _cached_size_.Get(); }

  private:
  inline void SharedCtor();
  inline void SharedDtor();
  void SetCachedSize(int size) const final;
  void InternalSwap(CityModel* other);
  friend class ::PROTOBUF_NAMESPACE_ID::internal::AnyMetadata;
  static ::PROTOBUF_NAMESPACE_ID::StringPiece FullMessageName() {
    return "DTCC.CityModel";
  }
  protected:
  explicit CityModel(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  private:
  static void ArenaDtor(void* object);
  inline void RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena* arena);
  public:

  ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadata() const final;
  private:
  static ::PROTOBUF_NAMESPACE_ID::Metadata GetMetadataStatic() {
    ::PROTOBUF_NAMESPACE_ID::internal::AssignDescriptors(&::descriptor_table_dtcc_2eproto);
    return ::descriptor_table_dtcc_2eproto.file_level_metadata[kIndexInFileMessages];
  }

  public:

  // nested types ----------------------------------------------------

  // accessors -------------------------------------------------------

  enum : int {
    kBuildingsFieldNumber = 4,
  };
  // repeated .DTCC.Building buildings = 4;
  int buildings_size() const;
  private:
  int _internal_buildings_size() const;
  public:
  void clear_buildings();
  ::DTCC::Building* mutable_buildings(int index);
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Building >*
      mutable_buildings();
  private:
  const ::DTCC::Building& _internal_buildings(int index) const;
  ::DTCC::Building* _internal_add_buildings();
  public:
  const ::DTCC::Building& buildings(int index) const;
  ::DTCC::Building* add_buildings();
  const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Building >&
      buildings() const;

  // @@protoc_insertion_point(class_scope:DTCC.CityModel)
 private:
  class _Internal;

  template <typename T> friend class ::PROTOBUF_NAMESPACE_ID::Arena::InternalHelper;
  typedef void InternalArenaConstructable_;
  typedef void DestructorSkippable_;
  ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Building > buildings_;
  mutable ::PROTOBUF_NAMESPACE_ID::internal::CachedSize _cached_size_;
  friend struct ::TableStruct_dtcc_2eproto;
};
// ===================================================================


// ===================================================================

#ifdef __GNUC__
  #pragma GCC diagnostic push
  #pragma GCC diagnostic ignored "-Wstrict-aliasing"
#endif  // __GNUC__
// Vector2D

// float x = 1;
inline void Vector2D::clear_x() {
  x_ = 0;
}
inline float Vector2D::_internal_x() const {
  return x_;
}
inline float Vector2D::x() const {
  // @@protoc_insertion_point(field_get:DTCC.Vector2D.x)
  return _internal_x();
}
inline void Vector2D::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Vector2D::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:DTCC.Vector2D.x)
}

// float y = 2;
inline void Vector2D::clear_y() {
  y_ = 0;
}
inline float Vector2D::_internal_y() const {
  return y_;
}
inline float Vector2D::y() const {
  // @@protoc_insertion_point(field_get:DTCC.Vector2D.y)
  return _internal_y();
}
inline void Vector2D::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Vector2D::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:DTCC.Vector2D.y)
}

// -------------------------------------------------------------------

// Vector3D

// float x = 1;
inline void Vector3D::clear_x() {
  x_ = 0;
}
inline float Vector3D::_internal_x() const {
  return x_;
}
inline float Vector3D::x() const {
  // @@protoc_insertion_point(field_get:DTCC.Vector3D.x)
  return _internal_x();
}
inline void Vector3D::_internal_set_x(float value) {
  
  x_ = value;
}
inline void Vector3D::set_x(float value) {
  _internal_set_x(value);
  // @@protoc_insertion_point(field_set:DTCC.Vector3D.x)
}

// float y = 2;
inline void Vector3D::clear_y() {
  y_ = 0;
}
inline float Vector3D::_internal_y() const {
  return y_;
}
inline float Vector3D::y() const {
  // @@protoc_insertion_point(field_get:DTCC.Vector3D.y)
  return _internal_y();
}
inline void Vector3D::_internal_set_y(float value) {
  
  y_ = value;
}
inline void Vector3D::set_y(float value) {
  _internal_set_y(value);
  // @@protoc_insertion_point(field_set:DTCC.Vector3D.y)
}

// float z = 3;
inline void Vector3D::clear_z() {
  z_ = 0;
}
inline float Vector3D::_internal_z() const {
  return z_;
}
inline float Vector3D::z() const {
  // @@protoc_insertion_point(field_get:DTCC.Vector3D.z)
  return _internal_z();
}
inline void Vector3D::_internal_set_z(float value) {
  
  z_ = value;
}
inline void Vector3D::set_z(float value) {
  _internal_set_z(value);
  // @@protoc_insertion_point(field_set:DTCC.Vector3D.z)
}

// -------------------------------------------------------------------

// Simplex1D

// int32 v0 = 1;
inline void Simplex1D::clear_v0() {
  v0_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Simplex1D::_internal_v0() const {
  return v0_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Simplex1D::v0() const {
  // @@protoc_insertion_point(field_get:DTCC.Simplex1D.v0)
  return _internal_v0();
}
inline void Simplex1D::_internal_set_v0(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  v0_ = value;
}
inline void Simplex1D::set_v0(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_v0(value);
  // @@protoc_insertion_point(field_set:DTCC.Simplex1D.v0)
}

// int32 v1 = 2;
inline void Simplex1D::clear_v1() {
  v1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Simplex1D::_internal_v1() const {
  return v1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Simplex1D::v1() const {
  // @@protoc_insertion_point(field_get:DTCC.Simplex1D.v1)
  return _internal_v1();
}
inline void Simplex1D::_internal_set_v1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  v1_ = value;
}
inline void Simplex1D::set_v1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_v1(value);
  // @@protoc_insertion_point(field_set:DTCC.Simplex1D.v1)
}

// -------------------------------------------------------------------

// Simplex2D

// int32 v0 = 1;
inline void Simplex2D::clear_v0() {
  v0_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Simplex2D::_internal_v0() const {
  return v0_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Simplex2D::v0() const {
  // @@protoc_insertion_point(field_get:DTCC.Simplex2D.v0)
  return _internal_v0();
}
inline void Simplex2D::_internal_set_v0(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  v0_ = value;
}
inline void Simplex2D::set_v0(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_v0(value);
  // @@protoc_insertion_point(field_set:DTCC.Simplex2D.v0)
}

// int32 v1 = 2;
inline void Simplex2D::clear_v1() {
  v1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Simplex2D::_internal_v1() const {
  return v1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Simplex2D::v1() const {
  // @@protoc_insertion_point(field_get:DTCC.Simplex2D.v1)
  return _internal_v1();
}
inline void Simplex2D::_internal_set_v1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  v1_ = value;
}
inline void Simplex2D::set_v1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_v1(value);
  // @@protoc_insertion_point(field_set:DTCC.Simplex2D.v1)
}

// int32 v2 = 3;
inline void Simplex2D::clear_v2() {
  v2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Simplex2D::_internal_v2() const {
  return v2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Simplex2D::v2() const {
  // @@protoc_insertion_point(field_get:DTCC.Simplex2D.v2)
  return _internal_v2();
}
inline void Simplex2D::_internal_set_v2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  v2_ = value;
}
inline void Simplex2D::set_v2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_v2(value);
  // @@protoc_insertion_point(field_set:DTCC.Simplex2D.v2)
}

// -------------------------------------------------------------------

// Simplex3D

// int32 v0 = 1;
inline void Simplex3D::clear_v0() {
  v0_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Simplex3D::_internal_v0() const {
  return v0_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Simplex3D::v0() const {
  // @@protoc_insertion_point(field_get:DTCC.Simplex3D.v0)
  return _internal_v0();
}
inline void Simplex3D::_internal_set_v0(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  v0_ = value;
}
inline void Simplex3D::set_v0(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_v0(value);
  // @@protoc_insertion_point(field_set:DTCC.Simplex3D.v0)
}

// int32 v1 = 2;
inline void Simplex3D::clear_v1() {
  v1_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Simplex3D::_internal_v1() const {
  return v1_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Simplex3D::v1() const {
  // @@protoc_insertion_point(field_get:DTCC.Simplex3D.v1)
  return _internal_v1();
}
inline void Simplex3D::_internal_set_v1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  v1_ = value;
}
inline void Simplex3D::set_v1(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_v1(value);
  // @@protoc_insertion_point(field_set:DTCC.Simplex3D.v1)
}

// int32 v2 = 3;
inline void Simplex3D::clear_v2() {
  v2_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Simplex3D::_internal_v2() const {
  return v2_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Simplex3D::v2() const {
  // @@protoc_insertion_point(field_get:DTCC.Simplex3D.v2)
  return _internal_v2();
}
inline void Simplex3D::_internal_set_v2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  v2_ = value;
}
inline void Simplex3D::set_v2(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_v2(value);
  // @@protoc_insertion_point(field_set:DTCC.Simplex3D.v2)
}

// int32 v3 = 4;
inline void Simplex3D::clear_v3() {
  v3_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Simplex3D::_internal_v3() const {
  return v3_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Simplex3D::v3() const {
  // @@protoc_insertion_point(field_get:DTCC.Simplex3D.v3)
  return _internal_v3();
}
inline void Simplex3D::_internal_set_v3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  v3_ = value;
}
inline void Simplex3D::set_v3(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_v3(value);
  // @@protoc_insertion_point(field_set:DTCC.Simplex3D.v3)
}

// -------------------------------------------------------------------

// BoundingBox2D

// .DTCC.Vector2D p = 1;
inline bool BoundingBox2D::_internal_has_p() const {
  return this != internal_default_instance() && p_ != nullptr;
}
inline bool BoundingBox2D::has_p() const {
  return _internal_has_p();
}
inline void BoundingBox2D::clear_p() {
  if (GetArena() == nullptr && p_ != nullptr) {
    delete p_;
  }
  p_ = nullptr;
}
inline const ::DTCC::Vector2D& BoundingBox2D::_internal_p() const {
  const ::DTCC::Vector2D* p = p_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DTCC::Vector2D*>(
      &::DTCC::_Vector2D_default_instance_);
}
inline const ::DTCC::Vector2D& BoundingBox2D::p() const {
  // @@protoc_insertion_point(field_get:DTCC.BoundingBox2D.p)
  return _internal_p();
}
inline void BoundingBox2D::unsafe_arena_set_allocated_p(
    ::DTCC::Vector2D* p) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(p_);
  }
  p_ = p;
  if (p) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.BoundingBox2D.p)
}
inline ::DTCC::Vector2D* BoundingBox2D::release_p() {
  auto temp = unsafe_arena_release_p();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DTCC::Vector2D* BoundingBox2D::unsafe_arena_release_p() {
  // @@protoc_insertion_point(field_release:DTCC.BoundingBox2D.p)
  
  ::DTCC::Vector2D* temp = p_;
  p_ = nullptr;
  return temp;
}
inline ::DTCC::Vector2D* BoundingBox2D::_internal_mutable_p() {
  
  if (p_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Vector2D>(GetArena());
    p_ = p;
  }
  return p_;
}
inline ::DTCC::Vector2D* BoundingBox2D::mutable_p() {
  // @@protoc_insertion_point(field_mutable:DTCC.BoundingBox2D.p)
  return _internal_mutable_p();
}
inline void BoundingBox2D::set_allocated_p(::DTCC::Vector2D* p) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete p_;
  }
  if (p) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(p);
    if (message_arena != submessage_arena) {
      p = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, p, submessage_arena);
    }
    
  } else {
    
  }
  p_ = p;
  // @@protoc_insertion_point(field_set_allocated:DTCC.BoundingBox2D.p)
}

// .DTCC.Vector2D q = 2;
inline bool BoundingBox2D::_internal_has_q() const {
  return this != internal_default_instance() && q_ != nullptr;
}
inline bool BoundingBox2D::has_q() const {
  return _internal_has_q();
}
inline void BoundingBox2D::clear_q() {
  if (GetArena() == nullptr && q_ != nullptr) {
    delete q_;
  }
  q_ = nullptr;
}
inline const ::DTCC::Vector2D& BoundingBox2D::_internal_q() const {
  const ::DTCC::Vector2D* p = q_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DTCC::Vector2D*>(
      &::DTCC::_Vector2D_default_instance_);
}
inline const ::DTCC::Vector2D& BoundingBox2D::q() const {
  // @@protoc_insertion_point(field_get:DTCC.BoundingBox2D.q)
  return _internal_q();
}
inline void BoundingBox2D::unsafe_arena_set_allocated_q(
    ::DTCC::Vector2D* q) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(q_);
  }
  q_ = q;
  if (q) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.BoundingBox2D.q)
}
inline ::DTCC::Vector2D* BoundingBox2D::release_q() {
  auto temp = unsafe_arena_release_q();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DTCC::Vector2D* BoundingBox2D::unsafe_arena_release_q() {
  // @@protoc_insertion_point(field_release:DTCC.BoundingBox2D.q)
  
  ::DTCC::Vector2D* temp = q_;
  q_ = nullptr;
  return temp;
}
inline ::DTCC::Vector2D* BoundingBox2D::_internal_mutable_q() {
  
  if (q_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Vector2D>(GetArena());
    q_ = p;
  }
  return q_;
}
inline ::DTCC::Vector2D* BoundingBox2D::mutable_q() {
  // @@protoc_insertion_point(field_mutable:DTCC.BoundingBox2D.q)
  return _internal_mutable_q();
}
inline void BoundingBox2D::set_allocated_q(::DTCC::Vector2D* q) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete q_;
  }
  if (q) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(q);
    if (message_arena != submessage_arena) {
      q = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, q, submessage_arena);
    }
    
  } else {
    
  }
  q_ = q;
  // @@protoc_insertion_point(field_set_allocated:DTCC.BoundingBox2D.q)
}

// -------------------------------------------------------------------

// BoundingBox3D

// .DTCC.Vector3D p = 1;
inline bool BoundingBox3D::_internal_has_p() const {
  return this != internal_default_instance() && p_ != nullptr;
}
inline bool BoundingBox3D::has_p() const {
  return _internal_has_p();
}
inline void BoundingBox3D::clear_p() {
  if (GetArena() == nullptr && p_ != nullptr) {
    delete p_;
  }
  p_ = nullptr;
}
inline const ::DTCC::Vector3D& BoundingBox3D::_internal_p() const {
  const ::DTCC::Vector3D* p = p_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DTCC::Vector3D*>(
      &::DTCC::_Vector3D_default_instance_);
}
inline const ::DTCC::Vector3D& BoundingBox3D::p() const {
  // @@protoc_insertion_point(field_get:DTCC.BoundingBox3D.p)
  return _internal_p();
}
inline void BoundingBox3D::unsafe_arena_set_allocated_p(
    ::DTCC::Vector3D* p) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(p_);
  }
  p_ = p;
  if (p) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.BoundingBox3D.p)
}
inline ::DTCC::Vector3D* BoundingBox3D::release_p() {
  auto temp = unsafe_arena_release_p();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DTCC::Vector3D* BoundingBox3D::unsafe_arena_release_p() {
  // @@protoc_insertion_point(field_release:DTCC.BoundingBox3D.p)
  
  ::DTCC::Vector3D* temp = p_;
  p_ = nullptr;
  return temp;
}
inline ::DTCC::Vector3D* BoundingBox3D::_internal_mutable_p() {
  
  if (p_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Vector3D>(GetArena());
    p_ = p;
  }
  return p_;
}
inline ::DTCC::Vector3D* BoundingBox3D::mutable_p() {
  // @@protoc_insertion_point(field_mutable:DTCC.BoundingBox3D.p)
  return _internal_mutable_p();
}
inline void BoundingBox3D::set_allocated_p(::DTCC::Vector3D* p) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete p_;
  }
  if (p) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(p);
    if (message_arena != submessage_arena) {
      p = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, p, submessage_arena);
    }
    
  } else {
    
  }
  p_ = p;
  // @@protoc_insertion_point(field_set_allocated:DTCC.BoundingBox3D.p)
}

// .DTCC.Vector3D q = 2;
inline bool BoundingBox3D::_internal_has_q() const {
  return this != internal_default_instance() && q_ != nullptr;
}
inline bool BoundingBox3D::has_q() const {
  return _internal_has_q();
}
inline void BoundingBox3D::clear_q() {
  if (GetArena() == nullptr && q_ != nullptr) {
    delete q_;
  }
  q_ = nullptr;
}
inline const ::DTCC::Vector3D& BoundingBox3D::_internal_q() const {
  const ::DTCC::Vector3D* p = q_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DTCC::Vector3D*>(
      &::DTCC::_Vector3D_default_instance_);
}
inline const ::DTCC::Vector3D& BoundingBox3D::q() const {
  // @@protoc_insertion_point(field_get:DTCC.BoundingBox3D.q)
  return _internal_q();
}
inline void BoundingBox3D::unsafe_arena_set_allocated_q(
    ::DTCC::Vector3D* q) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(q_);
  }
  q_ = q;
  if (q) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.BoundingBox3D.q)
}
inline ::DTCC::Vector3D* BoundingBox3D::release_q() {
  auto temp = unsafe_arena_release_q();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DTCC::Vector3D* BoundingBox3D::unsafe_arena_release_q() {
  // @@protoc_insertion_point(field_release:DTCC.BoundingBox3D.q)
  
  ::DTCC::Vector3D* temp = q_;
  q_ = nullptr;
  return temp;
}
inline ::DTCC::Vector3D* BoundingBox3D::_internal_mutable_q() {
  
  if (q_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Vector3D>(GetArena());
    q_ = p;
  }
  return q_;
}
inline ::DTCC::Vector3D* BoundingBox3D::mutable_q() {
  // @@protoc_insertion_point(field_mutable:DTCC.BoundingBox3D.q)
  return _internal_mutable_q();
}
inline void BoundingBox3D::set_allocated_q(::DTCC::Vector3D* q) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete q_;
  }
  if (q) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(q);
    if (message_arena != submessage_arena) {
      q = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, q, submessage_arena);
    }
    
  } else {
    
  }
  q_ = q;
  // @@protoc_insertion_point(field_set_allocated:DTCC.BoundingBox3D.q)
}

// -------------------------------------------------------------------

// Polygon

// repeated .DTCC.Vector2D vertices = 1;
inline int Polygon::_internal_vertices_size() const {
  return vertices_.size();
}
inline int Polygon::vertices_size() const {
  return _internal_vertices_size();
}
inline void Polygon::clear_vertices() {
  vertices_.Clear();
}
inline ::DTCC::Vector2D* Polygon::mutable_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.Polygon.vertices)
  return vertices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >*
Polygon::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.Polygon.vertices)
  return &vertices_;
}
inline const ::DTCC::Vector2D& Polygon::_internal_vertices(int index) const {
  return vertices_.Get(index);
}
inline const ::DTCC::Vector2D& Polygon::vertices(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.Polygon.vertices)
  return _internal_vertices(index);
}
inline ::DTCC::Vector2D* Polygon::_internal_add_vertices() {
  return vertices_.Add();
}
inline ::DTCC::Vector2D* Polygon::add_vertices() {
  // @@protoc_insertion_point(field_add:DTCC.Polygon.vertices)
  return _internal_add_vertices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >&
Polygon::vertices() const {
  // @@protoc_insertion_point(field_list:DTCC.Polygon.vertices)
  return vertices_;
}

// -------------------------------------------------------------------

// Grid2D

// .DTCC.BoundingBox2D boundingBox = 1;
inline bool Grid2D::_internal_has_boundingbox() const {
  return this != internal_default_instance() && boundingbox_ != nullptr;
}
inline bool Grid2D::has_boundingbox() const {
  return _internal_has_boundingbox();
}
inline void Grid2D::clear_boundingbox() {
  if (GetArena() == nullptr && boundingbox_ != nullptr) {
    delete boundingbox_;
  }
  boundingbox_ = nullptr;
}
inline const ::DTCC::BoundingBox2D& Grid2D::_internal_boundingbox() const {
  const ::DTCC::BoundingBox2D* p = boundingbox_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DTCC::BoundingBox2D*>(
      &::DTCC::_BoundingBox2D_default_instance_);
}
inline const ::DTCC::BoundingBox2D& Grid2D::boundingbox() const {
  // @@protoc_insertion_point(field_get:DTCC.Grid2D.boundingBox)
  return _internal_boundingbox();
}
inline void Grid2D::unsafe_arena_set_allocated_boundingbox(
    ::DTCC::BoundingBox2D* boundingbox) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(boundingbox_);
  }
  boundingbox_ = boundingbox;
  if (boundingbox) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.Grid2D.boundingBox)
}
inline ::DTCC::BoundingBox2D* Grid2D::release_boundingbox() {
  auto temp = unsafe_arena_release_boundingbox();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DTCC::BoundingBox2D* Grid2D::unsafe_arena_release_boundingbox() {
  // @@protoc_insertion_point(field_release:DTCC.Grid2D.boundingBox)
  
  ::DTCC::BoundingBox2D* temp = boundingbox_;
  boundingbox_ = nullptr;
  return temp;
}
inline ::DTCC::BoundingBox2D* Grid2D::_internal_mutable_boundingbox() {
  
  if (boundingbox_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::BoundingBox2D>(GetArena());
    boundingbox_ = p;
  }
  return boundingbox_;
}
inline ::DTCC::BoundingBox2D* Grid2D::mutable_boundingbox() {
  // @@protoc_insertion_point(field_mutable:DTCC.Grid2D.boundingBox)
  return _internal_mutable_boundingbox();
}
inline void Grid2D::set_allocated_boundingbox(::DTCC::BoundingBox2D* boundingbox) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete boundingbox_;
  }
  if (boundingbox) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(boundingbox);
    if (message_arena != submessage_arena) {
      boundingbox = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, boundingbox, submessage_arena);
    }
    
  } else {
    
  }
  boundingbox_ = boundingbox;
  // @@protoc_insertion_point(field_set_allocated:DTCC.Grid2D.boundingBox)
}

// int32 xSize = 2;
inline void Grid2D::clear_xsize() {
  xsize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Grid2D::_internal_xsize() const {
  return xsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Grid2D::xsize() const {
  // @@protoc_insertion_point(field_get:DTCC.Grid2D.xSize)
  return _internal_xsize();
}
inline void Grid2D::_internal_set_xsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xsize_ = value;
}
inline void Grid2D::set_xsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xsize(value);
  // @@protoc_insertion_point(field_set:DTCC.Grid2D.xSize)
}

// int32 ySize = 3;
inline void Grid2D::clear_ysize() {
  ysize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Grid2D::_internal_ysize() const {
  return ysize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Grid2D::ysize() const {
  // @@protoc_insertion_point(field_get:DTCC.Grid2D.ySize)
  return _internal_ysize();
}
inline void Grid2D::_internal_set_ysize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ysize_ = value;
}
inline void Grid2D::set_ysize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ysize(value);
  // @@protoc_insertion_point(field_set:DTCC.Grid2D.ySize)
}

// float xStep = 4;
inline void Grid2D::clear_xstep() {
  xstep_ = 0;
}
inline float Grid2D::_internal_xstep() const {
  return xstep_;
}
inline float Grid2D::xstep() const {
  // @@protoc_insertion_point(field_get:DTCC.Grid2D.xStep)
  return _internal_xstep();
}
inline void Grid2D::_internal_set_xstep(float value) {
  
  xstep_ = value;
}
inline void Grid2D::set_xstep(float value) {
  _internal_set_xstep(value);
  // @@protoc_insertion_point(field_set:DTCC.Grid2D.xStep)
}

// float yStep = 5;
inline void Grid2D::clear_ystep() {
  ystep_ = 0;
}
inline float Grid2D::_internal_ystep() const {
  return ystep_;
}
inline float Grid2D::ystep() const {
  // @@protoc_insertion_point(field_get:DTCC.Grid2D.yStep)
  return _internal_ystep();
}
inline void Grid2D::_internal_set_ystep(float value) {
  
  ystep_ = value;
}
inline void Grid2D::set_ystep(float value) {
  _internal_set_ystep(value);
  // @@protoc_insertion_point(field_set:DTCC.Grid2D.yStep)
}

// -------------------------------------------------------------------

// Grid3D

// .DTCC.BoundingBox3D boundingBox = 1;
inline bool Grid3D::_internal_has_boundingbox() const {
  return this != internal_default_instance() && boundingbox_ != nullptr;
}
inline bool Grid3D::has_boundingbox() const {
  return _internal_has_boundingbox();
}
inline void Grid3D::clear_boundingbox() {
  if (GetArena() == nullptr && boundingbox_ != nullptr) {
    delete boundingbox_;
  }
  boundingbox_ = nullptr;
}
inline const ::DTCC::BoundingBox3D& Grid3D::_internal_boundingbox() const {
  const ::DTCC::BoundingBox3D* p = boundingbox_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DTCC::BoundingBox3D*>(
      &::DTCC::_BoundingBox3D_default_instance_);
}
inline const ::DTCC::BoundingBox3D& Grid3D::boundingbox() const {
  // @@protoc_insertion_point(field_get:DTCC.Grid3D.boundingBox)
  return _internal_boundingbox();
}
inline void Grid3D::unsafe_arena_set_allocated_boundingbox(
    ::DTCC::BoundingBox3D* boundingbox) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(boundingbox_);
  }
  boundingbox_ = boundingbox;
  if (boundingbox) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.Grid3D.boundingBox)
}
inline ::DTCC::BoundingBox3D* Grid3D::release_boundingbox() {
  auto temp = unsafe_arena_release_boundingbox();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DTCC::BoundingBox3D* Grid3D::unsafe_arena_release_boundingbox() {
  // @@protoc_insertion_point(field_release:DTCC.Grid3D.boundingBox)
  
  ::DTCC::BoundingBox3D* temp = boundingbox_;
  boundingbox_ = nullptr;
  return temp;
}
inline ::DTCC::BoundingBox3D* Grid3D::_internal_mutable_boundingbox() {
  
  if (boundingbox_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::BoundingBox3D>(GetArena());
    boundingbox_ = p;
  }
  return boundingbox_;
}
inline ::DTCC::BoundingBox3D* Grid3D::mutable_boundingbox() {
  // @@protoc_insertion_point(field_mutable:DTCC.Grid3D.boundingBox)
  return _internal_mutable_boundingbox();
}
inline void Grid3D::set_allocated_boundingbox(::DTCC::BoundingBox3D* boundingbox) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete boundingbox_;
  }
  if (boundingbox) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(boundingbox);
    if (message_arena != submessage_arena) {
      boundingbox = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, boundingbox, submessage_arena);
    }
    
  } else {
    
  }
  boundingbox_ = boundingbox;
  // @@protoc_insertion_point(field_set_allocated:DTCC.Grid3D.boundingBox)
}

// int32 xSize = 2;
inline void Grid3D::clear_xsize() {
  xsize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Grid3D::_internal_xsize() const {
  return xsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Grid3D::xsize() const {
  // @@protoc_insertion_point(field_get:DTCC.Grid3D.xSize)
  return _internal_xsize();
}
inline void Grid3D::_internal_set_xsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  xsize_ = value;
}
inline void Grid3D::set_xsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_xsize(value);
  // @@protoc_insertion_point(field_set:DTCC.Grid3D.xSize)
}

// int32 ySize = 3;
inline void Grid3D::clear_ysize() {
  ysize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Grid3D::_internal_ysize() const {
  return ysize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Grid3D::ysize() const {
  // @@protoc_insertion_point(field_get:DTCC.Grid3D.ySize)
  return _internal_ysize();
}
inline void Grid3D::_internal_set_ysize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  ysize_ = value;
}
inline void Grid3D::set_ysize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_ysize(value);
  // @@protoc_insertion_point(field_set:DTCC.Grid3D.ySize)
}

// int32 zSize = 4;
inline void Grid3D::clear_zsize() {
  zsize_ = 0;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Grid3D::_internal_zsize() const {
  return zsize_;
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Grid3D::zsize() const {
  // @@protoc_insertion_point(field_get:DTCC.Grid3D.zSize)
  return _internal_zsize();
}
inline void Grid3D::_internal_set_zsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  
  zsize_ = value;
}
inline void Grid3D::set_zsize(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_set_zsize(value);
  // @@protoc_insertion_point(field_set:DTCC.Grid3D.zSize)
}

// float xStep = 5;
inline void Grid3D::clear_xstep() {
  xstep_ = 0;
}
inline float Grid3D::_internal_xstep() const {
  return xstep_;
}
inline float Grid3D::xstep() const {
  // @@protoc_insertion_point(field_get:DTCC.Grid3D.xStep)
  return _internal_xstep();
}
inline void Grid3D::_internal_set_xstep(float value) {
  
  xstep_ = value;
}
inline void Grid3D::set_xstep(float value) {
  _internal_set_xstep(value);
  // @@protoc_insertion_point(field_set:DTCC.Grid3D.xStep)
}

// float yStep = 6;
inline void Grid3D::clear_ystep() {
  ystep_ = 0;
}
inline float Grid3D::_internal_ystep() const {
  return ystep_;
}
inline float Grid3D::ystep() const {
  // @@protoc_insertion_point(field_get:DTCC.Grid3D.yStep)
  return _internal_ystep();
}
inline void Grid3D::_internal_set_ystep(float value) {
  
  ystep_ = value;
}
inline void Grid3D::set_ystep(float value) {
  _internal_set_ystep(value);
  // @@protoc_insertion_point(field_set:DTCC.Grid3D.yStep)
}

// float zStep = 7;
inline void Grid3D::clear_zstep() {
  zstep_ = 0;
}
inline float Grid3D::_internal_zstep() const {
  return zstep_;
}
inline float Grid3D::zstep() const {
  // @@protoc_insertion_point(field_get:DTCC.Grid3D.zStep)
  return _internal_zstep();
}
inline void Grid3D::_internal_set_zstep(float value) {
  
  zstep_ = value;
}
inline void Grid3D::set_zstep(float value) {
  _internal_set_zstep(value);
  // @@protoc_insertion_point(field_set:DTCC.Grid3D.zStep)
}

// -------------------------------------------------------------------

// Mesh2D

// repeated .DTCC.Vector2D vertices = 1;
inline int Mesh2D::_internal_vertices_size() const {
  return vertices_.size();
}
inline int Mesh2D::vertices_size() const {
  return _internal_vertices_size();
}
inline void Mesh2D::clear_vertices() {
  vertices_.Clear();
}
inline ::DTCC::Vector2D* Mesh2D::mutable_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.Mesh2D.vertices)
  return vertices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >*
Mesh2D::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.Mesh2D.vertices)
  return &vertices_;
}
inline const ::DTCC::Vector2D& Mesh2D::_internal_vertices(int index) const {
  return vertices_.Get(index);
}
inline const ::DTCC::Vector2D& Mesh2D::vertices(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.Mesh2D.vertices)
  return _internal_vertices(index);
}
inline ::DTCC::Vector2D* Mesh2D::_internal_add_vertices() {
  return vertices_.Add();
}
inline ::DTCC::Vector2D* Mesh2D::add_vertices() {
  // @@protoc_insertion_point(field_add:DTCC.Mesh2D.vertices)
  return _internal_add_vertices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >&
Mesh2D::vertices() const {
  // @@protoc_insertion_point(field_list:DTCC.Mesh2D.vertices)
  return vertices_;
}

// repeated .DTCC.Simplex2D cells = 2;
inline int Mesh2D::_internal_cells_size() const {
  return cells_.size();
}
inline int Mesh2D::cells_size() const {
  return _internal_cells_size();
}
inline void Mesh2D::clear_cells() {
  cells_.Clear();
}
inline ::DTCC::Simplex2D* Mesh2D::mutable_cells(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.Mesh2D.cells)
  return cells_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Simplex2D >*
Mesh2D::mutable_cells() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.Mesh2D.cells)
  return &cells_;
}
inline const ::DTCC::Simplex2D& Mesh2D::_internal_cells(int index) const {
  return cells_.Get(index);
}
inline const ::DTCC::Simplex2D& Mesh2D::cells(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.Mesh2D.cells)
  return _internal_cells(index);
}
inline ::DTCC::Simplex2D* Mesh2D::_internal_add_cells() {
  return cells_.Add();
}
inline ::DTCC::Simplex2D* Mesh2D::add_cells() {
  // @@protoc_insertion_point(field_add:DTCC.Mesh2D.cells)
  return _internal_add_cells();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Simplex2D >&
Mesh2D::cells() const {
  // @@protoc_insertion_point(field_list:DTCC.Mesh2D.cells)
  return cells_;
}

// repeated int32 markers = 3;
inline int Mesh2D::_internal_markers_size() const {
  return markers_.size();
}
inline int Mesh2D::markers_size() const {
  return _internal_markers_size();
}
inline void Mesh2D::clear_markers() {
  markers_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Mesh2D::_internal_markers(int index) const {
  return markers_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Mesh2D::markers(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.Mesh2D.markers)
  return _internal_markers(index);
}
inline void Mesh2D::set_markers(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  markers_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.Mesh2D.markers)
}
inline void Mesh2D::_internal_add_markers(::PROTOBUF_NAMESPACE_ID::int32 value) {
  markers_.Add(value);
}
inline void Mesh2D::add_markers(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_markers(value);
  // @@protoc_insertion_point(field_add:DTCC.Mesh2D.markers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Mesh2D::_internal_markers() const {
  return markers_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Mesh2D::markers() const {
  // @@protoc_insertion_point(field_list:DTCC.Mesh2D.markers)
  return _internal_markers();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Mesh2D::_internal_mutable_markers() {
  return &markers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Mesh2D::mutable_markers() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.Mesh2D.markers)
  return _internal_mutable_markers();
}

// -------------------------------------------------------------------

// Mesh3D

// repeated .DTCC.Vector3D vertices = 1;
inline int Mesh3D::_internal_vertices_size() const {
  return vertices_.size();
}
inline int Mesh3D::vertices_size() const {
  return _internal_vertices_size();
}
inline void Mesh3D::clear_vertices() {
  vertices_.Clear();
}
inline ::DTCC::Vector3D* Mesh3D::mutable_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.Mesh3D.vertices)
  return vertices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >*
Mesh3D::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.Mesh3D.vertices)
  return &vertices_;
}
inline const ::DTCC::Vector3D& Mesh3D::_internal_vertices(int index) const {
  return vertices_.Get(index);
}
inline const ::DTCC::Vector3D& Mesh3D::vertices(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.Mesh3D.vertices)
  return _internal_vertices(index);
}
inline ::DTCC::Vector3D* Mesh3D::_internal_add_vertices() {
  return vertices_.Add();
}
inline ::DTCC::Vector3D* Mesh3D::add_vertices() {
  // @@protoc_insertion_point(field_add:DTCC.Mesh3D.vertices)
  return _internal_add_vertices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >&
Mesh3D::vertices() const {
  // @@protoc_insertion_point(field_list:DTCC.Mesh3D.vertices)
  return vertices_;
}

// repeated .DTCC.Simplex3D cells = 2;
inline int Mesh3D::_internal_cells_size() const {
  return cells_.size();
}
inline int Mesh3D::cells_size() const {
  return _internal_cells_size();
}
inline void Mesh3D::clear_cells() {
  cells_.Clear();
}
inline ::DTCC::Simplex3D* Mesh3D::mutable_cells(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.Mesh3D.cells)
  return cells_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Simplex3D >*
Mesh3D::mutable_cells() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.Mesh3D.cells)
  return &cells_;
}
inline const ::DTCC::Simplex3D& Mesh3D::_internal_cells(int index) const {
  return cells_.Get(index);
}
inline const ::DTCC::Simplex3D& Mesh3D::cells(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.Mesh3D.cells)
  return _internal_cells(index);
}
inline ::DTCC::Simplex3D* Mesh3D::_internal_add_cells() {
  return cells_.Add();
}
inline ::DTCC::Simplex3D* Mesh3D::add_cells() {
  // @@protoc_insertion_point(field_add:DTCC.Mesh3D.cells)
  return _internal_add_cells();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Simplex3D >&
Mesh3D::cells() const {
  // @@protoc_insertion_point(field_list:DTCC.Mesh3D.cells)
  return cells_;
}

// repeated int32 markers = 3;
inline int Mesh3D::_internal_markers_size() const {
  return markers_.size();
}
inline int Mesh3D::markers_size() const {
  return _internal_markers_size();
}
inline void Mesh3D::clear_markers() {
  markers_.Clear();
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Mesh3D::_internal_markers(int index) const {
  return markers_.Get(index);
}
inline ::PROTOBUF_NAMESPACE_ID::int32 Mesh3D::markers(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.Mesh3D.markers)
  return _internal_markers(index);
}
inline void Mesh3D::set_markers(int index, ::PROTOBUF_NAMESPACE_ID::int32 value) {
  markers_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.Mesh3D.markers)
}
inline void Mesh3D::_internal_add_markers(::PROTOBUF_NAMESPACE_ID::int32 value) {
  markers_.Add(value);
}
inline void Mesh3D::add_markers(::PROTOBUF_NAMESPACE_ID::int32 value) {
  _internal_add_markers(value);
  // @@protoc_insertion_point(field_add:DTCC.Mesh3D.markers)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Mesh3D::_internal_markers() const {
  return markers_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >&
Mesh3D::markers() const {
  // @@protoc_insertion_point(field_list:DTCC.Mesh3D.markers)
  return _internal_markers();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Mesh3D::_internal_mutable_markers() {
  return &markers_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< ::PROTOBUF_NAMESPACE_ID::int32 >*
Mesh3D::mutable_markers() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.Mesh3D.markers)
  return _internal_mutable_markers();
}

// -------------------------------------------------------------------

// Surface2D

// repeated .DTCC.Vector2D vertices = 1;
inline int Surface2D::_internal_vertices_size() const {
  return vertices_.size();
}
inline int Surface2D::vertices_size() const {
  return _internal_vertices_size();
}
inline void Surface2D::clear_vertices() {
  vertices_.Clear();
}
inline ::DTCC::Vector2D* Surface2D::mutable_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.Surface2D.vertices)
  return vertices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >*
Surface2D::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.Surface2D.vertices)
  return &vertices_;
}
inline const ::DTCC::Vector2D& Surface2D::_internal_vertices(int index) const {
  return vertices_.Get(index);
}
inline const ::DTCC::Vector2D& Surface2D::vertices(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.Surface2D.vertices)
  return _internal_vertices(index);
}
inline ::DTCC::Vector2D* Surface2D::_internal_add_vertices() {
  return vertices_.Add();
}
inline ::DTCC::Vector2D* Surface2D::add_vertices() {
  // @@protoc_insertion_point(field_add:DTCC.Surface2D.vertices)
  return _internal_add_vertices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >&
Surface2D::vertices() const {
  // @@protoc_insertion_point(field_list:DTCC.Surface2D.vertices)
  return vertices_;
}

// repeated .DTCC.Vector2D normals = 2;
inline int Surface2D::_internal_normals_size() const {
  return normals_.size();
}
inline int Surface2D::normals_size() const {
  return _internal_normals_size();
}
inline void Surface2D::clear_normals() {
  normals_.Clear();
}
inline ::DTCC::Vector2D* Surface2D::mutable_normals(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.Surface2D.normals)
  return normals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >*
Surface2D::mutable_normals() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.Surface2D.normals)
  return &normals_;
}
inline const ::DTCC::Vector2D& Surface2D::_internal_normals(int index) const {
  return normals_.Get(index);
}
inline const ::DTCC::Vector2D& Surface2D::normals(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.Surface2D.normals)
  return _internal_normals(index);
}
inline ::DTCC::Vector2D* Surface2D::_internal_add_normals() {
  return normals_.Add();
}
inline ::DTCC::Vector2D* Surface2D::add_normals() {
  // @@protoc_insertion_point(field_add:DTCC.Surface2D.normals)
  return _internal_add_normals();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector2D >&
Surface2D::normals() const {
  // @@protoc_insertion_point(field_list:DTCC.Surface2D.normals)
  return normals_;
}

// repeated .DTCC.Simplex1D edges = 3;
inline int Surface2D::_internal_edges_size() const {
  return edges_.size();
}
inline int Surface2D::edges_size() const {
  return _internal_edges_size();
}
inline void Surface2D::clear_edges() {
  edges_.Clear();
}
inline ::DTCC::Simplex1D* Surface2D::mutable_edges(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.Surface2D.edges)
  return edges_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Simplex1D >*
Surface2D::mutable_edges() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.Surface2D.edges)
  return &edges_;
}
inline const ::DTCC::Simplex1D& Surface2D::_internal_edges(int index) const {
  return edges_.Get(index);
}
inline const ::DTCC::Simplex1D& Surface2D::edges(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.Surface2D.edges)
  return _internal_edges(index);
}
inline ::DTCC::Simplex1D* Surface2D::_internal_add_edges() {
  return edges_.Add();
}
inline ::DTCC::Simplex1D* Surface2D::add_edges() {
  // @@protoc_insertion_point(field_add:DTCC.Surface2D.edges)
  return _internal_add_edges();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Simplex1D >&
Surface2D::edges() const {
  // @@protoc_insertion_point(field_list:DTCC.Surface2D.edges)
  return edges_;
}

// -------------------------------------------------------------------

// Surface3D

// repeated .DTCC.Vector3D vertices = 1;
inline int Surface3D::_internal_vertices_size() const {
  return vertices_.size();
}
inline int Surface3D::vertices_size() const {
  return _internal_vertices_size();
}
inline void Surface3D::clear_vertices() {
  vertices_.Clear();
}
inline ::DTCC::Vector3D* Surface3D::mutable_vertices(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.Surface3D.vertices)
  return vertices_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >*
Surface3D::mutable_vertices() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.Surface3D.vertices)
  return &vertices_;
}
inline const ::DTCC::Vector3D& Surface3D::_internal_vertices(int index) const {
  return vertices_.Get(index);
}
inline const ::DTCC::Vector3D& Surface3D::vertices(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.Surface3D.vertices)
  return _internal_vertices(index);
}
inline ::DTCC::Vector3D* Surface3D::_internal_add_vertices() {
  return vertices_.Add();
}
inline ::DTCC::Vector3D* Surface3D::add_vertices() {
  // @@protoc_insertion_point(field_add:DTCC.Surface3D.vertices)
  return _internal_add_vertices();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >&
Surface3D::vertices() const {
  // @@protoc_insertion_point(field_list:DTCC.Surface3D.vertices)
  return vertices_;
}

// repeated .DTCC.Vector3D normals = 2;
inline int Surface3D::_internal_normals_size() const {
  return normals_.size();
}
inline int Surface3D::normals_size() const {
  return _internal_normals_size();
}
inline void Surface3D::clear_normals() {
  normals_.Clear();
}
inline ::DTCC::Vector3D* Surface3D::mutable_normals(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.Surface3D.normals)
  return normals_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >*
Surface3D::mutable_normals() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.Surface3D.normals)
  return &normals_;
}
inline const ::DTCC::Vector3D& Surface3D::_internal_normals(int index) const {
  return normals_.Get(index);
}
inline const ::DTCC::Vector3D& Surface3D::normals(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.Surface3D.normals)
  return _internal_normals(index);
}
inline ::DTCC::Vector3D* Surface3D::_internal_add_normals() {
  return normals_.Add();
}
inline ::DTCC::Vector3D* Surface3D::add_normals() {
  // @@protoc_insertion_point(field_add:DTCC.Surface3D.normals)
  return _internal_add_normals();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Vector3D >&
Surface3D::normals() const {
  // @@protoc_insertion_point(field_list:DTCC.Surface3D.normals)
  return normals_;
}

// repeated .DTCC.Simplex2D faces = 3;
inline int Surface3D::_internal_faces_size() const {
  return faces_.size();
}
inline int Surface3D::faces_size() const {
  return _internal_faces_size();
}
inline void Surface3D::clear_faces() {
  faces_.Clear();
}
inline ::DTCC::Simplex2D* Surface3D::mutable_faces(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.Surface3D.faces)
  return faces_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Simplex2D >*
Surface3D::mutable_faces() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.Surface3D.faces)
  return &faces_;
}
inline const ::DTCC::Simplex2D& Surface3D::_internal_faces(int index) const {
  return faces_.Get(index);
}
inline const ::DTCC::Simplex2D& Surface3D::faces(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.Surface3D.faces)
  return _internal_faces(index);
}
inline ::DTCC::Simplex2D* Surface3D::_internal_add_faces() {
  return faces_.Add();
}
inline ::DTCC::Simplex2D* Surface3D::add_faces() {
  // @@protoc_insertion_point(field_add:DTCC.Surface3D.faces)
  return _internal_add_faces();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Simplex2D >&
Surface3D::faces() const {
  // @@protoc_insertion_point(field_list:DTCC.Surface3D.faces)
  return faces_;
}

// -------------------------------------------------------------------

// GridField2D

// .DTCC.Grid2D grid = 1;
inline bool GridField2D::_internal_has_grid() const {
  return this != internal_default_instance() && grid_ != nullptr;
}
inline bool GridField2D::has_grid() const {
  return _internal_has_grid();
}
inline void GridField2D::clear_grid() {
  if (GetArena() == nullptr && grid_ != nullptr) {
    delete grid_;
  }
  grid_ = nullptr;
}
inline const ::DTCC::Grid2D& GridField2D::_internal_grid() const {
  const ::DTCC::Grid2D* p = grid_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DTCC::Grid2D*>(
      &::DTCC::_Grid2D_default_instance_);
}
inline const ::DTCC::Grid2D& GridField2D::grid() const {
  // @@protoc_insertion_point(field_get:DTCC.GridField2D.grid)
  return _internal_grid();
}
inline void GridField2D::unsafe_arena_set_allocated_grid(
    ::DTCC::Grid2D* grid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(grid_);
  }
  grid_ = grid;
  if (grid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.GridField2D.grid)
}
inline ::DTCC::Grid2D* GridField2D::release_grid() {
  auto temp = unsafe_arena_release_grid();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DTCC::Grid2D* GridField2D::unsafe_arena_release_grid() {
  // @@protoc_insertion_point(field_release:DTCC.GridField2D.grid)
  
  ::DTCC::Grid2D* temp = grid_;
  grid_ = nullptr;
  return temp;
}
inline ::DTCC::Grid2D* GridField2D::_internal_mutable_grid() {
  
  if (grid_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Grid2D>(GetArena());
    grid_ = p;
  }
  return grid_;
}
inline ::DTCC::Grid2D* GridField2D::mutable_grid() {
  // @@protoc_insertion_point(field_mutable:DTCC.GridField2D.grid)
  return _internal_mutable_grid();
}
inline void GridField2D::set_allocated_grid(::DTCC::Grid2D* grid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete grid_;
  }
  if (grid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(grid);
    if (message_arena != submessage_arena) {
      grid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, grid, submessage_arena);
    }
    
  } else {
    
  }
  grid_ = grid;
  // @@protoc_insertion_point(field_set_allocated:DTCC.GridField2D.grid)
}

// repeated float values = 2;
inline int GridField2D::_internal_values_size() const {
  return values_.size();
}
inline int GridField2D::values_size() const {
  return _internal_values_size();
}
inline void GridField2D::clear_values() {
  values_.Clear();
}
inline float GridField2D::_internal_values(int index) const {
  return values_.Get(index);
}
inline float GridField2D::values(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.GridField2D.values)
  return _internal_values(index);
}
inline void GridField2D::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.GridField2D.values)
}
inline void GridField2D::_internal_add_values(float value) {
  values_.Add(value);
}
inline void GridField2D::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:DTCC.GridField2D.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GridField2D::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GridField2D::values() const {
  // @@protoc_insertion_point(field_list:DTCC.GridField2D.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GridField2D::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GridField2D::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.GridField2D.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// GridField3D

// .DTCC.Grid3D grid = 1;
inline bool GridField3D::_internal_has_grid() const {
  return this != internal_default_instance() && grid_ != nullptr;
}
inline bool GridField3D::has_grid() const {
  return _internal_has_grid();
}
inline void GridField3D::clear_grid() {
  if (GetArena() == nullptr && grid_ != nullptr) {
    delete grid_;
  }
  grid_ = nullptr;
}
inline const ::DTCC::Grid3D& GridField3D::_internal_grid() const {
  const ::DTCC::Grid3D* p = grid_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DTCC::Grid3D*>(
      &::DTCC::_Grid3D_default_instance_);
}
inline const ::DTCC::Grid3D& GridField3D::grid() const {
  // @@protoc_insertion_point(field_get:DTCC.GridField3D.grid)
  return _internal_grid();
}
inline void GridField3D::unsafe_arena_set_allocated_grid(
    ::DTCC::Grid3D* grid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(grid_);
  }
  grid_ = grid;
  if (grid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.GridField3D.grid)
}
inline ::DTCC::Grid3D* GridField3D::release_grid() {
  auto temp = unsafe_arena_release_grid();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DTCC::Grid3D* GridField3D::unsafe_arena_release_grid() {
  // @@protoc_insertion_point(field_release:DTCC.GridField3D.grid)
  
  ::DTCC::Grid3D* temp = grid_;
  grid_ = nullptr;
  return temp;
}
inline ::DTCC::Grid3D* GridField3D::_internal_mutable_grid() {
  
  if (grid_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Grid3D>(GetArena());
    grid_ = p;
  }
  return grid_;
}
inline ::DTCC::Grid3D* GridField3D::mutable_grid() {
  // @@protoc_insertion_point(field_mutable:DTCC.GridField3D.grid)
  return _internal_mutable_grid();
}
inline void GridField3D::set_allocated_grid(::DTCC::Grid3D* grid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete grid_;
  }
  if (grid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(grid);
    if (message_arena != submessage_arena) {
      grid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, grid, submessage_arena);
    }
    
  } else {
    
  }
  grid_ = grid;
  // @@protoc_insertion_point(field_set_allocated:DTCC.GridField3D.grid)
}

// repeated float values = 2;
inline int GridField3D::_internal_values_size() const {
  return values_.size();
}
inline int GridField3D::values_size() const {
  return _internal_values_size();
}
inline void GridField3D::clear_values() {
  values_.Clear();
}
inline float GridField3D::_internal_values(int index) const {
  return values_.Get(index);
}
inline float GridField3D::values(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.GridField3D.values)
  return _internal_values(index);
}
inline void GridField3D::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.GridField3D.values)
}
inline void GridField3D::_internal_add_values(float value) {
  values_.Add(value);
}
inline void GridField3D::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:DTCC.GridField3D.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GridField3D::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GridField3D::values() const {
  // @@protoc_insertion_point(field_list:DTCC.GridField3D.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GridField3D::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GridField3D::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.GridField3D.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// GridVectorField2D

// .DTCC.Grid2D grid = 1;
inline bool GridVectorField2D::_internal_has_grid() const {
  return this != internal_default_instance() && grid_ != nullptr;
}
inline bool GridVectorField2D::has_grid() const {
  return _internal_has_grid();
}
inline void GridVectorField2D::clear_grid() {
  if (GetArena() == nullptr && grid_ != nullptr) {
    delete grid_;
  }
  grid_ = nullptr;
}
inline const ::DTCC::Grid2D& GridVectorField2D::_internal_grid() const {
  const ::DTCC::Grid2D* p = grid_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DTCC::Grid2D*>(
      &::DTCC::_Grid2D_default_instance_);
}
inline const ::DTCC::Grid2D& GridVectorField2D::grid() const {
  // @@protoc_insertion_point(field_get:DTCC.GridVectorField2D.grid)
  return _internal_grid();
}
inline void GridVectorField2D::unsafe_arena_set_allocated_grid(
    ::DTCC::Grid2D* grid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(grid_);
  }
  grid_ = grid;
  if (grid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.GridVectorField2D.grid)
}
inline ::DTCC::Grid2D* GridVectorField2D::release_grid() {
  auto temp = unsafe_arena_release_grid();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DTCC::Grid2D* GridVectorField2D::unsafe_arena_release_grid() {
  // @@protoc_insertion_point(field_release:DTCC.GridVectorField2D.grid)
  
  ::DTCC::Grid2D* temp = grid_;
  grid_ = nullptr;
  return temp;
}
inline ::DTCC::Grid2D* GridVectorField2D::_internal_mutable_grid() {
  
  if (grid_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Grid2D>(GetArena());
    grid_ = p;
  }
  return grid_;
}
inline ::DTCC::Grid2D* GridVectorField2D::mutable_grid() {
  // @@protoc_insertion_point(field_mutable:DTCC.GridVectorField2D.grid)
  return _internal_mutable_grid();
}
inline void GridVectorField2D::set_allocated_grid(::DTCC::Grid2D* grid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete grid_;
  }
  if (grid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(grid);
    if (message_arena != submessage_arena) {
      grid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, grid, submessage_arena);
    }
    
  } else {
    
  }
  grid_ = grid;
  // @@protoc_insertion_point(field_set_allocated:DTCC.GridVectorField2D.grid)
}

// repeated float values = 2;
inline int GridVectorField2D::_internal_values_size() const {
  return values_.size();
}
inline int GridVectorField2D::values_size() const {
  return _internal_values_size();
}
inline void GridVectorField2D::clear_values() {
  values_.Clear();
}
inline float GridVectorField2D::_internal_values(int index) const {
  return values_.Get(index);
}
inline float GridVectorField2D::values(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.GridVectorField2D.values)
  return _internal_values(index);
}
inline void GridVectorField2D::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.GridVectorField2D.values)
}
inline void GridVectorField2D::_internal_add_values(float value) {
  values_.Add(value);
}
inline void GridVectorField2D::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:DTCC.GridVectorField2D.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GridVectorField2D::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GridVectorField2D::values() const {
  // @@protoc_insertion_point(field_list:DTCC.GridVectorField2D.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GridVectorField2D::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GridVectorField2D::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.GridVectorField2D.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// GridVectorField3D

// .DTCC.Grid3D grid = 1;
inline bool GridVectorField3D::_internal_has_grid() const {
  return this != internal_default_instance() && grid_ != nullptr;
}
inline bool GridVectorField3D::has_grid() const {
  return _internal_has_grid();
}
inline void GridVectorField3D::clear_grid() {
  if (GetArena() == nullptr && grid_ != nullptr) {
    delete grid_;
  }
  grid_ = nullptr;
}
inline const ::DTCC::Grid3D& GridVectorField3D::_internal_grid() const {
  const ::DTCC::Grid3D* p = grid_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DTCC::Grid3D*>(
      &::DTCC::_Grid3D_default_instance_);
}
inline const ::DTCC::Grid3D& GridVectorField3D::grid() const {
  // @@protoc_insertion_point(field_get:DTCC.GridVectorField3D.grid)
  return _internal_grid();
}
inline void GridVectorField3D::unsafe_arena_set_allocated_grid(
    ::DTCC::Grid3D* grid) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(grid_);
  }
  grid_ = grid;
  if (grid) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.GridVectorField3D.grid)
}
inline ::DTCC::Grid3D* GridVectorField3D::release_grid() {
  auto temp = unsafe_arena_release_grid();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DTCC::Grid3D* GridVectorField3D::unsafe_arena_release_grid() {
  // @@protoc_insertion_point(field_release:DTCC.GridVectorField3D.grid)
  
  ::DTCC::Grid3D* temp = grid_;
  grid_ = nullptr;
  return temp;
}
inline ::DTCC::Grid3D* GridVectorField3D::_internal_mutable_grid() {
  
  if (grid_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Grid3D>(GetArena());
    grid_ = p;
  }
  return grid_;
}
inline ::DTCC::Grid3D* GridVectorField3D::mutable_grid() {
  // @@protoc_insertion_point(field_mutable:DTCC.GridVectorField3D.grid)
  return _internal_mutable_grid();
}
inline void GridVectorField3D::set_allocated_grid(::DTCC::Grid3D* grid) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete grid_;
  }
  if (grid) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(grid);
    if (message_arena != submessage_arena) {
      grid = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, grid, submessage_arena);
    }
    
  } else {
    
  }
  grid_ = grid;
  // @@protoc_insertion_point(field_set_allocated:DTCC.GridVectorField3D.grid)
}

// repeated float values = 2;
inline int GridVectorField3D::_internal_values_size() const {
  return values_.size();
}
inline int GridVectorField3D::values_size() const {
  return _internal_values_size();
}
inline void GridVectorField3D::clear_values() {
  values_.Clear();
}
inline float GridVectorField3D::_internal_values(int index) const {
  return values_.Get(index);
}
inline float GridVectorField3D::values(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.GridVectorField3D.values)
  return _internal_values(index);
}
inline void GridVectorField3D::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.GridVectorField3D.values)
}
inline void GridVectorField3D::_internal_add_values(float value) {
  values_.Add(value);
}
inline void GridVectorField3D::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:DTCC.GridVectorField3D.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GridVectorField3D::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
GridVectorField3D::values() const {
  // @@protoc_insertion_point(field_list:DTCC.GridVectorField3D.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GridVectorField3D::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
GridVectorField3D::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.GridVectorField3D.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// MeshField2D

// .DTCC.Mesh2D mesh = 1;
inline bool MeshField2D::_internal_has_mesh() const {
  return this != internal_default_instance() && mesh_ != nullptr;
}
inline bool MeshField2D::has_mesh() const {
  return _internal_has_mesh();
}
inline void MeshField2D::clear_mesh() {
  if (GetArena() == nullptr && mesh_ != nullptr) {
    delete mesh_;
  }
  mesh_ = nullptr;
}
inline const ::DTCC::Mesh2D& MeshField2D::_internal_mesh() const {
  const ::DTCC::Mesh2D* p = mesh_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DTCC::Mesh2D*>(
      &::DTCC::_Mesh2D_default_instance_);
}
inline const ::DTCC::Mesh2D& MeshField2D::mesh() const {
  // @@protoc_insertion_point(field_get:DTCC.MeshField2D.mesh)
  return _internal_mesh();
}
inline void MeshField2D::unsafe_arena_set_allocated_mesh(
    ::DTCC::Mesh2D* mesh) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mesh_);
  }
  mesh_ = mesh;
  if (mesh) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.MeshField2D.mesh)
}
inline ::DTCC::Mesh2D* MeshField2D::release_mesh() {
  auto temp = unsafe_arena_release_mesh();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DTCC::Mesh2D* MeshField2D::unsafe_arena_release_mesh() {
  // @@protoc_insertion_point(field_release:DTCC.MeshField2D.mesh)
  
  ::DTCC::Mesh2D* temp = mesh_;
  mesh_ = nullptr;
  return temp;
}
inline ::DTCC::Mesh2D* MeshField2D::_internal_mutable_mesh() {
  
  if (mesh_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Mesh2D>(GetArena());
    mesh_ = p;
  }
  return mesh_;
}
inline ::DTCC::Mesh2D* MeshField2D::mutable_mesh() {
  // @@protoc_insertion_point(field_mutable:DTCC.MeshField2D.mesh)
  return _internal_mutable_mesh();
}
inline void MeshField2D::set_allocated_mesh(::DTCC::Mesh2D* mesh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mesh_;
  }
  if (mesh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mesh);
    if (message_arena != submessage_arena) {
      mesh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mesh, submessage_arena);
    }
    
  } else {
    
  }
  mesh_ = mesh;
  // @@protoc_insertion_point(field_set_allocated:DTCC.MeshField2D.mesh)
}

// repeated float values = 2;
inline int MeshField2D::_internal_values_size() const {
  return values_.size();
}
inline int MeshField2D::values_size() const {
  return _internal_values_size();
}
inline void MeshField2D::clear_values() {
  values_.Clear();
}
inline float MeshField2D::_internal_values(int index) const {
  return values_.Get(index);
}
inline float MeshField2D::values(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.MeshField2D.values)
  return _internal_values(index);
}
inline void MeshField2D::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.MeshField2D.values)
}
inline void MeshField2D::_internal_add_values(float value) {
  values_.Add(value);
}
inline void MeshField2D::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:DTCC.MeshField2D.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MeshField2D::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MeshField2D::values() const {
  // @@protoc_insertion_point(field_list:DTCC.MeshField2D.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MeshField2D::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MeshField2D::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.MeshField2D.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// MeshField3D

// .DTCC.Mesh3D mesh = 1;
inline bool MeshField3D::_internal_has_mesh() const {
  return this != internal_default_instance() && mesh_ != nullptr;
}
inline bool MeshField3D::has_mesh() const {
  return _internal_has_mesh();
}
inline void MeshField3D::clear_mesh() {
  if (GetArena() == nullptr && mesh_ != nullptr) {
    delete mesh_;
  }
  mesh_ = nullptr;
}
inline const ::DTCC::Mesh3D& MeshField3D::_internal_mesh() const {
  const ::DTCC::Mesh3D* p = mesh_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DTCC::Mesh3D*>(
      &::DTCC::_Mesh3D_default_instance_);
}
inline const ::DTCC::Mesh3D& MeshField3D::mesh() const {
  // @@protoc_insertion_point(field_get:DTCC.MeshField3D.mesh)
  return _internal_mesh();
}
inline void MeshField3D::unsafe_arena_set_allocated_mesh(
    ::DTCC::Mesh3D* mesh) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mesh_);
  }
  mesh_ = mesh;
  if (mesh) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.MeshField3D.mesh)
}
inline ::DTCC::Mesh3D* MeshField3D::release_mesh() {
  auto temp = unsafe_arena_release_mesh();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DTCC::Mesh3D* MeshField3D::unsafe_arena_release_mesh() {
  // @@protoc_insertion_point(field_release:DTCC.MeshField3D.mesh)
  
  ::DTCC::Mesh3D* temp = mesh_;
  mesh_ = nullptr;
  return temp;
}
inline ::DTCC::Mesh3D* MeshField3D::_internal_mutable_mesh() {
  
  if (mesh_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Mesh3D>(GetArena());
    mesh_ = p;
  }
  return mesh_;
}
inline ::DTCC::Mesh3D* MeshField3D::mutable_mesh() {
  // @@protoc_insertion_point(field_mutable:DTCC.MeshField3D.mesh)
  return _internal_mutable_mesh();
}
inline void MeshField3D::set_allocated_mesh(::DTCC::Mesh3D* mesh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mesh_;
  }
  if (mesh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mesh);
    if (message_arena != submessage_arena) {
      mesh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mesh, submessage_arena);
    }
    
  } else {
    
  }
  mesh_ = mesh;
  // @@protoc_insertion_point(field_set_allocated:DTCC.MeshField3D.mesh)
}

// repeated float values = 2;
inline int MeshField3D::_internal_values_size() const {
  return values_.size();
}
inline int MeshField3D::values_size() const {
  return _internal_values_size();
}
inline void MeshField3D::clear_values() {
  values_.Clear();
}
inline float MeshField3D::_internal_values(int index) const {
  return values_.Get(index);
}
inline float MeshField3D::values(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.MeshField3D.values)
  return _internal_values(index);
}
inline void MeshField3D::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.MeshField3D.values)
}
inline void MeshField3D::_internal_add_values(float value) {
  values_.Add(value);
}
inline void MeshField3D::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:DTCC.MeshField3D.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MeshField3D::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MeshField3D::values() const {
  // @@protoc_insertion_point(field_list:DTCC.MeshField3D.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MeshField3D::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MeshField3D::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.MeshField3D.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// MeshVectorField2D

// .DTCC.Mesh2D mesh = 1;
inline bool MeshVectorField2D::_internal_has_mesh() const {
  return this != internal_default_instance() && mesh_ != nullptr;
}
inline bool MeshVectorField2D::has_mesh() const {
  return _internal_has_mesh();
}
inline void MeshVectorField2D::clear_mesh() {
  if (GetArena() == nullptr && mesh_ != nullptr) {
    delete mesh_;
  }
  mesh_ = nullptr;
}
inline const ::DTCC::Mesh2D& MeshVectorField2D::_internal_mesh() const {
  const ::DTCC::Mesh2D* p = mesh_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DTCC::Mesh2D*>(
      &::DTCC::_Mesh2D_default_instance_);
}
inline const ::DTCC::Mesh2D& MeshVectorField2D::mesh() const {
  // @@protoc_insertion_point(field_get:DTCC.MeshVectorField2D.mesh)
  return _internal_mesh();
}
inline void MeshVectorField2D::unsafe_arena_set_allocated_mesh(
    ::DTCC::Mesh2D* mesh) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mesh_);
  }
  mesh_ = mesh;
  if (mesh) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.MeshVectorField2D.mesh)
}
inline ::DTCC::Mesh2D* MeshVectorField2D::release_mesh() {
  auto temp = unsafe_arena_release_mesh();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DTCC::Mesh2D* MeshVectorField2D::unsafe_arena_release_mesh() {
  // @@protoc_insertion_point(field_release:DTCC.MeshVectorField2D.mesh)
  
  ::DTCC::Mesh2D* temp = mesh_;
  mesh_ = nullptr;
  return temp;
}
inline ::DTCC::Mesh2D* MeshVectorField2D::_internal_mutable_mesh() {
  
  if (mesh_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Mesh2D>(GetArena());
    mesh_ = p;
  }
  return mesh_;
}
inline ::DTCC::Mesh2D* MeshVectorField2D::mutable_mesh() {
  // @@protoc_insertion_point(field_mutable:DTCC.MeshVectorField2D.mesh)
  return _internal_mutable_mesh();
}
inline void MeshVectorField2D::set_allocated_mesh(::DTCC::Mesh2D* mesh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mesh_;
  }
  if (mesh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mesh);
    if (message_arena != submessage_arena) {
      mesh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mesh, submessage_arena);
    }
    
  } else {
    
  }
  mesh_ = mesh;
  // @@protoc_insertion_point(field_set_allocated:DTCC.MeshVectorField2D.mesh)
}

// repeated float values = 2;
inline int MeshVectorField2D::_internal_values_size() const {
  return values_.size();
}
inline int MeshVectorField2D::values_size() const {
  return _internal_values_size();
}
inline void MeshVectorField2D::clear_values() {
  values_.Clear();
}
inline float MeshVectorField2D::_internal_values(int index) const {
  return values_.Get(index);
}
inline float MeshVectorField2D::values(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.MeshVectorField2D.values)
  return _internal_values(index);
}
inline void MeshVectorField2D::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.MeshVectorField2D.values)
}
inline void MeshVectorField2D::_internal_add_values(float value) {
  values_.Add(value);
}
inline void MeshVectorField2D::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:DTCC.MeshVectorField2D.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MeshVectorField2D::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MeshVectorField2D::values() const {
  // @@protoc_insertion_point(field_list:DTCC.MeshVectorField2D.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MeshVectorField2D::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MeshVectorField2D::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.MeshVectorField2D.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// MeshVectorField3D

// .DTCC.Mesh3D mesh = 1;
inline bool MeshVectorField3D::_internal_has_mesh() const {
  return this != internal_default_instance() && mesh_ != nullptr;
}
inline bool MeshVectorField3D::has_mesh() const {
  return _internal_has_mesh();
}
inline void MeshVectorField3D::clear_mesh() {
  if (GetArena() == nullptr && mesh_ != nullptr) {
    delete mesh_;
  }
  mesh_ = nullptr;
}
inline const ::DTCC::Mesh3D& MeshVectorField3D::_internal_mesh() const {
  const ::DTCC::Mesh3D* p = mesh_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DTCC::Mesh3D*>(
      &::DTCC::_Mesh3D_default_instance_);
}
inline const ::DTCC::Mesh3D& MeshVectorField3D::mesh() const {
  // @@protoc_insertion_point(field_get:DTCC.MeshVectorField3D.mesh)
  return _internal_mesh();
}
inline void MeshVectorField3D::unsafe_arena_set_allocated_mesh(
    ::DTCC::Mesh3D* mesh) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(mesh_);
  }
  mesh_ = mesh;
  if (mesh) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.MeshVectorField3D.mesh)
}
inline ::DTCC::Mesh3D* MeshVectorField3D::release_mesh() {
  auto temp = unsafe_arena_release_mesh();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DTCC::Mesh3D* MeshVectorField3D::unsafe_arena_release_mesh() {
  // @@protoc_insertion_point(field_release:DTCC.MeshVectorField3D.mesh)
  
  ::DTCC::Mesh3D* temp = mesh_;
  mesh_ = nullptr;
  return temp;
}
inline ::DTCC::Mesh3D* MeshVectorField3D::_internal_mutable_mesh() {
  
  if (mesh_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Mesh3D>(GetArena());
    mesh_ = p;
  }
  return mesh_;
}
inline ::DTCC::Mesh3D* MeshVectorField3D::mutable_mesh() {
  // @@protoc_insertion_point(field_mutable:DTCC.MeshVectorField3D.mesh)
  return _internal_mutable_mesh();
}
inline void MeshVectorField3D::set_allocated_mesh(::DTCC::Mesh3D* mesh) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete mesh_;
  }
  if (mesh) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(mesh);
    if (message_arena != submessage_arena) {
      mesh = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, mesh, submessage_arena);
    }
    
  } else {
    
  }
  mesh_ = mesh;
  // @@protoc_insertion_point(field_set_allocated:DTCC.MeshVectorField3D.mesh)
}

// repeated float values = 2;
inline int MeshVectorField3D::_internal_values_size() const {
  return values_.size();
}
inline int MeshVectorField3D::values_size() const {
  return _internal_values_size();
}
inline void MeshVectorField3D::clear_values() {
  values_.Clear();
}
inline float MeshVectorField3D::_internal_values(int index) const {
  return values_.Get(index);
}
inline float MeshVectorField3D::values(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.MeshVectorField3D.values)
  return _internal_values(index);
}
inline void MeshVectorField3D::set_values(int index, float value) {
  values_.Set(index, value);
  // @@protoc_insertion_point(field_set:DTCC.MeshVectorField3D.values)
}
inline void MeshVectorField3D::_internal_add_values(float value) {
  values_.Add(value);
}
inline void MeshVectorField3D::add_values(float value) {
  _internal_add_values(value);
  // @@protoc_insertion_point(field_add:DTCC.MeshVectorField3D.values)
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MeshVectorField3D::_internal_values() const {
  return values_;
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >&
MeshVectorField3D::values() const {
  // @@protoc_insertion_point(field_list:DTCC.MeshVectorField3D.values)
  return _internal_values();
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MeshVectorField3D::_internal_mutable_values() {
  return &values_;
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedField< float >*
MeshVectorField3D::mutable_values() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.MeshVectorField3D.values)
  return _internal_mutable_values();
}

// -------------------------------------------------------------------

// Building

// string uuid = 1;
inline void Building::clear_uuid() {
  uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline const std::string& Building::uuid() const {
  // @@protoc_insertion_point(field_get:DTCC.Building.uuid)
  return _internal_uuid();
}
inline void Building::set_uuid(const std::string& value) {
  _internal_set_uuid(value);
  // @@protoc_insertion_point(field_set:DTCC.Building.uuid)
}
inline std::string* Building::mutable_uuid() {
  // @@protoc_insertion_point(field_mutable:DTCC.Building.uuid)
  return _internal_mutable_uuid();
}
inline const std::string& Building::_internal_uuid() const {
  return uuid_.Get();
}
inline void Building::_internal_set_uuid(const std::string& value) {
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), value, GetArena());
}
inline void Building::set_uuid(std::string&& value) {
  
  uuid_.Set(
    &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::move(value), GetArena());
  // @@protoc_insertion_point(field_set_rvalue:DTCC.Building.uuid)
}
inline void Building::set_uuid(const char* value) {
  GOOGLE_DCHECK(value != nullptr);
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(value),
              GetArena());
  // @@protoc_insertion_point(field_set_char:DTCC.Building.uuid)
}
inline void Building::set_uuid(const char* value,
    size_t size) {
  
  uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), ::std::string(
      reinterpret_cast<const char*>(value), size), GetArena());
  // @@protoc_insertion_point(field_set_pointer:DTCC.Building.uuid)
}
inline std::string* Building::_internal_mutable_uuid() {
  
  return uuid_.Mutable(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline std::string* Building::release_uuid() {
  // @@protoc_insertion_point(field_release:DTCC.Building.uuid)
  return uuid_.Release(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
}
inline void Building::set_allocated_uuid(std::string* uuid) {
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.SetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), uuid,
      GetArena());
  // @@protoc_insertion_point(field_set_allocated:DTCC.Building.uuid)
}
inline std::string* Building::unsafe_arena_release_uuid() {
  // @@protoc_insertion_point(field_unsafe_arena_release:DTCC.Building.uuid)
  GOOGLE_DCHECK(GetArena() != nullptr);
  
  return uuid_.UnsafeArenaRelease(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      GetArena());
}
inline void Building::unsafe_arena_set_allocated_uuid(
    std::string* uuid) {
  GOOGLE_DCHECK(GetArena() != nullptr);
  if (uuid != nullptr) {
    
  } else {
    
  }
  uuid_.UnsafeArenaSetAllocated(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(),
      uuid, GetArena());
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.Building.uuid)
}

// .DTCC.Polygon footPrint = 2;
inline bool Building::_internal_has_footprint() const {
  return this != internal_default_instance() && footprint_ != nullptr;
}
inline bool Building::has_footprint() const {
  return _internal_has_footprint();
}
inline void Building::clear_footprint() {
  if (GetArena() == nullptr && footprint_ != nullptr) {
    delete footprint_;
  }
  footprint_ = nullptr;
}
inline const ::DTCC::Polygon& Building::_internal_footprint() const {
  const ::DTCC::Polygon* p = footprint_;
  return p != nullptr ? *p : *reinterpret_cast<const ::DTCC::Polygon*>(
      &::DTCC::_Polygon_default_instance_);
}
inline const ::DTCC::Polygon& Building::footprint() const {
  // @@protoc_insertion_point(field_get:DTCC.Building.footPrint)
  return _internal_footprint();
}
inline void Building::unsafe_arena_set_allocated_footprint(
    ::DTCC::Polygon* footprint) {
  if (GetArena() == nullptr) {
    delete reinterpret_cast<::PROTOBUF_NAMESPACE_ID::MessageLite*>(footprint_);
  }
  footprint_ = footprint;
  if (footprint) {
    
  } else {
    
  }
  // @@protoc_insertion_point(field_unsafe_arena_set_allocated:DTCC.Building.footPrint)
}
inline ::DTCC::Polygon* Building::release_footprint() {
  auto temp = unsafe_arena_release_footprint();
  if (GetArena() != nullptr) {
    temp = ::PROTOBUF_NAMESPACE_ID::internal::DuplicateIfNonNull(temp);
  }
  return temp;
}
inline ::DTCC::Polygon* Building::unsafe_arena_release_footprint() {
  // @@protoc_insertion_point(field_release:DTCC.Building.footPrint)
  
  ::DTCC::Polygon* temp = footprint_;
  footprint_ = nullptr;
  return temp;
}
inline ::DTCC::Polygon* Building::_internal_mutable_footprint() {
  
  if (footprint_ == nullptr) {
    auto* p = CreateMaybeMessage<::DTCC::Polygon>(GetArena());
    footprint_ = p;
  }
  return footprint_;
}
inline ::DTCC::Polygon* Building::mutable_footprint() {
  // @@protoc_insertion_point(field_mutable:DTCC.Building.footPrint)
  return _internal_mutable_footprint();
}
inline void Building::set_allocated_footprint(::DTCC::Polygon* footprint) {
  ::PROTOBUF_NAMESPACE_ID::Arena* message_arena = GetArena();
  if (message_arena == nullptr) {
    delete footprint_;
  }
  if (footprint) {
    ::PROTOBUF_NAMESPACE_ID::Arena* submessage_arena =
      ::PROTOBUF_NAMESPACE_ID::Arena::GetArena(footprint);
    if (message_arena != submessage_arena) {
      footprint = ::PROTOBUF_NAMESPACE_ID::internal::GetOwnedMessage(
          message_arena, footprint, submessage_arena);
    }
    
  } else {
    
  }
  footprint_ = footprint;
  // @@protoc_insertion_point(field_set_allocated:DTCC.Building.footPrint)
}

// double height = 3;
inline void Building::clear_height() {
  height_ = 0;
}
inline double Building::_internal_height() const {
  return height_;
}
inline double Building::height() const {
  // @@protoc_insertion_point(field_get:DTCC.Building.height)
  return _internal_height();
}
inline void Building::_internal_set_height(double value) {
  
  height_ = value;
}
inline void Building::set_height(double value) {
  _internal_set_height(value);
  // @@protoc_insertion_point(field_set:DTCC.Building.height)
}

// double groundHeight = 4;
inline void Building::clear_groundheight() {
  groundheight_ = 0;
}
inline double Building::_internal_groundheight() const {
  return groundheight_;
}
inline double Building::groundheight() const {
  // @@protoc_insertion_point(field_get:DTCC.Building.groundHeight)
  return _internal_groundheight();
}
inline void Building::_internal_set_groundheight(double value) {
  
  groundheight_ = value;
}
inline void Building::set_groundheight(double value) {
  _internal_set_groundheight(value);
  // @@protoc_insertion_point(field_set:DTCC.Building.groundHeight)
}

// -------------------------------------------------------------------

// CityModel

// repeated .DTCC.Building buildings = 4;
inline int CityModel::_internal_buildings_size() const {
  return buildings_.size();
}
inline int CityModel::buildings_size() const {
  return _internal_buildings_size();
}
inline void CityModel::clear_buildings() {
  buildings_.Clear();
}
inline ::DTCC::Building* CityModel::mutable_buildings(int index) {
  // @@protoc_insertion_point(field_mutable:DTCC.CityModel.buildings)
  return buildings_.Mutable(index);
}
inline ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Building >*
CityModel::mutable_buildings() {
  // @@protoc_insertion_point(field_mutable_list:DTCC.CityModel.buildings)
  return &buildings_;
}
inline const ::DTCC::Building& CityModel::_internal_buildings(int index) const {
  return buildings_.Get(index);
}
inline const ::DTCC::Building& CityModel::buildings(int index) const {
  // @@protoc_insertion_point(field_get:DTCC.CityModel.buildings)
  return _internal_buildings(index);
}
inline ::DTCC::Building* CityModel::_internal_add_buildings() {
  return buildings_.Add();
}
inline ::DTCC::Building* CityModel::add_buildings() {
  // @@protoc_insertion_point(field_add:DTCC.CityModel.buildings)
  return _internal_add_buildings();
}
inline const ::PROTOBUF_NAMESPACE_ID::RepeatedPtrField< ::DTCC::Building >&
CityModel::buildings() const {
  // @@protoc_insertion_point(field_list:DTCC.CityModel.buildings)
  return buildings_;
}

#ifdef __GNUC__
  #pragma GCC diagnostic pop
#endif  // __GNUC__
// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------

// -------------------------------------------------------------------


// @@protoc_insertion_point(namespace_scope)

}  // namespace DTCC

// @@protoc_insertion_point(global_scope)

#include <google/protobuf/port_undef.inc>
#endif  // GOOGLE_PROTOBUF_INCLUDED_GOOGLE_PROTOBUF_INCLUDED_dtcc_2eproto
