// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: dtcc.proto

#include "dtcc.pb.h"

#include <algorithm>

#include <google/protobuf/io/coded_stream.h>
#include <google/protobuf/extension_set.h>
#include <google/protobuf/wire_format_lite.h>
#include <google/protobuf/descriptor.h>
#include <google/protobuf/generated_message_reflection.h>
#include <google/protobuf/reflection_ops.h>
#include <google/protobuf/wire_format.h>
// @@protoc_insertion_point(includes)
#include <google/protobuf/port_def.inc>
extern PROTOBUF_INTERNAL_EXPORT_dtcc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BoundingBox2D_dtcc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dtcc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BoundingBox3D_dtcc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dtcc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Building_dtcc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dtcc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Grid2D_dtcc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dtcc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Grid3D_dtcc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dtcc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Mesh2D_dtcc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dtcc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Mesh3D_dtcc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dtcc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Polygon_dtcc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dtcc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Simplex1D_dtcc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dtcc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Simplex2D_dtcc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dtcc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Simplex3D_dtcc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dtcc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Surface2D_dtcc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dtcc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Surface3D_dtcc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dtcc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector2D_dtcc_2eproto;
extern PROTOBUF_INTERNAL_EXPORT_dtcc_2eproto ::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3D_dtcc_2eproto;
namespace DTCC {
class Vector2DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vector2D> _instance;
} _Vector2D_default_instance_;
class Vector3DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Vector3D> _instance;
} _Vector3D_default_instance_;
class Simplex1DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Simplex1D> _instance;
} _Simplex1D_default_instance_;
class Simplex2DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Simplex2D> _instance;
} _Simplex2D_default_instance_;
class Simplex3DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Simplex3D> _instance;
} _Simplex3D_default_instance_;
class BoundingBox2DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BoundingBox2D> _instance;
} _BoundingBox2D_default_instance_;
class BoundingBox3DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<BoundingBox3D> _instance;
} _BoundingBox3D_default_instance_;
class PolygonDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Polygon> _instance;
} _Polygon_default_instance_;
class Grid2DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Grid2D> _instance;
} _Grid2D_default_instance_;
class Grid3DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Grid3D> _instance;
} _Grid3D_default_instance_;
class Mesh2DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Mesh2D> _instance;
} _Mesh2D_default_instance_;
class Mesh3DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Mesh3D> _instance;
} _Mesh3D_default_instance_;
class Surface2DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Surface2D> _instance;
} _Surface2D_default_instance_;
class Surface3DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Surface3D> _instance;
} _Surface3D_default_instance_;
class GridField2DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GridField2D> _instance;
} _GridField2D_default_instance_;
class GridField3DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GridField3D> _instance;
} _GridField3D_default_instance_;
class GridVectorField2DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GridVectorField2D> _instance;
} _GridVectorField2D_default_instance_;
class GridVectorField3DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<GridVectorField3D> _instance;
} _GridVectorField3D_default_instance_;
class MeshField2DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MeshField2D> _instance;
} _MeshField2D_default_instance_;
class MeshField3DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MeshField3D> _instance;
} _MeshField3D_default_instance_;
class MeshVectorField2DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MeshVectorField2D> _instance;
} _MeshVectorField2D_default_instance_;
class MeshVectorField3DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<MeshVectorField3D> _instance;
} _MeshVectorField3D_default_instance_;
class SurfaceField2DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SurfaceField2D> _instance;
} _SurfaceField2D_default_instance_;
class SurfaceField3DDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<SurfaceField3D> _instance;
} _SurfaceField3D_default_instance_;
class BuildingDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<Building> _instance;
} _Building_default_instance_;
class CityModelDefaultTypeInternal {
 public:
  ::PROTOBUF_NAMESPACE_ID::internal::ExplicitlyConstructed<CityModel> _instance;
} _CityModel_default_instance_;
}  // namespace DTCC
static void InitDefaultsscc_info_BoundingBox2D_dtcc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTCC::_BoundingBox2D_default_instance_;
    new (ptr) ::DTCC::BoundingBox2D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTCC::BoundingBox2D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BoundingBox2D_dtcc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BoundingBox2D_dtcc_2eproto}, {
      &scc_info_Vector2D_dtcc_2eproto.base,}};

static void InitDefaultsscc_info_BoundingBox3D_dtcc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTCC::_BoundingBox3D_default_instance_;
    new (ptr) ::DTCC::BoundingBox3D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTCC::BoundingBox3D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_BoundingBox3D_dtcc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_BoundingBox3D_dtcc_2eproto}, {
      &scc_info_Vector3D_dtcc_2eproto.base,}};

static void InitDefaultsscc_info_Building_dtcc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTCC::_Building_default_instance_;
    new (ptr) ::DTCC::Building();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTCC::Building::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Building_dtcc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Building_dtcc_2eproto}, {
      &scc_info_Polygon_dtcc_2eproto.base,}};

static void InitDefaultsscc_info_CityModel_dtcc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTCC::_CityModel_default_instance_;
    new (ptr) ::DTCC::CityModel();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTCC::CityModel::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_CityModel_dtcc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_CityModel_dtcc_2eproto}, {
      &scc_info_Building_dtcc_2eproto.base,}};

static void InitDefaultsscc_info_Grid2D_dtcc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTCC::_Grid2D_default_instance_;
    new (ptr) ::DTCC::Grid2D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTCC::Grid2D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Grid2D_dtcc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Grid2D_dtcc_2eproto}, {
      &scc_info_BoundingBox2D_dtcc_2eproto.base,}};

static void InitDefaultsscc_info_Grid3D_dtcc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTCC::_Grid3D_default_instance_;
    new (ptr) ::DTCC::Grid3D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTCC::Grid3D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Grid3D_dtcc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Grid3D_dtcc_2eproto}, {
      &scc_info_BoundingBox3D_dtcc_2eproto.base,}};

static void InitDefaultsscc_info_GridField2D_dtcc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTCC::_GridField2D_default_instance_;
    new (ptr) ::DTCC::GridField2D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTCC::GridField2D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GridField2D_dtcc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GridField2D_dtcc_2eproto}, {
      &scc_info_Grid2D_dtcc_2eproto.base,}};

static void InitDefaultsscc_info_GridField3D_dtcc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTCC::_GridField3D_default_instance_;
    new (ptr) ::DTCC::GridField3D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTCC::GridField3D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GridField3D_dtcc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GridField3D_dtcc_2eproto}, {
      &scc_info_Grid3D_dtcc_2eproto.base,}};

static void InitDefaultsscc_info_GridVectorField2D_dtcc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTCC::_GridVectorField2D_default_instance_;
    new (ptr) ::DTCC::GridVectorField2D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTCC::GridVectorField2D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GridVectorField2D_dtcc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GridVectorField2D_dtcc_2eproto}, {
      &scc_info_Grid2D_dtcc_2eproto.base,}};

static void InitDefaultsscc_info_GridVectorField3D_dtcc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTCC::_GridVectorField3D_default_instance_;
    new (ptr) ::DTCC::GridVectorField3D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTCC::GridVectorField3D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_GridVectorField3D_dtcc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_GridVectorField3D_dtcc_2eproto}, {
      &scc_info_Grid3D_dtcc_2eproto.base,}};

static void InitDefaultsscc_info_Mesh2D_dtcc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTCC::_Mesh2D_default_instance_;
    new (ptr) ::DTCC::Mesh2D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTCC::Mesh2D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Mesh2D_dtcc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Mesh2D_dtcc_2eproto}, {
      &scc_info_Vector2D_dtcc_2eproto.base,
      &scc_info_Simplex2D_dtcc_2eproto.base,}};

static void InitDefaultsscc_info_Mesh3D_dtcc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTCC::_Mesh3D_default_instance_;
    new (ptr) ::DTCC::Mesh3D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTCC::Mesh3D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Mesh3D_dtcc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Mesh3D_dtcc_2eproto}, {
      &scc_info_Vector3D_dtcc_2eproto.base,
      &scc_info_Simplex3D_dtcc_2eproto.base,}};

static void InitDefaultsscc_info_MeshField2D_dtcc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTCC::_MeshField2D_default_instance_;
    new (ptr) ::DTCC::MeshField2D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTCC::MeshField2D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MeshField2D_dtcc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MeshField2D_dtcc_2eproto}, {
      &scc_info_Mesh2D_dtcc_2eproto.base,}};

static void InitDefaultsscc_info_MeshField3D_dtcc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTCC::_MeshField3D_default_instance_;
    new (ptr) ::DTCC::MeshField3D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTCC::MeshField3D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MeshField3D_dtcc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MeshField3D_dtcc_2eproto}, {
      &scc_info_Mesh3D_dtcc_2eproto.base,}};

static void InitDefaultsscc_info_MeshVectorField2D_dtcc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTCC::_MeshVectorField2D_default_instance_;
    new (ptr) ::DTCC::MeshVectorField2D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTCC::MeshVectorField2D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MeshVectorField2D_dtcc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MeshVectorField2D_dtcc_2eproto}, {
      &scc_info_Mesh2D_dtcc_2eproto.base,}};

static void InitDefaultsscc_info_MeshVectorField3D_dtcc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTCC::_MeshVectorField3D_default_instance_;
    new (ptr) ::DTCC::MeshVectorField3D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTCC::MeshVectorField3D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_MeshVectorField3D_dtcc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_MeshVectorField3D_dtcc_2eproto}, {
      &scc_info_Mesh3D_dtcc_2eproto.base,}};

static void InitDefaultsscc_info_Polygon_dtcc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTCC::_Polygon_default_instance_;
    new (ptr) ::DTCC::Polygon();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTCC::Polygon::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_Polygon_dtcc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_Polygon_dtcc_2eproto}, {
      &scc_info_Vector2D_dtcc_2eproto.base,}};

static void InitDefaultsscc_info_Simplex1D_dtcc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTCC::_Simplex1D_default_instance_;
    new (ptr) ::DTCC::Simplex1D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTCC::Simplex1D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Simplex1D_dtcc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Simplex1D_dtcc_2eproto}, {}};

static void InitDefaultsscc_info_Simplex2D_dtcc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTCC::_Simplex2D_default_instance_;
    new (ptr) ::DTCC::Simplex2D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTCC::Simplex2D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Simplex2D_dtcc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Simplex2D_dtcc_2eproto}, {}};

static void InitDefaultsscc_info_Simplex3D_dtcc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTCC::_Simplex3D_default_instance_;
    new (ptr) ::DTCC::Simplex3D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTCC::Simplex3D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Simplex3D_dtcc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Simplex3D_dtcc_2eproto}, {}};

static void InitDefaultsscc_info_Surface2D_dtcc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTCC::_Surface2D_default_instance_;
    new (ptr) ::DTCC::Surface2D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTCC::Surface2D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Surface2D_dtcc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Surface2D_dtcc_2eproto}, {
      &scc_info_Vector2D_dtcc_2eproto.base,
      &scc_info_Simplex1D_dtcc_2eproto.base,}};

static void InitDefaultsscc_info_Surface3D_dtcc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTCC::_Surface3D_default_instance_;
    new (ptr) ::DTCC::Surface3D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTCC::Surface3D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<2> scc_info_Surface3D_dtcc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 2, 0, InitDefaultsscc_info_Surface3D_dtcc_2eproto}, {
      &scc_info_Vector3D_dtcc_2eproto.base,
      &scc_info_Simplex2D_dtcc_2eproto.base,}};

static void InitDefaultsscc_info_SurfaceField2D_dtcc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTCC::_SurfaceField2D_default_instance_;
    new (ptr) ::DTCC::SurfaceField2D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTCC::SurfaceField2D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SurfaceField2D_dtcc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SurfaceField2D_dtcc_2eproto}, {
      &scc_info_Surface2D_dtcc_2eproto.base,}};

static void InitDefaultsscc_info_SurfaceField3D_dtcc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTCC::_SurfaceField3D_default_instance_;
    new (ptr) ::DTCC::SurfaceField3D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTCC::SurfaceField3D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<1> scc_info_SurfaceField3D_dtcc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 1, 0, InitDefaultsscc_info_SurfaceField3D_dtcc_2eproto}, {
      &scc_info_Surface3D_dtcc_2eproto.base,}};

static void InitDefaultsscc_info_Vector2D_dtcc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTCC::_Vector2D_default_instance_;
    new (ptr) ::DTCC::Vector2D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTCC::Vector2D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector2D_dtcc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Vector2D_dtcc_2eproto}, {}};

static void InitDefaultsscc_info_Vector3D_dtcc_2eproto() {
  GOOGLE_PROTOBUF_VERIFY_VERSION;

  {
    void* ptr = &::DTCC::_Vector3D_default_instance_;
    new (ptr) ::DTCC::Vector3D();
    ::PROTOBUF_NAMESPACE_ID::internal::OnShutdownDestroyMessage(ptr);
  }
  ::DTCC::Vector3D::InitAsDefaultInstance();
}

::PROTOBUF_NAMESPACE_ID::internal::SCCInfo<0> scc_info_Vector3D_dtcc_2eproto =
    {{ATOMIC_VAR_INIT(::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase::kUninitialized), 0, 0, InitDefaultsscc_info_Vector3D_dtcc_2eproto}, {}};

static ::PROTOBUF_NAMESPACE_ID::Metadata file_level_metadata_dtcc_2eproto[26];
static constexpr ::PROTOBUF_NAMESPACE_ID::EnumDescriptor const** file_level_enum_descriptors_dtcc_2eproto = nullptr;
static constexpr ::PROTOBUF_NAMESPACE_ID::ServiceDescriptor const** file_level_service_descriptors_dtcc_2eproto = nullptr;

const ::PROTOBUF_NAMESPACE_ID::uint32 TableStruct_dtcc_2eproto::offsets[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DTCC::Vector2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DTCC::Vector2D, x_),
  PROTOBUF_FIELD_OFFSET(::DTCC::Vector2D, y_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DTCC::Vector3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DTCC::Vector3D, x_),
  PROTOBUF_FIELD_OFFSET(::DTCC::Vector3D, y_),
  PROTOBUF_FIELD_OFFSET(::DTCC::Vector3D, z_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DTCC::Simplex1D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DTCC::Simplex1D, v0_),
  PROTOBUF_FIELD_OFFSET(::DTCC::Simplex1D, v1_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DTCC::Simplex2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DTCC::Simplex2D, v0_),
  PROTOBUF_FIELD_OFFSET(::DTCC::Simplex2D, v1_),
  PROTOBUF_FIELD_OFFSET(::DTCC::Simplex2D, v2_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DTCC::Simplex3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DTCC::Simplex3D, v0_),
  PROTOBUF_FIELD_OFFSET(::DTCC::Simplex3D, v1_),
  PROTOBUF_FIELD_OFFSET(::DTCC::Simplex3D, v2_),
  PROTOBUF_FIELD_OFFSET(::DTCC::Simplex3D, v3_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DTCC::BoundingBox2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DTCC::BoundingBox2D, p_),
  PROTOBUF_FIELD_OFFSET(::DTCC::BoundingBox2D, q_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DTCC::BoundingBox3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DTCC::BoundingBox3D, p_),
  PROTOBUF_FIELD_OFFSET(::DTCC::BoundingBox3D, q_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DTCC::Polygon, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DTCC::Polygon, vertices_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DTCC::Grid2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DTCC::Grid2D, boundingbox_),
  PROTOBUF_FIELD_OFFSET(::DTCC::Grid2D, xsize_),
  PROTOBUF_FIELD_OFFSET(::DTCC::Grid2D, ysize_),
  PROTOBUF_FIELD_OFFSET(::DTCC::Grid2D, xstep_),
  PROTOBUF_FIELD_OFFSET(::DTCC::Grid2D, ystep_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DTCC::Grid3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DTCC::Grid3D, boundingbox_),
  PROTOBUF_FIELD_OFFSET(::DTCC::Grid3D, xsize_),
  PROTOBUF_FIELD_OFFSET(::DTCC::Grid3D, ysize_),
  PROTOBUF_FIELD_OFFSET(::DTCC::Grid3D, zsize_),
  PROTOBUF_FIELD_OFFSET(::DTCC::Grid3D, xstep_),
  PROTOBUF_FIELD_OFFSET(::DTCC::Grid3D, ystep_),
  PROTOBUF_FIELD_OFFSET(::DTCC::Grid3D, zstep_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DTCC::Mesh2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DTCC::Mesh2D, vertices_),
  PROTOBUF_FIELD_OFFSET(::DTCC::Mesh2D, cells_),
  PROTOBUF_FIELD_OFFSET(::DTCC::Mesh2D, markers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DTCC::Mesh3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DTCC::Mesh3D, vertices_),
  PROTOBUF_FIELD_OFFSET(::DTCC::Mesh3D, cells_),
  PROTOBUF_FIELD_OFFSET(::DTCC::Mesh3D, markers_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DTCC::Surface2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DTCC::Surface2D, vertices_),
  PROTOBUF_FIELD_OFFSET(::DTCC::Surface2D, normals_),
  PROTOBUF_FIELD_OFFSET(::DTCC::Surface2D, edges_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DTCC::Surface3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DTCC::Surface3D, vertices_),
  PROTOBUF_FIELD_OFFSET(::DTCC::Surface3D, normals_),
  PROTOBUF_FIELD_OFFSET(::DTCC::Surface3D, faces_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DTCC::GridField2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DTCC::GridField2D, grid_),
  PROTOBUF_FIELD_OFFSET(::DTCC::GridField2D, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DTCC::GridField3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DTCC::GridField3D, grid_),
  PROTOBUF_FIELD_OFFSET(::DTCC::GridField3D, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DTCC::GridVectorField2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DTCC::GridVectorField2D, grid_),
  PROTOBUF_FIELD_OFFSET(::DTCC::GridVectorField2D, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DTCC::GridVectorField3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DTCC::GridVectorField3D, grid_),
  PROTOBUF_FIELD_OFFSET(::DTCC::GridVectorField3D, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DTCC::MeshField2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DTCC::MeshField2D, mesh_),
  PROTOBUF_FIELD_OFFSET(::DTCC::MeshField2D, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DTCC::MeshField3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DTCC::MeshField3D, mesh_),
  PROTOBUF_FIELD_OFFSET(::DTCC::MeshField3D, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DTCC::MeshVectorField2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DTCC::MeshVectorField2D, mesh_),
  PROTOBUF_FIELD_OFFSET(::DTCC::MeshVectorField2D, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DTCC::MeshVectorField3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DTCC::MeshVectorField3D, mesh_),
  PROTOBUF_FIELD_OFFSET(::DTCC::MeshVectorField3D, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DTCC::SurfaceField2D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DTCC::SurfaceField2D, surface_),
  PROTOBUF_FIELD_OFFSET(::DTCC::SurfaceField2D, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DTCC::SurfaceField3D, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DTCC::SurfaceField3D, surface_),
  PROTOBUF_FIELD_OFFSET(::DTCC::SurfaceField3D, values_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DTCC::Building, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DTCC::Building, uuid_),
  PROTOBUF_FIELD_OFFSET(::DTCC::Building, footprint_),
  PROTOBUF_FIELD_OFFSET(::DTCC::Building, height_),
  PROTOBUF_FIELD_OFFSET(::DTCC::Building, groundheight_),
  ~0u,  // no _has_bits_
  PROTOBUF_FIELD_OFFSET(::DTCC::CityModel, _internal_metadata_),
  ~0u,  // no _extensions_
  ~0u,  // no _oneof_case_
  ~0u,  // no _weak_field_map_
  PROTOBUF_FIELD_OFFSET(::DTCC::CityModel, buildings_),
};
static const ::PROTOBUF_NAMESPACE_ID::internal::MigrationSchema schemas[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) = {
  { 0, -1, sizeof(::DTCC::Vector2D)},
  { 7, -1, sizeof(::DTCC::Vector3D)},
  { 15, -1, sizeof(::DTCC::Simplex1D)},
  { 22, -1, sizeof(::DTCC::Simplex2D)},
  { 30, -1, sizeof(::DTCC::Simplex3D)},
  { 39, -1, sizeof(::DTCC::BoundingBox2D)},
  { 46, -1, sizeof(::DTCC::BoundingBox3D)},
  { 53, -1, sizeof(::DTCC::Polygon)},
  { 59, -1, sizeof(::DTCC::Grid2D)},
  { 69, -1, sizeof(::DTCC::Grid3D)},
  { 81, -1, sizeof(::DTCC::Mesh2D)},
  { 89, -1, sizeof(::DTCC::Mesh3D)},
  { 97, -1, sizeof(::DTCC::Surface2D)},
  { 105, -1, sizeof(::DTCC::Surface3D)},
  { 113, -1, sizeof(::DTCC::GridField2D)},
  { 120, -1, sizeof(::DTCC::GridField3D)},
  { 127, -1, sizeof(::DTCC::GridVectorField2D)},
  { 134, -1, sizeof(::DTCC::GridVectorField3D)},
  { 141, -1, sizeof(::DTCC::MeshField2D)},
  { 148, -1, sizeof(::DTCC::MeshField3D)},
  { 155, -1, sizeof(::DTCC::MeshVectorField2D)},
  { 162, -1, sizeof(::DTCC::MeshVectorField3D)},
  { 169, -1, sizeof(::DTCC::SurfaceField2D)},
  { 176, -1, sizeof(::DTCC::SurfaceField3D)},
  { 183, -1, sizeof(::DTCC::Building)},
  { 192, -1, sizeof(::DTCC::CityModel)},
};

static ::PROTOBUF_NAMESPACE_ID::Message const * const file_default_instances[] = {
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DTCC::_Vector2D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DTCC::_Vector3D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DTCC::_Simplex1D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DTCC::_Simplex2D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DTCC::_Simplex3D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DTCC::_BoundingBox2D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DTCC::_BoundingBox3D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DTCC::_Polygon_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DTCC::_Grid2D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DTCC::_Grid3D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DTCC::_Mesh2D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DTCC::_Mesh3D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DTCC::_Surface2D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DTCC::_Surface3D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DTCC::_GridField2D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DTCC::_GridField3D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DTCC::_GridVectorField2D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DTCC::_GridVectorField3D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DTCC::_MeshField2D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DTCC::_MeshField3D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DTCC::_MeshVectorField2D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DTCC::_MeshVectorField3D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DTCC::_SurfaceField2D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DTCC::_SurfaceField3D_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DTCC::_Building_default_instance_),
  reinterpret_cast<const ::PROTOBUF_NAMESPACE_ID::Message*>(&::DTCC::_CityModel_default_instance_),
};

const char descriptor_table_protodef_dtcc_2eproto[] PROTOBUF_SECTION_VARIABLE(protodesc_cold) =
  "\n\ndtcc.proto\022\004DTCC\" \n\010Vector2D\022\t\n\001x\030\001 \001("
  "\002\022\t\n\001y\030\002 \001(\002\"+\n\010Vector3D\022\t\n\001x\030\001 \001(\002\022\t\n\001y"
  "\030\002 \001(\002\022\t\n\001z\030\003 \001(\002\"#\n\tSimplex1D\022\n\n\002v0\030\001 \001"
  "(\005\022\n\n\002v1\030\002 \001(\005\"/\n\tSimplex2D\022\n\n\002v0\030\001 \001(\005\022"
  "\n\n\002v1\030\002 \001(\005\022\n\n\002v2\030\003 \001(\005\";\n\tSimplex3D\022\n\n\002"
  "v0\030\001 \001(\005\022\n\n\002v1\030\002 \001(\005\022\n\n\002v2\030\003 \001(\005\022\n\n\002v3\030\004"
  " \001(\005\"E\n\rBoundingBox2D\022\031\n\001p\030\001 \001(\0132\016.DTCC."
  "Vector2D\022\031\n\001q\030\002 \001(\0132\016.DTCC.Vector2D\"E\n\rB"
  "oundingBox3D\022\031\n\001p\030\001 \001(\0132\016.DTCC.Vector3D\022"
  "\031\n\001q\030\002 \001(\0132\016.DTCC.Vector3D\"+\n\007Polygon\022 \n"
  "\010vertices\030\001 \003(\0132\016.DTCC.Vector2D\"n\n\006Grid2"
  "D\022(\n\013boundingBox\030\001 \001(\0132\023.DTCC.BoundingBo"
  "x2D\022\r\n\005xSize\030\002 \001(\005\022\r\n\005ySize\030\003 \001(\005\022\r\n\005xSt"
  "ep\030\004 \001(\002\022\r\n\005yStep\030\005 \001(\002\"\214\001\n\006Grid3D\022(\n\013bo"
  "undingBox\030\001 \001(\0132\023.DTCC.BoundingBox3D\022\r\n\005"
  "xSize\030\002 \001(\005\022\r\n\005ySize\030\003 \001(\005\022\r\n\005zSize\030\004 \001("
  "\005\022\r\n\005xStep\030\005 \001(\002\022\r\n\005yStep\030\006 \001(\002\022\r\n\005zStep"
  "\030\007 \001(\002\"[\n\006Mesh2D\022 \n\010vertices\030\001 \003(\0132\016.DTC"
  "C.Vector2D\022\036\n\005cells\030\002 \003(\0132\017.DTCC.Simplex"
  "2D\022\017\n\007markers\030\003 \003(\005\"[\n\006Mesh3D\022 \n\010vertice"
  "s\030\001 \003(\0132\016.DTCC.Vector3D\022\036\n\005cells\030\002 \003(\0132\017"
  ".DTCC.Simplex3D\022\017\n\007markers\030\003 \003(\005\"n\n\tSurf"
  "ace2D\022 \n\010vertices\030\001 \003(\0132\016.DTCC.Vector2D\022"
  "\037\n\007normals\030\002 \003(\0132\016.DTCC.Vector2D\022\036\n\005edge"
  "s\030\003 \003(\0132\017.DTCC.Simplex1D\"n\n\tSurface3D\022 \n"
  "\010vertices\030\001 \003(\0132\016.DTCC.Vector3D\022\037\n\007norma"
  "ls\030\002 \003(\0132\016.DTCC.Vector3D\022\036\n\005faces\030\003 \003(\0132"
  "\017.DTCC.Simplex2D\"9\n\013GridField2D\022\032\n\004grid\030"
  "\001 \001(\0132\014.DTCC.Grid2D\022\016\n\006values\030\002 \003(\002\"9\n\013G"
  "ridField3D\022\032\n\004grid\030\001 \001(\0132\014.DTCC.Grid3D\022\016"
  "\n\006values\030\002 \003(\002\"\?\n\021GridVectorField2D\022\032\n\004g"
  "rid\030\001 \001(\0132\014.DTCC.Grid2D\022\016\n\006values\030\002 \003(\002\""
  "\?\n\021GridVectorField3D\022\032\n\004grid\030\001 \001(\0132\014.DTC"
  "C.Grid3D\022\016\n\006values\030\002 \003(\002\"9\n\013MeshField2D\022"
  "\032\n\004mesh\030\001 \001(\0132\014.DTCC.Mesh2D\022\016\n\006values\030\002 "
  "\003(\002\"9\n\013MeshField3D\022\032\n\004mesh\030\001 \001(\0132\014.DTCC."
  "Mesh3D\022\016\n\006values\030\002 \003(\002\"\?\n\021MeshVectorFiel"
  "d2D\022\032\n\004mesh\030\001 \001(\0132\014.DTCC.Mesh2D\022\016\n\006value"
  "s\030\002 \003(\002\"\?\n\021MeshVectorField3D\022\032\n\004mesh\030\001 \001"
  "(\0132\014.DTCC.Mesh3D\022\016\n\006values\030\002 \003(\002\"B\n\016Surf"
  "aceField2D\022 \n\007surface\030\001 \001(\0132\017.DTCC.Surfa"
  "ce2D\022\016\n\006values\030\003 \003(\002\"B\n\016SurfaceField3D\022 "
  "\n\007surface\030\001 \001(\0132\017.DTCC.Surface3D\022\016\n\006valu"
  "es\030\003 \003(\002\"`\n\010Building\022\014\n\004uuid\030\001 \001(\t\022 \n\tfo"
  "otPrint\030\002 \001(\0132\r.DTCC.Polygon\022\016\n\006height\030\003"
  " \001(\001\022\024\n\014groundHeight\030\004 \001(\001\".\n\tCityModel\022"
  "!\n\tbuildings\030\004 \003(\0132\016.DTCC.Buildingb\006prot"
  "o3"
  ;
static const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable*const descriptor_table_dtcc_2eproto_deps[1] = {
};
static ::PROTOBUF_NAMESPACE_ID::internal::SCCInfoBase*const descriptor_table_dtcc_2eproto_sccs[26] = {
  &scc_info_BoundingBox2D_dtcc_2eproto.base,
  &scc_info_BoundingBox3D_dtcc_2eproto.base,
  &scc_info_Building_dtcc_2eproto.base,
  &scc_info_CityModel_dtcc_2eproto.base,
  &scc_info_Grid2D_dtcc_2eproto.base,
  &scc_info_Grid3D_dtcc_2eproto.base,
  &scc_info_GridField2D_dtcc_2eproto.base,
  &scc_info_GridField3D_dtcc_2eproto.base,
  &scc_info_GridVectorField2D_dtcc_2eproto.base,
  &scc_info_GridVectorField3D_dtcc_2eproto.base,
  &scc_info_Mesh2D_dtcc_2eproto.base,
  &scc_info_Mesh3D_dtcc_2eproto.base,
  &scc_info_MeshField2D_dtcc_2eproto.base,
  &scc_info_MeshField3D_dtcc_2eproto.base,
  &scc_info_MeshVectorField2D_dtcc_2eproto.base,
  &scc_info_MeshVectorField3D_dtcc_2eproto.base,
  &scc_info_Polygon_dtcc_2eproto.base,
  &scc_info_Simplex1D_dtcc_2eproto.base,
  &scc_info_Simplex2D_dtcc_2eproto.base,
  &scc_info_Simplex3D_dtcc_2eproto.base,
  &scc_info_Surface2D_dtcc_2eproto.base,
  &scc_info_Surface3D_dtcc_2eproto.base,
  &scc_info_SurfaceField2D_dtcc_2eproto.base,
  &scc_info_SurfaceField3D_dtcc_2eproto.base,
  &scc_info_Vector2D_dtcc_2eproto.base,
  &scc_info_Vector3D_dtcc_2eproto.base,
};
static ::PROTOBUF_NAMESPACE_ID::internal::once_flag descriptor_table_dtcc_2eproto_once;
const ::PROTOBUF_NAMESPACE_ID::internal::DescriptorTable descriptor_table_dtcc_2eproto = {
  false, false, descriptor_table_protodef_dtcc_2eproto, "dtcc.proto", 1882,
  &descriptor_table_dtcc_2eproto_once, descriptor_table_dtcc_2eproto_sccs, descriptor_table_dtcc_2eproto_deps, 26, 0,
  schemas, file_default_instances, TableStruct_dtcc_2eproto::offsets,
  file_level_metadata_dtcc_2eproto, 26, file_level_enum_descriptors_dtcc_2eproto, file_level_service_descriptors_dtcc_2eproto,
};

// Force running AddDescriptors() at dynamic initialization time.
static bool dynamic_init_dummy_dtcc_2eproto = (static_cast<void>(::PROTOBUF_NAMESPACE_ID::internal::AddDescriptors(&descriptor_table_dtcc_2eproto)), true);
namespace DTCC {

// ===================================================================

void Vector2D::InitAsDefaultInstance() {
}
class Vector2D::_Internal {
 public:
};

Vector2D::Vector2D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DTCC.Vector2D)
}
Vector2D::Vector2D(const Vector2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&y_) -
    reinterpret_cast<char*>(&x_)) + sizeof(y_));
  // @@protoc_insertion_point(copy_constructor:DTCC.Vector2D)
}

void Vector2D::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
}

Vector2D::~Vector2D() {
  // @@protoc_insertion_point(destructor:DTCC.Vector2D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vector2D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Vector2D::ArenaDtor(void* object) {
  Vector2D* _this = reinterpret_cast< Vector2D* >(object);
  (void)_this;
}
void Vector2D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vector2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vector2D& Vector2D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vector2D_dtcc_2eproto.base);
  return *internal_default_instance();
}


void Vector2D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.Vector2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&y_) -
      reinterpret_cast<char*>(&x_)) + sizeof(y_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vector2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.Vector2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.Vector2D)
  return target;
}

size_t Vector2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.Vector2D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vector2D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTCC.Vector2D)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector2D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vector2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTCC.Vector2D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTCC.Vector2D)
    MergeFrom(*source);
  }
}

void Vector2D::MergeFrom(const Vector2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.Vector2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
}

void Vector2D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTCC.Vector2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector2D::CopyFrom(const Vector2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.Vector2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector2D::IsInitialized() const {
  return true;
}

void Vector2D::InternalSwap(Vector2D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector2D, y_)
      + sizeof(Vector2D::y_)
      - PROTOBUF_FIELD_OFFSET(Vector2D, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector2D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Vector3D::InitAsDefaultInstance() {
}
class Vector3D::_Internal {
 public:
};

Vector3D::Vector3D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DTCC.Vector3D)
}
Vector3D::Vector3D(const Vector3D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&x_, &from.x_,
    static_cast<size_t>(reinterpret_cast<char*>(&z_) -
    reinterpret_cast<char*>(&x_)) + sizeof(z_));
  // @@protoc_insertion_point(copy_constructor:DTCC.Vector3D)
}

void Vector3D::SharedCtor() {
  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
}

Vector3D::~Vector3D() {
  // @@protoc_insertion_point(destructor:DTCC.Vector3D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Vector3D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Vector3D::ArenaDtor(void* object) {
  Vector3D* _this = reinterpret_cast< Vector3D* >(object);
  (void)_this;
}
void Vector3D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Vector3D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Vector3D& Vector3D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Vector3D_dtcc_2eproto.base);
  return *internal_default_instance();
}


void Vector3D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.Vector3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&x_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&z_) -
      reinterpret_cast<char*>(&x_)) + sizeof(z_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Vector3D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // float x = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 13)) {
          x_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float y = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21)) {
          y_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float z = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29)) {
          z_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Vector3D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.Vector3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(1, this->_internal_x(), target);
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(2, this->_internal_y(), target);
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(3, this->_internal_z(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.Vector3D)
  return target;
}

size_t Vector3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.Vector3D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // float x = 1;
  if (!(this->x() <= 0 && this->x() >= 0)) {
    total_size += 1 + 4;
  }

  // float y = 2;
  if (!(this->y() <= 0 && this->y() >= 0)) {
    total_size += 1 + 4;
  }

  // float z = 3;
  if (!(this->z() <= 0 && this->z() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Vector3D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTCC.Vector3D)
  GOOGLE_DCHECK_NE(&from, this);
  const Vector3D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Vector3D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTCC.Vector3D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTCC.Vector3D)
    MergeFrom(*source);
  }
}

void Vector3D::MergeFrom(const Vector3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.Vector3D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (!(from.x() <= 0 && from.x() >= 0)) {
    _internal_set_x(from._internal_x());
  }
  if (!(from.y() <= 0 && from.y() >= 0)) {
    _internal_set_y(from._internal_y());
  }
  if (!(from.z() <= 0 && from.z() >= 0)) {
    _internal_set_z(from._internal_z());
  }
}

void Vector3D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTCC.Vector3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Vector3D::CopyFrom(const Vector3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.Vector3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Vector3D::IsInitialized() const {
  return true;
}

void Vector3D::InternalSwap(Vector3D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Vector3D, z_)
      + sizeof(Vector3D::z_)
      - PROTOBUF_FIELD_OFFSET(Vector3D, x_)>(
          reinterpret_cast<char*>(&x_),
          reinterpret_cast<char*>(&other->x_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Vector3D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Simplex1D::InitAsDefaultInstance() {
}
class Simplex1D::_Internal {
 public:
};

Simplex1D::Simplex1D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DTCC.Simplex1D)
}
Simplex1D::Simplex1D(const Simplex1D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&v0_, &from.v0_,
    static_cast<size_t>(reinterpret_cast<char*>(&v1_) -
    reinterpret_cast<char*>(&v0_)) + sizeof(v1_));
  // @@protoc_insertion_point(copy_constructor:DTCC.Simplex1D)
}

void Simplex1D::SharedCtor() {
  ::memset(&v0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&v1_) -
      reinterpret_cast<char*>(&v0_)) + sizeof(v1_));
}

Simplex1D::~Simplex1D() {
  // @@protoc_insertion_point(destructor:DTCC.Simplex1D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Simplex1D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Simplex1D::ArenaDtor(void* object) {
  Simplex1D* _this = reinterpret_cast< Simplex1D* >(object);
  (void)_this;
}
void Simplex1D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Simplex1D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Simplex1D& Simplex1D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Simplex1D_dtcc_2eproto.base);
  return *internal_default_instance();
}


void Simplex1D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.Simplex1D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&v0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&v1_) -
      reinterpret_cast<char*>(&v0_)) + sizeof(v1_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Simplex1D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 v0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          v0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 v1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          v1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Simplex1D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.Simplex1D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 v0 = 1;
  if (this->v0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_v0(), target);
  }

  // int32 v1 = 2;
  if (this->v1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_v1(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.Simplex1D)
  return target;
}

size_t Simplex1D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.Simplex1D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 v0 = 1;
  if (this->v0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_v0());
  }

  // int32 v1 = 2;
  if (this->v1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_v1());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Simplex1D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTCC.Simplex1D)
  GOOGLE_DCHECK_NE(&from, this);
  const Simplex1D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Simplex1D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTCC.Simplex1D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTCC.Simplex1D)
    MergeFrom(*source);
  }
}

void Simplex1D::MergeFrom(const Simplex1D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.Simplex1D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.v0() != 0) {
    _internal_set_v0(from._internal_v0());
  }
  if (from.v1() != 0) {
    _internal_set_v1(from._internal_v1());
  }
}

void Simplex1D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTCC.Simplex1D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Simplex1D::CopyFrom(const Simplex1D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.Simplex1D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Simplex1D::IsInitialized() const {
  return true;
}

void Simplex1D::InternalSwap(Simplex1D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Simplex1D, v1_)
      + sizeof(Simplex1D::v1_)
      - PROTOBUF_FIELD_OFFSET(Simplex1D, v0_)>(
          reinterpret_cast<char*>(&v0_),
          reinterpret_cast<char*>(&other->v0_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Simplex1D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Simplex2D::InitAsDefaultInstance() {
}
class Simplex2D::_Internal {
 public:
};

Simplex2D::Simplex2D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DTCC.Simplex2D)
}
Simplex2D::Simplex2D(const Simplex2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&v0_, &from.v0_,
    static_cast<size_t>(reinterpret_cast<char*>(&v2_) -
    reinterpret_cast<char*>(&v0_)) + sizeof(v2_));
  // @@protoc_insertion_point(copy_constructor:DTCC.Simplex2D)
}

void Simplex2D::SharedCtor() {
  ::memset(&v0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&v2_) -
      reinterpret_cast<char*>(&v0_)) + sizeof(v2_));
}

Simplex2D::~Simplex2D() {
  // @@protoc_insertion_point(destructor:DTCC.Simplex2D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Simplex2D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Simplex2D::ArenaDtor(void* object) {
  Simplex2D* _this = reinterpret_cast< Simplex2D* >(object);
  (void)_this;
}
void Simplex2D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Simplex2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Simplex2D& Simplex2D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Simplex2D_dtcc_2eproto.base);
  return *internal_default_instance();
}


void Simplex2D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.Simplex2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&v0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&v2_) -
      reinterpret_cast<char*>(&v0_)) + sizeof(v2_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Simplex2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 v0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          v0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 v1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          v1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 v2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          v2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Simplex2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.Simplex2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 v0 = 1;
  if (this->v0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_v0(), target);
  }

  // int32 v1 = 2;
  if (this->v1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_v1(), target);
  }

  // int32 v2 = 3;
  if (this->v2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_v2(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.Simplex2D)
  return target;
}

size_t Simplex2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.Simplex2D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 v0 = 1;
  if (this->v0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_v0());
  }

  // int32 v1 = 2;
  if (this->v1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_v1());
  }

  // int32 v2 = 3;
  if (this->v2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_v2());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Simplex2D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTCC.Simplex2D)
  GOOGLE_DCHECK_NE(&from, this);
  const Simplex2D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Simplex2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTCC.Simplex2D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTCC.Simplex2D)
    MergeFrom(*source);
  }
}

void Simplex2D::MergeFrom(const Simplex2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.Simplex2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.v0() != 0) {
    _internal_set_v0(from._internal_v0());
  }
  if (from.v1() != 0) {
    _internal_set_v1(from._internal_v1());
  }
  if (from.v2() != 0) {
    _internal_set_v2(from._internal_v2());
  }
}

void Simplex2D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTCC.Simplex2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Simplex2D::CopyFrom(const Simplex2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.Simplex2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Simplex2D::IsInitialized() const {
  return true;
}

void Simplex2D::InternalSwap(Simplex2D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Simplex2D, v2_)
      + sizeof(Simplex2D::v2_)
      - PROTOBUF_FIELD_OFFSET(Simplex2D, v0_)>(
          reinterpret_cast<char*>(&v0_),
          reinterpret_cast<char*>(&other->v0_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Simplex2D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Simplex3D::InitAsDefaultInstance() {
}
class Simplex3D::_Internal {
 public:
};

Simplex3D::Simplex3D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DTCC.Simplex3D)
}
Simplex3D::Simplex3D(const Simplex3D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::memcpy(&v0_, &from.v0_,
    static_cast<size_t>(reinterpret_cast<char*>(&v3_) -
    reinterpret_cast<char*>(&v0_)) + sizeof(v3_));
  // @@protoc_insertion_point(copy_constructor:DTCC.Simplex3D)
}

void Simplex3D::SharedCtor() {
  ::memset(&v0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&v3_) -
      reinterpret_cast<char*>(&v0_)) + sizeof(v3_));
}

Simplex3D::~Simplex3D() {
  // @@protoc_insertion_point(destructor:DTCC.Simplex3D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Simplex3D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Simplex3D::ArenaDtor(void* object) {
  Simplex3D* _this = reinterpret_cast< Simplex3D* >(object);
  (void)_this;
}
void Simplex3D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Simplex3D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Simplex3D& Simplex3D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Simplex3D_dtcc_2eproto.base);
  return *internal_default_instance();
}


void Simplex3D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.Simplex3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  ::memset(&v0_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&v3_) -
      reinterpret_cast<char*>(&v0_)) + sizeof(v3_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Simplex3D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // int32 v0 = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 8)) {
          v0_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 v1 = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          v1_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 v2 = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          v2_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 v3 = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          v3_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Simplex3D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.Simplex3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // int32 v0 = 1;
  if (this->v0() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(1, this->_internal_v0(), target);
  }

  // int32 v1 = 2;
  if (this->v1() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_v1(), target);
  }

  // int32 v2 = 3;
  if (this->v2() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_v2(), target);
  }

  // int32 v3 = 4;
  if (this->v3() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_v3(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.Simplex3D)
  return target;
}

size_t Simplex3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.Simplex3D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // int32 v0 = 1;
  if (this->v0() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_v0());
  }

  // int32 v1 = 2;
  if (this->v1() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_v1());
  }

  // int32 v2 = 3;
  if (this->v2() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_v2());
  }

  // int32 v3 = 4;
  if (this->v3() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_v3());
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Simplex3D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTCC.Simplex3D)
  GOOGLE_DCHECK_NE(&from, this);
  const Simplex3D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Simplex3D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTCC.Simplex3D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTCC.Simplex3D)
    MergeFrom(*source);
  }
}

void Simplex3D::MergeFrom(const Simplex3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.Simplex3D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.v0() != 0) {
    _internal_set_v0(from._internal_v0());
  }
  if (from.v1() != 0) {
    _internal_set_v1(from._internal_v1());
  }
  if (from.v2() != 0) {
    _internal_set_v2(from._internal_v2());
  }
  if (from.v3() != 0) {
    _internal_set_v3(from._internal_v3());
  }
}

void Simplex3D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTCC.Simplex3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Simplex3D::CopyFrom(const Simplex3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.Simplex3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Simplex3D::IsInitialized() const {
  return true;
}

void Simplex3D::InternalSwap(Simplex3D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Simplex3D, v3_)
      + sizeof(Simplex3D::v3_)
      - PROTOBUF_FIELD_OFFSET(Simplex3D, v0_)>(
          reinterpret_cast<char*>(&v0_),
          reinterpret_cast<char*>(&other->v0_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Simplex3D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BoundingBox2D::InitAsDefaultInstance() {
  ::DTCC::_BoundingBox2D_default_instance_._instance.get_mutable()->p_ = const_cast< ::DTCC::Vector2D*>(
      ::DTCC::Vector2D::internal_default_instance());
  ::DTCC::_BoundingBox2D_default_instance_._instance.get_mutable()->q_ = const_cast< ::DTCC::Vector2D*>(
      ::DTCC::Vector2D::internal_default_instance());
}
class BoundingBox2D::_Internal {
 public:
  static const ::DTCC::Vector2D& p(const BoundingBox2D* msg);
  static const ::DTCC::Vector2D& q(const BoundingBox2D* msg);
};

const ::DTCC::Vector2D&
BoundingBox2D::_Internal::p(const BoundingBox2D* msg) {
  return *msg->p_;
}
const ::DTCC::Vector2D&
BoundingBox2D::_Internal::q(const BoundingBox2D* msg) {
  return *msg->q_;
}
BoundingBox2D::BoundingBox2D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DTCC.BoundingBox2D)
}
BoundingBox2D::BoundingBox2D(const BoundingBox2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_p()) {
    p_ = new ::DTCC::Vector2D(*from.p_);
  } else {
    p_ = nullptr;
  }
  if (from._internal_has_q()) {
    q_ = new ::DTCC::Vector2D(*from.q_);
  } else {
    q_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:DTCC.BoundingBox2D)
}

void BoundingBox2D::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BoundingBox2D_dtcc_2eproto.base);
  ::memset(&p_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&q_) -
      reinterpret_cast<char*>(&p_)) + sizeof(q_));
}

BoundingBox2D::~BoundingBox2D() {
  // @@protoc_insertion_point(destructor:DTCC.BoundingBox2D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BoundingBox2D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete p_;
  if (this != internal_default_instance()) delete q_;
}

void BoundingBox2D::ArenaDtor(void* object) {
  BoundingBox2D* _this = reinterpret_cast< BoundingBox2D* >(object);
  (void)_this;
}
void BoundingBox2D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoundingBox2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BoundingBox2D& BoundingBox2D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BoundingBox2D_dtcc_2eproto.base);
  return *internal_default_instance();
}


void BoundingBox2D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.BoundingBox2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && p_ != nullptr) {
    delete p_;
  }
  p_ = nullptr;
  if (GetArena() == nullptr && q_ != nullptr) {
    delete q_;
  }
  q_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoundingBox2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DTCC.Vector2D p = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_p(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DTCC.Vector2D q = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_q(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BoundingBox2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.BoundingBox2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DTCC.Vector2D p = 1;
  if (this->has_p()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::p(this), target, stream);
  }

  // .DTCC.Vector2D q = 2;
  if (this->has_q()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::q(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.BoundingBox2D)
  return target;
}

size_t BoundingBox2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.BoundingBox2D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DTCC.Vector2D p = 1;
  if (this->has_p()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *p_);
  }

  // .DTCC.Vector2D q = 2;
  if (this->has_q()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *q_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoundingBox2D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTCC.BoundingBox2D)
  GOOGLE_DCHECK_NE(&from, this);
  const BoundingBox2D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoundingBox2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTCC.BoundingBox2D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTCC.BoundingBox2D)
    MergeFrom(*source);
  }
}

void BoundingBox2D::MergeFrom(const BoundingBox2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.BoundingBox2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_p()) {
    _internal_mutable_p()->::DTCC::Vector2D::MergeFrom(from._internal_p());
  }
  if (from.has_q()) {
    _internal_mutable_q()->::DTCC::Vector2D::MergeFrom(from._internal_q());
  }
}

void BoundingBox2D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTCC.BoundingBox2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundingBox2D::CopyFrom(const BoundingBox2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.BoundingBox2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundingBox2D::IsInitialized() const {
  return true;
}

void BoundingBox2D::InternalSwap(BoundingBox2D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BoundingBox2D, q_)
      + sizeof(BoundingBox2D::q_)
      - PROTOBUF_FIELD_OFFSET(BoundingBox2D, p_)>(
          reinterpret_cast<char*>(&p_),
          reinterpret_cast<char*>(&other->p_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BoundingBox2D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void BoundingBox3D::InitAsDefaultInstance() {
  ::DTCC::_BoundingBox3D_default_instance_._instance.get_mutable()->p_ = const_cast< ::DTCC::Vector3D*>(
      ::DTCC::Vector3D::internal_default_instance());
  ::DTCC::_BoundingBox3D_default_instance_._instance.get_mutable()->q_ = const_cast< ::DTCC::Vector3D*>(
      ::DTCC::Vector3D::internal_default_instance());
}
class BoundingBox3D::_Internal {
 public:
  static const ::DTCC::Vector3D& p(const BoundingBox3D* msg);
  static const ::DTCC::Vector3D& q(const BoundingBox3D* msg);
};

const ::DTCC::Vector3D&
BoundingBox3D::_Internal::p(const BoundingBox3D* msg) {
  return *msg->p_;
}
const ::DTCC::Vector3D&
BoundingBox3D::_Internal::q(const BoundingBox3D* msg) {
  return *msg->q_;
}
BoundingBox3D::BoundingBox3D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DTCC.BoundingBox3D)
}
BoundingBox3D::BoundingBox3D(const BoundingBox3D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_p()) {
    p_ = new ::DTCC::Vector3D(*from.p_);
  } else {
    p_ = nullptr;
  }
  if (from._internal_has_q()) {
    q_ = new ::DTCC::Vector3D(*from.q_);
  } else {
    q_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:DTCC.BoundingBox3D)
}

void BoundingBox3D::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_BoundingBox3D_dtcc_2eproto.base);
  ::memset(&p_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&q_) -
      reinterpret_cast<char*>(&p_)) + sizeof(q_));
}

BoundingBox3D::~BoundingBox3D() {
  // @@protoc_insertion_point(destructor:DTCC.BoundingBox3D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void BoundingBox3D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete p_;
  if (this != internal_default_instance()) delete q_;
}

void BoundingBox3D::ArenaDtor(void* object) {
  BoundingBox3D* _this = reinterpret_cast< BoundingBox3D* >(object);
  (void)_this;
}
void BoundingBox3D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void BoundingBox3D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const BoundingBox3D& BoundingBox3D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_BoundingBox3D_dtcc_2eproto.base);
  return *internal_default_instance();
}


void BoundingBox3D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.BoundingBox3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && p_ != nullptr) {
    delete p_;
  }
  p_ = nullptr;
  if (GetArena() == nullptr && q_ != nullptr) {
    delete q_;
  }
  q_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* BoundingBox3D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DTCC.Vector3D p = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_p(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DTCC.Vector3D q = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_q(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* BoundingBox3D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.BoundingBox3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DTCC.Vector3D p = 1;
  if (this->has_p()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::p(this), target, stream);
  }

  // .DTCC.Vector3D q = 2;
  if (this->has_q()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::q(this), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.BoundingBox3D)
  return target;
}

size_t BoundingBox3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.BoundingBox3D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DTCC.Vector3D p = 1;
  if (this->has_p()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *p_);
  }

  // .DTCC.Vector3D q = 2;
  if (this->has_q()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *q_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void BoundingBox3D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTCC.BoundingBox3D)
  GOOGLE_DCHECK_NE(&from, this);
  const BoundingBox3D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<BoundingBox3D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTCC.BoundingBox3D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTCC.BoundingBox3D)
    MergeFrom(*source);
  }
}

void BoundingBox3D::MergeFrom(const BoundingBox3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.BoundingBox3D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_p()) {
    _internal_mutable_p()->::DTCC::Vector3D::MergeFrom(from._internal_p());
  }
  if (from.has_q()) {
    _internal_mutable_q()->::DTCC::Vector3D::MergeFrom(from._internal_q());
  }
}

void BoundingBox3D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTCC.BoundingBox3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void BoundingBox3D::CopyFrom(const BoundingBox3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.BoundingBox3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool BoundingBox3D::IsInitialized() const {
  return true;
}

void BoundingBox3D::InternalSwap(BoundingBox3D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(BoundingBox3D, q_)
      + sizeof(BoundingBox3D::q_)
      - PROTOBUF_FIELD_OFFSET(BoundingBox3D, p_)>(
          reinterpret_cast<char*>(&p_),
          reinterpret_cast<char*>(&other->p_));
}

::PROTOBUF_NAMESPACE_ID::Metadata BoundingBox3D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Polygon::InitAsDefaultInstance() {
}
class Polygon::_Internal {
 public:
};

Polygon::Polygon(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vertices_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DTCC.Polygon)
}
Polygon::Polygon(const Polygon& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vertices_(from.vertices_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DTCC.Polygon)
}

void Polygon::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Polygon_dtcc_2eproto.base);
}

Polygon::~Polygon() {
  // @@protoc_insertion_point(destructor:DTCC.Polygon)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Polygon::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Polygon::ArenaDtor(void* object) {
  Polygon* _this = reinterpret_cast< Polygon* >(object);
  (void)_this;
}
void Polygon::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Polygon::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Polygon& Polygon::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Polygon_dtcc_2eproto.base);
  return *internal_default_instance();
}


void Polygon::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.Polygon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vertices_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Polygon::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .DTCC.Vector2D vertices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vertices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Polygon::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.Polygon)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DTCC.Vector2D vertices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vertices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_vertices(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.Polygon)
  return target;
}

size_t Polygon::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.Polygon)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DTCC.Vector2D vertices = 1;
  total_size += 1UL * this->_internal_vertices_size();
  for (const auto& msg : this->vertices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Polygon::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTCC.Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  const Polygon* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Polygon>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTCC.Polygon)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTCC.Polygon)
    MergeFrom(*source);
  }
}

void Polygon::MergeFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.Polygon)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vertices_.MergeFrom(from.vertices_);
}

void Polygon::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTCC.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Polygon::CopyFrom(const Polygon& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.Polygon)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Polygon::IsInitialized() const {
  return true;
}

void Polygon::InternalSwap(Polygon* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vertices_.InternalSwap(&other->vertices_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Polygon::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Grid2D::InitAsDefaultInstance() {
  ::DTCC::_Grid2D_default_instance_._instance.get_mutable()->boundingbox_ = const_cast< ::DTCC::BoundingBox2D*>(
      ::DTCC::BoundingBox2D::internal_default_instance());
}
class Grid2D::_Internal {
 public:
  static const ::DTCC::BoundingBox2D& boundingbox(const Grid2D* msg);
};

const ::DTCC::BoundingBox2D&
Grid2D::_Internal::boundingbox(const Grid2D* msg) {
  return *msg->boundingbox_;
}
Grid2D::Grid2D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DTCC.Grid2D)
}
Grid2D::Grid2D(const Grid2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_boundingbox()) {
    boundingbox_ = new ::DTCC::BoundingBox2D(*from.boundingbox_);
  } else {
    boundingbox_ = nullptr;
  }
  ::memcpy(&xsize_, &from.xsize_,
    static_cast<size_t>(reinterpret_cast<char*>(&ystep_) -
    reinterpret_cast<char*>(&xsize_)) + sizeof(ystep_));
  // @@protoc_insertion_point(copy_constructor:DTCC.Grid2D)
}

void Grid2D::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Grid2D_dtcc_2eproto.base);
  ::memset(&boundingbox_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ystep_) -
      reinterpret_cast<char*>(&boundingbox_)) + sizeof(ystep_));
}

Grid2D::~Grid2D() {
  // @@protoc_insertion_point(destructor:DTCC.Grid2D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Grid2D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete boundingbox_;
}

void Grid2D::ArenaDtor(void* object) {
  Grid2D* _this = reinterpret_cast< Grid2D* >(object);
  (void)_this;
}
void Grid2D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Grid2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Grid2D& Grid2D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Grid2D_dtcc_2eproto.base);
  return *internal_default_instance();
}


void Grid2D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.Grid2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && boundingbox_ != nullptr) {
    delete boundingbox_;
  }
  boundingbox_ = nullptr;
  ::memset(&xsize_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&ystep_) -
      reinterpret_cast<char*>(&xsize_)) + sizeof(ystep_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Grid2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DTCC.BoundingBox2D boundingBox = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_boundingbox(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 xSize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          xsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ySize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ysize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float xStep = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 37)) {
          xstep_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float yStep = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          ystep_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Grid2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.Grid2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DTCC.BoundingBox2D boundingBox = 1;
  if (this->has_boundingbox()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::boundingbox(this), target, stream);
  }

  // int32 xSize = 2;
  if (this->xsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_xsize(), target);
  }

  // int32 ySize = 3;
  if (this->ysize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ysize(), target);
  }

  // float xStep = 4;
  if (!(this->xstep() <= 0 && this->xstep() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(4, this->_internal_xstep(), target);
  }

  // float yStep = 5;
  if (!(this->ystep() <= 0 && this->ystep() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_ystep(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.Grid2D)
  return target;
}

size_t Grid2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.Grid2D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DTCC.BoundingBox2D boundingBox = 1;
  if (this->has_boundingbox()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *boundingbox_);
  }

  // int32 xSize = 2;
  if (this->xsize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_xsize());
  }

  // int32 ySize = 3;
  if (this->ysize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ysize());
  }

  // float xStep = 4;
  if (!(this->xstep() <= 0 && this->xstep() >= 0)) {
    total_size += 1 + 4;
  }

  // float yStep = 5;
  if (!(this->ystep() <= 0 && this->ystep() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Grid2D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTCC.Grid2D)
  GOOGLE_DCHECK_NE(&from, this);
  const Grid2D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Grid2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTCC.Grid2D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTCC.Grid2D)
    MergeFrom(*source);
  }
}

void Grid2D::MergeFrom(const Grid2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.Grid2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_boundingbox()) {
    _internal_mutable_boundingbox()->::DTCC::BoundingBox2D::MergeFrom(from._internal_boundingbox());
  }
  if (from.xsize() != 0) {
    _internal_set_xsize(from._internal_xsize());
  }
  if (from.ysize() != 0) {
    _internal_set_ysize(from._internal_ysize());
  }
  if (!(from.xstep() <= 0 && from.xstep() >= 0)) {
    _internal_set_xstep(from._internal_xstep());
  }
  if (!(from.ystep() <= 0 && from.ystep() >= 0)) {
    _internal_set_ystep(from._internal_ystep());
  }
}

void Grid2D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTCC.Grid2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grid2D::CopyFrom(const Grid2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.Grid2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grid2D::IsInitialized() const {
  return true;
}

void Grid2D::InternalSwap(Grid2D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Grid2D, ystep_)
      + sizeof(Grid2D::ystep_)
      - PROTOBUF_FIELD_OFFSET(Grid2D, boundingbox_)>(
          reinterpret_cast<char*>(&boundingbox_),
          reinterpret_cast<char*>(&other->boundingbox_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Grid2D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Grid3D::InitAsDefaultInstance() {
  ::DTCC::_Grid3D_default_instance_._instance.get_mutable()->boundingbox_ = const_cast< ::DTCC::BoundingBox3D*>(
      ::DTCC::BoundingBox3D::internal_default_instance());
}
class Grid3D::_Internal {
 public:
  static const ::DTCC::BoundingBox3D& boundingbox(const Grid3D* msg);
};

const ::DTCC::BoundingBox3D&
Grid3D::_Internal::boundingbox(const Grid3D* msg) {
  return *msg->boundingbox_;
}
Grid3D::Grid3D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DTCC.Grid3D)
}
Grid3D::Grid3D(const Grid3D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_boundingbox()) {
    boundingbox_ = new ::DTCC::BoundingBox3D(*from.boundingbox_);
  } else {
    boundingbox_ = nullptr;
  }
  ::memcpy(&xsize_, &from.xsize_,
    static_cast<size_t>(reinterpret_cast<char*>(&zstep_) -
    reinterpret_cast<char*>(&xsize_)) + sizeof(zstep_));
  // @@protoc_insertion_point(copy_constructor:DTCC.Grid3D)
}

void Grid3D::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Grid3D_dtcc_2eproto.base);
  ::memset(&boundingbox_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zstep_) -
      reinterpret_cast<char*>(&boundingbox_)) + sizeof(zstep_));
}

Grid3D::~Grid3D() {
  // @@protoc_insertion_point(destructor:DTCC.Grid3D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Grid3D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete boundingbox_;
}

void Grid3D::ArenaDtor(void* object) {
  Grid3D* _this = reinterpret_cast< Grid3D* >(object);
  (void)_this;
}
void Grid3D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Grid3D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Grid3D& Grid3D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Grid3D_dtcc_2eproto.base);
  return *internal_default_instance();
}


void Grid3D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.Grid3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  if (GetArena() == nullptr && boundingbox_ != nullptr) {
    delete boundingbox_;
  }
  boundingbox_ = nullptr;
  ::memset(&xsize_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&zstep_) -
      reinterpret_cast<char*>(&xsize_)) + sizeof(zstep_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Grid3D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DTCC.BoundingBox3D boundingBox = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_boundingbox(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 xSize = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 16)) {
          xsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 ySize = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24)) {
          ysize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // int32 zSize = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 32)) {
          zsize_ = ::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // float xStep = 5;
      case 5:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 45)) {
          xstep_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float yStep = 6;
      case 6:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 53)) {
          ystep_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      // float zStep = 7;
      case 7:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 61)) {
          zstep_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr);
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Grid3D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.Grid3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DTCC.BoundingBox3D boundingBox = 1;
  if (this->has_boundingbox()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::boundingbox(this), target, stream);
  }

  // int32 xSize = 2;
  if (this->xsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(2, this->_internal_xsize(), target);
  }

  // int32 ySize = 3;
  if (this->ysize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(3, this->_internal_ysize(), target);
  }

  // int32 zSize = 4;
  if (this->zsize() != 0) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteInt32ToArray(4, this->_internal_zsize(), target);
  }

  // float xStep = 5;
  if (!(this->xstep() <= 0 && this->xstep() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(5, this->_internal_xstep(), target);
  }

  // float yStep = 6;
  if (!(this->ystep() <= 0 && this->ystep() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(6, this->_internal_ystep(), target);
  }

  // float zStep = 7;
  if (!(this->zstep() <= 0 && this->zstep() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteFloatToArray(7, this->_internal_zstep(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.Grid3D)
  return target;
}

size_t Grid3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.Grid3D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // .DTCC.BoundingBox3D boundingBox = 1;
  if (this->has_boundingbox()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *boundingbox_);
  }

  // int32 xSize = 2;
  if (this->xsize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_xsize());
  }

  // int32 ySize = 3;
  if (this->ysize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_ysize());
  }

  // int32 zSize = 4;
  if (this->zsize() != 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
        this->_internal_zsize());
  }

  // float xStep = 5;
  if (!(this->xstep() <= 0 && this->xstep() >= 0)) {
    total_size += 1 + 4;
  }

  // float yStep = 6;
  if (!(this->ystep() <= 0 && this->ystep() >= 0)) {
    total_size += 1 + 4;
  }

  // float zStep = 7;
  if (!(this->zstep() <= 0 && this->zstep() >= 0)) {
    total_size += 1 + 4;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Grid3D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTCC.Grid3D)
  GOOGLE_DCHECK_NE(&from, this);
  const Grid3D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Grid3D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTCC.Grid3D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTCC.Grid3D)
    MergeFrom(*source);
  }
}

void Grid3D::MergeFrom(const Grid3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.Grid3D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.has_boundingbox()) {
    _internal_mutable_boundingbox()->::DTCC::BoundingBox3D::MergeFrom(from._internal_boundingbox());
  }
  if (from.xsize() != 0) {
    _internal_set_xsize(from._internal_xsize());
  }
  if (from.ysize() != 0) {
    _internal_set_ysize(from._internal_ysize());
  }
  if (from.zsize() != 0) {
    _internal_set_zsize(from._internal_zsize());
  }
  if (!(from.xstep() <= 0 && from.xstep() >= 0)) {
    _internal_set_xstep(from._internal_xstep());
  }
  if (!(from.ystep() <= 0 && from.ystep() >= 0)) {
    _internal_set_ystep(from._internal_ystep());
  }
  if (!(from.zstep() <= 0 && from.zstep() >= 0)) {
    _internal_set_zstep(from._internal_zstep());
  }
}

void Grid3D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTCC.Grid3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Grid3D::CopyFrom(const Grid3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.Grid3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Grid3D::IsInitialized() const {
  return true;
}

void Grid3D::InternalSwap(Grid3D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Grid3D, zstep_)
      + sizeof(Grid3D::zstep_)
      - PROTOBUF_FIELD_OFFSET(Grid3D, boundingbox_)>(
          reinterpret_cast<char*>(&boundingbox_),
          reinterpret_cast<char*>(&other->boundingbox_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Grid3D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Mesh2D::InitAsDefaultInstance() {
}
class Mesh2D::_Internal {
 public:
};

Mesh2D::Mesh2D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vertices_(arena),
  cells_(arena),
  markers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DTCC.Mesh2D)
}
Mesh2D::Mesh2D(const Mesh2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vertices_(from.vertices_),
      cells_(from.cells_),
      markers_(from.markers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DTCC.Mesh2D)
}

void Mesh2D::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Mesh2D_dtcc_2eproto.base);
}

Mesh2D::~Mesh2D() {
  // @@protoc_insertion_point(destructor:DTCC.Mesh2D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Mesh2D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Mesh2D::ArenaDtor(void* object) {
  Mesh2D* _this = reinterpret_cast< Mesh2D* >(object);
  (void)_this;
}
void Mesh2D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Mesh2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Mesh2D& Mesh2D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Mesh2D_dtcc_2eproto.base);
  return *internal_default_instance();
}


void Mesh2D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.Mesh2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vertices_.Clear();
  cells_.Clear();
  markers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mesh2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .DTCC.Vector2D vertices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vertices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .DTCC.Simplex2D cells = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cells(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 markers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_markers(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_markers(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Mesh2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.Mesh2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DTCC.Vector2D vertices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vertices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_vertices(i), target, stream);
  }

  // repeated .DTCC.Simplex2D cells = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cells_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_cells(i), target, stream);
  }

  // repeated int32 markers = 3;
  {
    int byte_size = _markers_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_markers(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.Mesh2D)
  return target;
}

size_t Mesh2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.Mesh2D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DTCC.Vector2D vertices = 1;
  total_size += 1UL * this->_internal_vertices_size();
  for (const auto& msg : this->vertices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .DTCC.Simplex2D cells = 2;
  total_size += 1UL * this->_internal_cells_size();
  for (const auto& msg : this->cells_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 markers = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->markers_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _markers_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mesh2D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTCC.Mesh2D)
  GOOGLE_DCHECK_NE(&from, this);
  const Mesh2D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Mesh2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTCC.Mesh2D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTCC.Mesh2D)
    MergeFrom(*source);
  }
}

void Mesh2D::MergeFrom(const Mesh2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.Mesh2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vertices_.MergeFrom(from.vertices_);
  cells_.MergeFrom(from.cells_);
  markers_.MergeFrom(from.markers_);
}

void Mesh2D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTCC.Mesh2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mesh2D::CopyFrom(const Mesh2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.Mesh2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mesh2D::IsInitialized() const {
  return true;
}

void Mesh2D::InternalSwap(Mesh2D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vertices_.InternalSwap(&other->vertices_);
  cells_.InternalSwap(&other->cells_);
  markers_.InternalSwap(&other->markers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Mesh2D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Mesh3D::InitAsDefaultInstance() {
}
class Mesh3D::_Internal {
 public:
};

Mesh3D::Mesh3D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vertices_(arena),
  cells_(arena),
  markers_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DTCC.Mesh3D)
}
Mesh3D::Mesh3D(const Mesh3D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vertices_(from.vertices_),
      cells_(from.cells_),
      markers_(from.markers_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DTCC.Mesh3D)
}

void Mesh3D::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Mesh3D_dtcc_2eproto.base);
}

Mesh3D::~Mesh3D() {
  // @@protoc_insertion_point(destructor:DTCC.Mesh3D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Mesh3D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Mesh3D::ArenaDtor(void* object) {
  Mesh3D* _this = reinterpret_cast< Mesh3D* >(object);
  (void)_this;
}
void Mesh3D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Mesh3D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Mesh3D& Mesh3D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Mesh3D_dtcc_2eproto.base);
  return *internal_default_instance();
}


void Mesh3D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.Mesh3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vertices_.Clear();
  cells_.Clear();
  markers_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Mesh3D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .DTCC.Vector3D vertices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vertices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .DTCC.Simplex3D cells = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_cells(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated int32 markers = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedInt32Parser(_internal_mutable_markers(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 24) {
          _internal_add_markers(::PROTOBUF_NAMESPACE_ID::internal::ReadVarint64(&ptr));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Mesh3D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.Mesh3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DTCC.Vector3D vertices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vertices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_vertices(i), target, stream);
  }

  // repeated .DTCC.Simplex3D cells = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_cells_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_cells(i), target, stream);
  }

  // repeated int32 markers = 3;
  {
    int byte_size = _markers_cached_byte_size_.load(std::memory_order_relaxed);
    if (byte_size > 0) {
      target = stream->WriteInt32Packed(
          3, _internal_markers(), byte_size, target);
    }
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.Mesh3D)
  return target;
}

size_t Mesh3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.Mesh3D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DTCC.Vector3D vertices = 1;
  total_size += 1UL * this->_internal_vertices_size();
  for (const auto& msg : this->vertices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .DTCC.Simplex3D cells = 2;
  total_size += 1UL * this->_internal_cells_size();
  for (const auto& msg : this->cells_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated int32 markers = 3;
  {
    size_t data_size = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      Int32Size(this->markers_);
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _markers_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Mesh3D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTCC.Mesh3D)
  GOOGLE_DCHECK_NE(&from, this);
  const Mesh3D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Mesh3D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTCC.Mesh3D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTCC.Mesh3D)
    MergeFrom(*source);
  }
}

void Mesh3D::MergeFrom(const Mesh3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.Mesh3D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vertices_.MergeFrom(from.vertices_);
  cells_.MergeFrom(from.cells_);
  markers_.MergeFrom(from.markers_);
}

void Mesh3D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTCC.Mesh3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Mesh3D::CopyFrom(const Mesh3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.Mesh3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Mesh3D::IsInitialized() const {
  return true;
}

void Mesh3D::InternalSwap(Mesh3D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vertices_.InternalSwap(&other->vertices_);
  cells_.InternalSwap(&other->cells_);
  markers_.InternalSwap(&other->markers_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Mesh3D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Surface2D::InitAsDefaultInstance() {
}
class Surface2D::_Internal {
 public:
};

Surface2D::Surface2D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vertices_(arena),
  normals_(arena),
  edges_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DTCC.Surface2D)
}
Surface2D::Surface2D(const Surface2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vertices_(from.vertices_),
      normals_(from.normals_),
      edges_(from.edges_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DTCC.Surface2D)
}

void Surface2D::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Surface2D_dtcc_2eproto.base);
}

Surface2D::~Surface2D() {
  // @@protoc_insertion_point(destructor:DTCC.Surface2D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Surface2D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Surface2D::ArenaDtor(void* object) {
  Surface2D* _this = reinterpret_cast< Surface2D* >(object);
  (void)_this;
}
void Surface2D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Surface2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Surface2D& Surface2D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Surface2D_dtcc_2eproto.base);
  return *internal_default_instance();
}


void Surface2D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.Surface2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vertices_.Clear();
  normals_.Clear();
  edges_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Surface2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .DTCC.Vector2D vertices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vertices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .DTCC.Vector2D normals = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_normals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .DTCC.Simplex1D edges = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_edges(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Surface2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.Surface2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DTCC.Vector2D vertices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vertices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_vertices(i), target, stream);
  }

  // repeated .DTCC.Vector2D normals = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_normals_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_normals(i), target, stream);
  }

  // repeated .DTCC.Simplex1D edges = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_edges_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_edges(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.Surface2D)
  return target;
}

size_t Surface2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.Surface2D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DTCC.Vector2D vertices = 1;
  total_size += 1UL * this->_internal_vertices_size();
  for (const auto& msg : this->vertices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .DTCC.Vector2D normals = 2;
  total_size += 1UL * this->_internal_normals_size();
  for (const auto& msg : this->normals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .DTCC.Simplex1D edges = 3;
  total_size += 1UL * this->_internal_edges_size();
  for (const auto& msg : this->edges_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Surface2D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTCC.Surface2D)
  GOOGLE_DCHECK_NE(&from, this);
  const Surface2D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Surface2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTCC.Surface2D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTCC.Surface2D)
    MergeFrom(*source);
  }
}

void Surface2D::MergeFrom(const Surface2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.Surface2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vertices_.MergeFrom(from.vertices_);
  normals_.MergeFrom(from.normals_);
  edges_.MergeFrom(from.edges_);
}

void Surface2D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTCC.Surface2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Surface2D::CopyFrom(const Surface2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.Surface2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Surface2D::IsInitialized() const {
  return true;
}

void Surface2D::InternalSwap(Surface2D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vertices_.InternalSwap(&other->vertices_);
  normals_.InternalSwap(&other->normals_);
  edges_.InternalSwap(&other->edges_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Surface2D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Surface3D::InitAsDefaultInstance() {
}
class Surface3D::_Internal {
 public:
};

Surface3D::Surface3D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  vertices_(arena),
  normals_(arena),
  faces_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DTCC.Surface3D)
}
Surface3D::Surface3D(const Surface3D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      vertices_(from.vertices_),
      normals_(from.normals_),
      faces_(from.faces_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DTCC.Surface3D)
}

void Surface3D::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Surface3D_dtcc_2eproto.base);
}

Surface3D::~Surface3D() {
  // @@protoc_insertion_point(destructor:DTCC.Surface3D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Surface3D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void Surface3D::ArenaDtor(void* object) {
  Surface3D* _this = reinterpret_cast< Surface3D* >(object);
  (void)_this;
}
void Surface3D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Surface3D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Surface3D& Surface3D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Surface3D_dtcc_2eproto.base);
  return *internal_default_instance();
}


void Surface3D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.Surface3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  vertices_.Clear();
  normals_.Clear();
  faces_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Surface3D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .DTCC.Vector3D vertices = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_vertices(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<10>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .DTCC.Vector3D normals = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_normals(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<18>(ptr));
        } else goto handle_unusual;
        continue;
      // repeated .DTCC.Simplex2D faces = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_faces(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<26>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Surface3D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.Surface3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DTCC.Vector3D vertices = 1;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_vertices_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(1, this->_internal_vertices(i), target, stream);
  }

  // repeated .DTCC.Vector3D normals = 2;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_normals_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(2, this->_internal_normals(i), target, stream);
  }

  // repeated .DTCC.Simplex2D faces = 3;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_faces_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(3, this->_internal_faces(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.Surface3D)
  return target;
}

size_t Surface3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.Surface3D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DTCC.Vector3D vertices = 1;
  total_size += 1UL * this->_internal_vertices_size();
  for (const auto& msg : this->vertices_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .DTCC.Vector3D normals = 2;
  total_size += 1UL * this->_internal_normals_size();
  for (const auto& msg : this->normals_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  // repeated .DTCC.Simplex2D faces = 3;
  total_size += 1UL * this->_internal_faces_size();
  for (const auto& msg : this->faces_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Surface3D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTCC.Surface3D)
  GOOGLE_DCHECK_NE(&from, this);
  const Surface3D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Surface3D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTCC.Surface3D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTCC.Surface3D)
    MergeFrom(*source);
  }
}

void Surface3D::MergeFrom(const Surface3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.Surface3D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  vertices_.MergeFrom(from.vertices_);
  normals_.MergeFrom(from.normals_);
  faces_.MergeFrom(from.faces_);
}

void Surface3D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTCC.Surface3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Surface3D::CopyFrom(const Surface3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.Surface3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Surface3D::IsInitialized() const {
  return true;
}

void Surface3D::InternalSwap(Surface3D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  vertices_.InternalSwap(&other->vertices_);
  normals_.InternalSwap(&other->normals_);
  faces_.InternalSwap(&other->faces_);
}

::PROTOBUF_NAMESPACE_ID::Metadata Surface3D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GridField2D::InitAsDefaultInstance() {
  ::DTCC::_GridField2D_default_instance_._instance.get_mutable()->grid_ = const_cast< ::DTCC::Grid2D*>(
      ::DTCC::Grid2D::internal_default_instance());
}
class GridField2D::_Internal {
 public:
  static const ::DTCC::Grid2D& grid(const GridField2D* msg);
};

const ::DTCC::Grid2D&
GridField2D::_Internal::grid(const GridField2D* msg) {
  return *msg->grid_;
}
GridField2D::GridField2D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DTCC.GridField2D)
}
GridField2D::GridField2D(const GridField2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_grid()) {
    grid_ = new ::DTCC::Grid2D(*from.grid_);
  } else {
    grid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:DTCC.GridField2D)
}

void GridField2D::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GridField2D_dtcc_2eproto.base);
  grid_ = nullptr;
}

GridField2D::~GridField2D() {
  // @@protoc_insertion_point(destructor:DTCC.GridField2D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GridField2D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete grid_;
}

void GridField2D::ArenaDtor(void* object) {
  GridField2D* _this = reinterpret_cast< GridField2D* >(object);
  (void)_this;
}
void GridField2D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GridField2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GridField2D& GridField2D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GridField2D_dtcc_2eproto.base);
  return *internal_default_instance();
}


void GridField2D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.GridField2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  if (GetArena() == nullptr && grid_ != nullptr) {
    delete grid_;
  }
  grid_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GridField2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DTCC.Grid2D grid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_grid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GridField2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.GridField2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DTCC.Grid2D grid = 1;
  if (this->has_grid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::grid(this), target, stream);
  }

  // repeated float values = 2;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.GridField2D)
  return target;
}

size_t GridField2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.GridField2D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .DTCC.Grid2D grid = 1;
  if (this->has_grid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *grid_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GridField2D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTCC.GridField2D)
  GOOGLE_DCHECK_NE(&from, this);
  const GridField2D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GridField2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTCC.GridField2D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTCC.GridField2D)
    MergeFrom(*source);
  }
}

void GridField2D::MergeFrom(const GridField2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.GridField2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from.has_grid()) {
    _internal_mutable_grid()->::DTCC::Grid2D::MergeFrom(from._internal_grid());
  }
}

void GridField2D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTCC.GridField2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GridField2D::CopyFrom(const GridField2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.GridField2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GridField2D::IsInitialized() const {
  return true;
}

void GridField2D::InternalSwap(GridField2D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
  swap(grid_, other->grid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GridField2D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GridField3D::InitAsDefaultInstance() {
  ::DTCC::_GridField3D_default_instance_._instance.get_mutable()->grid_ = const_cast< ::DTCC::Grid3D*>(
      ::DTCC::Grid3D::internal_default_instance());
}
class GridField3D::_Internal {
 public:
  static const ::DTCC::Grid3D& grid(const GridField3D* msg);
};

const ::DTCC::Grid3D&
GridField3D::_Internal::grid(const GridField3D* msg) {
  return *msg->grid_;
}
GridField3D::GridField3D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DTCC.GridField3D)
}
GridField3D::GridField3D(const GridField3D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_grid()) {
    grid_ = new ::DTCC::Grid3D(*from.grid_);
  } else {
    grid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:DTCC.GridField3D)
}

void GridField3D::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GridField3D_dtcc_2eproto.base);
  grid_ = nullptr;
}

GridField3D::~GridField3D() {
  // @@protoc_insertion_point(destructor:DTCC.GridField3D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GridField3D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete grid_;
}

void GridField3D::ArenaDtor(void* object) {
  GridField3D* _this = reinterpret_cast< GridField3D* >(object);
  (void)_this;
}
void GridField3D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GridField3D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GridField3D& GridField3D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GridField3D_dtcc_2eproto.base);
  return *internal_default_instance();
}


void GridField3D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.GridField3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  if (GetArena() == nullptr && grid_ != nullptr) {
    delete grid_;
  }
  grid_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GridField3D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DTCC.Grid3D grid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_grid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GridField3D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.GridField3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DTCC.Grid3D grid = 1;
  if (this->has_grid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::grid(this), target, stream);
  }

  // repeated float values = 2;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.GridField3D)
  return target;
}

size_t GridField3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.GridField3D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .DTCC.Grid3D grid = 1;
  if (this->has_grid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *grid_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GridField3D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTCC.GridField3D)
  GOOGLE_DCHECK_NE(&from, this);
  const GridField3D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GridField3D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTCC.GridField3D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTCC.GridField3D)
    MergeFrom(*source);
  }
}

void GridField3D::MergeFrom(const GridField3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.GridField3D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from.has_grid()) {
    _internal_mutable_grid()->::DTCC::Grid3D::MergeFrom(from._internal_grid());
  }
}

void GridField3D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTCC.GridField3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GridField3D::CopyFrom(const GridField3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.GridField3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GridField3D::IsInitialized() const {
  return true;
}

void GridField3D::InternalSwap(GridField3D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
  swap(grid_, other->grid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GridField3D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GridVectorField2D::InitAsDefaultInstance() {
  ::DTCC::_GridVectorField2D_default_instance_._instance.get_mutable()->grid_ = const_cast< ::DTCC::Grid2D*>(
      ::DTCC::Grid2D::internal_default_instance());
}
class GridVectorField2D::_Internal {
 public:
  static const ::DTCC::Grid2D& grid(const GridVectorField2D* msg);
};

const ::DTCC::Grid2D&
GridVectorField2D::_Internal::grid(const GridVectorField2D* msg) {
  return *msg->grid_;
}
GridVectorField2D::GridVectorField2D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DTCC.GridVectorField2D)
}
GridVectorField2D::GridVectorField2D(const GridVectorField2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_grid()) {
    grid_ = new ::DTCC::Grid2D(*from.grid_);
  } else {
    grid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:DTCC.GridVectorField2D)
}

void GridVectorField2D::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GridVectorField2D_dtcc_2eproto.base);
  grid_ = nullptr;
}

GridVectorField2D::~GridVectorField2D() {
  // @@protoc_insertion_point(destructor:DTCC.GridVectorField2D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GridVectorField2D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete grid_;
}

void GridVectorField2D::ArenaDtor(void* object) {
  GridVectorField2D* _this = reinterpret_cast< GridVectorField2D* >(object);
  (void)_this;
}
void GridVectorField2D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GridVectorField2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GridVectorField2D& GridVectorField2D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GridVectorField2D_dtcc_2eproto.base);
  return *internal_default_instance();
}


void GridVectorField2D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.GridVectorField2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  if (GetArena() == nullptr && grid_ != nullptr) {
    delete grid_;
  }
  grid_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GridVectorField2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DTCC.Grid2D grid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_grid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GridVectorField2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.GridVectorField2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DTCC.Grid2D grid = 1;
  if (this->has_grid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::grid(this), target, stream);
  }

  // repeated float values = 2;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.GridVectorField2D)
  return target;
}

size_t GridVectorField2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.GridVectorField2D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .DTCC.Grid2D grid = 1;
  if (this->has_grid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *grid_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GridVectorField2D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTCC.GridVectorField2D)
  GOOGLE_DCHECK_NE(&from, this);
  const GridVectorField2D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GridVectorField2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTCC.GridVectorField2D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTCC.GridVectorField2D)
    MergeFrom(*source);
  }
}

void GridVectorField2D::MergeFrom(const GridVectorField2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.GridVectorField2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from.has_grid()) {
    _internal_mutable_grid()->::DTCC::Grid2D::MergeFrom(from._internal_grid());
  }
}

void GridVectorField2D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTCC.GridVectorField2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GridVectorField2D::CopyFrom(const GridVectorField2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.GridVectorField2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GridVectorField2D::IsInitialized() const {
  return true;
}

void GridVectorField2D::InternalSwap(GridVectorField2D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
  swap(grid_, other->grid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GridVectorField2D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void GridVectorField3D::InitAsDefaultInstance() {
  ::DTCC::_GridVectorField3D_default_instance_._instance.get_mutable()->grid_ = const_cast< ::DTCC::Grid3D*>(
      ::DTCC::Grid3D::internal_default_instance());
}
class GridVectorField3D::_Internal {
 public:
  static const ::DTCC::Grid3D& grid(const GridVectorField3D* msg);
};

const ::DTCC::Grid3D&
GridVectorField3D::_Internal::grid(const GridVectorField3D* msg) {
  return *msg->grid_;
}
GridVectorField3D::GridVectorField3D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DTCC.GridVectorField3D)
}
GridVectorField3D::GridVectorField3D(const GridVectorField3D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_grid()) {
    grid_ = new ::DTCC::Grid3D(*from.grid_);
  } else {
    grid_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:DTCC.GridVectorField3D)
}

void GridVectorField3D::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_GridVectorField3D_dtcc_2eproto.base);
  grid_ = nullptr;
}

GridVectorField3D::~GridVectorField3D() {
  // @@protoc_insertion_point(destructor:DTCC.GridVectorField3D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void GridVectorField3D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete grid_;
}

void GridVectorField3D::ArenaDtor(void* object) {
  GridVectorField3D* _this = reinterpret_cast< GridVectorField3D* >(object);
  (void)_this;
}
void GridVectorField3D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void GridVectorField3D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const GridVectorField3D& GridVectorField3D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_GridVectorField3D_dtcc_2eproto.base);
  return *internal_default_instance();
}


void GridVectorField3D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.GridVectorField3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  if (GetArena() == nullptr && grid_ != nullptr) {
    delete grid_;
  }
  grid_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* GridVectorField3D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DTCC.Grid3D grid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_grid(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* GridVectorField3D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.GridVectorField3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DTCC.Grid3D grid = 1;
  if (this->has_grid()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::grid(this), target, stream);
  }

  // repeated float values = 2;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.GridVectorField3D)
  return target;
}

size_t GridVectorField3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.GridVectorField3D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .DTCC.Grid3D grid = 1;
  if (this->has_grid()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *grid_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void GridVectorField3D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTCC.GridVectorField3D)
  GOOGLE_DCHECK_NE(&from, this);
  const GridVectorField3D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<GridVectorField3D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTCC.GridVectorField3D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTCC.GridVectorField3D)
    MergeFrom(*source);
  }
}

void GridVectorField3D::MergeFrom(const GridVectorField3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.GridVectorField3D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from.has_grid()) {
    _internal_mutable_grid()->::DTCC::Grid3D::MergeFrom(from._internal_grid());
  }
}

void GridVectorField3D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTCC.GridVectorField3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void GridVectorField3D::CopyFrom(const GridVectorField3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.GridVectorField3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool GridVectorField3D::IsInitialized() const {
  return true;
}

void GridVectorField3D::InternalSwap(GridVectorField3D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
  swap(grid_, other->grid_);
}

::PROTOBUF_NAMESPACE_ID::Metadata GridVectorField3D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MeshField2D::InitAsDefaultInstance() {
  ::DTCC::_MeshField2D_default_instance_._instance.get_mutable()->mesh_ = const_cast< ::DTCC::Mesh2D*>(
      ::DTCC::Mesh2D::internal_default_instance());
}
class MeshField2D::_Internal {
 public:
  static const ::DTCC::Mesh2D& mesh(const MeshField2D* msg);
};

const ::DTCC::Mesh2D&
MeshField2D::_Internal::mesh(const MeshField2D* msg) {
  return *msg->mesh_;
}
MeshField2D::MeshField2D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DTCC.MeshField2D)
}
MeshField2D::MeshField2D(const MeshField2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mesh()) {
    mesh_ = new ::DTCC::Mesh2D(*from.mesh_);
  } else {
    mesh_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:DTCC.MeshField2D)
}

void MeshField2D::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MeshField2D_dtcc_2eproto.base);
  mesh_ = nullptr;
}

MeshField2D::~MeshField2D() {
  // @@protoc_insertion_point(destructor:DTCC.MeshField2D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MeshField2D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete mesh_;
}

void MeshField2D::ArenaDtor(void* object) {
  MeshField2D* _this = reinterpret_cast< MeshField2D* >(object);
  (void)_this;
}
void MeshField2D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MeshField2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MeshField2D& MeshField2D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MeshField2D_dtcc_2eproto.base);
  return *internal_default_instance();
}


void MeshField2D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.MeshField2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  if (GetArena() == nullptr && mesh_ != nullptr) {
    delete mesh_;
  }
  mesh_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MeshField2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DTCC.Mesh2D mesh = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mesh(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MeshField2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.MeshField2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DTCC.Mesh2D mesh = 1;
  if (this->has_mesh()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mesh(this), target, stream);
  }

  // repeated float values = 2;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.MeshField2D)
  return target;
}

size_t MeshField2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.MeshField2D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .DTCC.Mesh2D mesh = 1;
  if (this->has_mesh()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mesh_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MeshField2D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTCC.MeshField2D)
  GOOGLE_DCHECK_NE(&from, this);
  const MeshField2D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MeshField2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTCC.MeshField2D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTCC.MeshField2D)
    MergeFrom(*source);
  }
}

void MeshField2D::MergeFrom(const MeshField2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.MeshField2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from.has_mesh()) {
    _internal_mutable_mesh()->::DTCC::Mesh2D::MergeFrom(from._internal_mesh());
  }
}

void MeshField2D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTCC.MeshField2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeshField2D::CopyFrom(const MeshField2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.MeshField2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeshField2D::IsInitialized() const {
  return true;
}

void MeshField2D::InternalSwap(MeshField2D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
  swap(mesh_, other->mesh_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MeshField2D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MeshField3D::InitAsDefaultInstance() {
  ::DTCC::_MeshField3D_default_instance_._instance.get_mutable()->mesh_ = const_cast< ::DTCC::Mesh3D*>(
      ::DTCC::Mesh3D::internal_default_instance());
}
class MeshField3D::_Internal {
 public:
  static const ::DTCC::Mesh3D& mesh(const MeshField3D* msg);
};

const ::DTCC::Mesh3D&
MeshField3D::_Internal::mesh(const MeshField3D* msg) {
  return *msg->mesh_;
}
MeshField3D::MeshField3D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DTCC.MeshField3D)
}
MeshField3D::MeshField3D(const MeshField3D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mesh()) {
    mesh_ = new ::DTCC::Mesh3D(*from.mesh_);
  } else {
    mesh_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:DTCC.MeshField3D)
}

void MeshField3D::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MeshField3D_dtcc_2eproto.base);
  mesh_ = nullptr;
}

MeshField3D::~MeshField3D() {
  // @@protoc_insertion_point(destructor:DTCC.MeshField3D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MeshField3D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete mesh_;
}

void MeshField3D::ArenaDtor(void* object) {
  MeshField3D* _this = reinterpret_cast< MeshField3D* >(object);
  (void)_this;
}
void MeshField3D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MeshField3D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MeshField3D& MeshField3D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MeshField3D_dtcc_2eproto.base);
  return *internal_default_instance();
}


void MeshField3D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.MeshField3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  if (GetArena() == nullptr && mesh_ != nullptr) {
    delete mesh_;
  }
  mesh_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MeshField3D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DTCC.Mesh3D mesh = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mesh(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MeshField3D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.MeshField3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DTCC.Mesh3D mesh = 1;
  if (this->has_mesh()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mesh(this), target, stream);
  }

  // repeated float values = 2;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.MeshField3D)
  return target;
}

size_t MeshField3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.MeshField3D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .DTCC.Mesh3D mesh = 1;
  if (this->has_mesh()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mesh_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MeshField3D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTCC.MeshField3D)
  GOOGLE_DCHECK_NE(&from, this);
  const MeshField3D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MeshField3D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTCC.MeshField3D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTCC.MeshField3D)
    MergeFrom(*source);
  }
}

void MeshField3D::MergeFrom(const MeshField3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.MeshField3D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from.has_mesh()) {
    _internal_mutable_mesh()->::DTCC::Mesh3D::MergeFrom(from._internal_mesh());
  }
}

void MeshField3D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTCC.MeshField3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeshField3D::CopyFrom(const MeshField3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.MeshField3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeshField3D::IsInitialized() const {
  return true;
}

void MeshField3D::InternalSwap(MeshField3D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
  swap(mesh_, other->mesh_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MeshField3D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MeshVectorField2D::InitAsDefaultInstance() {
  ::DTCC::_MeshVectorField2D_default_instance_._instance.get_mutable()->mesh_ = const_cast< ::DTCC::Mesh2D*>(
      ::DTCC::Mesh2D::internal_default_instance());
}
class MeshVectorField2D::_Internal {
 public:
  static const ::DTCC::Mesh2D& mesh(const MeshVectorField2D* msg);
};

const ::DTCC::Mesh2D&
MeshVectorField2D::_Internal::mesh(const MeshVectorField2D* msg) {
  return *msg->mesh_;
}
MeshVectorField2D::MeshVectorField2D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DTCC.MeshVectorField2D)
}
MeshVectorField2D::MeshVectorField2D(const MeshVectorField2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mesh()) {
    mesh_ = new ::DTCC::Mesh2D(*from.mesh_);
  } else {
    mesh_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:DTCC.MeshVectorField2D)
}

void MeshVectorField2D::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MeshVectorField2D_dtcc_2eproto.base);
  mesh_ = nullptr;
}

MeshVectorField2D::~MeshVectorField2D() {
  // @@protoc_insertion_point(destructor:DTCC.MeshVectorField2D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MeshVectorField2D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete mesh_;
}

void MeshVectorField2D::ArenaDtor(void* object) {
  MeshVectorField2D* _this = reinterpret_cast< MeshVectorField2D* >(object);
  (void)_this;
}
void MeshVectorField2D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MeshVectorField2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MeshVectorField2D& MeshVectorField2D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MeshVectorField2D_dtcc_2eproto.base);
  return *internal_default_instance();
}


void MeshVectorField2D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.MeshVectorField2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  if (GetArena() == nullptr && mesh_ != nullptr) {
    delete mesh_;
  }
  mesh_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MeshVectorField2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DTCC.Mesh2D mesh = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mesh(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MeshVectorField2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.MeshVectorField2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DTCC.Mesh2D mesh = 1;
  if (this->has_mesh()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mesh(this), target, stream);
  }

  // repeated float values = 2;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.MeshVectorField2D)
  return target;
}

size_t MeshVectorField2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.MeshVectorField2D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .DTCC.Mesh2D mesh = 1;
  if (this->has_mesh()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mesh_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MeshVectorField2D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTCC.MeshVectorField2D)
  GOOGLE_DCHECK_NE(&from, this);
  const MeshVectorField2D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MeshVectorField2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTCC.MeshVectorField2D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTCC.MeshVectorField2D)
    MergeFrom(*source);
  }
}

void MeshVectorField2D::MergeFrom(const MeshVectorField2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.MeshVectorField2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from.has_mesh()) {
    _internal_mutable_mesh()->::DTCC::Mesh2D::MergeFrom(from._internal_mesh());
  }
}

void MeshVectorField2D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTCC.MeshVectorField2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeshVectorField2D::CopyFrom(const MeshVectorField2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.MeshVectorField2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeshVectorField2D::IsInitialized() const {
  return true;
}

void MeshVectorField2D::InternalSwap(MeshVectorField2D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
  swap(mesh_, other->mesh_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MeshVectorField2D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void MeshVectorField3D::InitAsDefaultInstance() {
  ::DTCC::_MeshVectorField3D_default_instance_._instance.get_mutable()->mesh_ = const_cast< ::DTCC::Mesh3D*>(
      ::DTCC::Mesh3D::internal_default_instance());
}
class MeshVectorField3D::_Internal {
 public:
  static const ::DTCC::Mesh3D& mesh(const MeshVectorField3D* msg);
};

const ::DTCC::Mesh3D&
MeshVectorField3D::_Internal::mesh(const MeshVectorField3D* msg) {
  return *msg->mesh_;
}
MeshVectorField3D::MeshVectorField3D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DTCC.MeshVectorField3D)
}
MeshVectorField3D::MeshVectorField3D(const MeshVectorField3D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_mesh()) {
    mesh_ = new ::DTCC::Mesh3D(*from.mesh_);
  } else {
    mesh_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:DTCC.MeshVectorField3D)
}

void MeshVectorField3D::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_MeshVectorField3D_dtcc_2eproto.base);
  mesh_ = nullptr;
}

MeshVectorField3D::~MeshVectorField3D() {
  // @@protoc_insertion_point(destructor:DTCC.MeshVectorField3D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void MeshVectorField3D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete mesh_;
}

void MeshVectorField3D::ArenaDtor(void* object) {
  MeshVectorField3D* _this = reinterpret_cast< MeshVectorField3D* >(object);
  (void)_this;
}
void MeshVectorField3D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void MeshVectorField3D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const MeshVectorField3D& MeshVectorField3D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_MeshVectorField3D_dtcc_2eproto.base);
  return *internal_default_instance();
}


void MeshVectorField3D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.MeshVectorField3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  if (GetArena() == nullptr && mesh_ != nullptr) {
    delete mesh_;
  }
  mesh_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* MeshVectorField3D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DTCC.Mesh3D mesh = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_mesh(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float values = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 21) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* MeshVectorField3D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.MeshVectorField3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DTCC.Mesh3D mesh = 1;
  if (this->has_mesh()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::mesh(this), target, stream);
  }

  // repeated float values = 2;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(2, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.MeshVectorField3D)
  return target;
}

size_t MeshVectorField3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.MeshVectorField3D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 2;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .DTCC.Mesh3D mesh = 1;
  if (this->has_mesh()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *mesh_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void MeshVectorField3D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTCC.MeshVectorField3D)
  GOOGLE_DCHECK_NE(&from, this);
  const MeshVectorField3D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<MeshVectorField3D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTCC.MeshVectorField3D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTCC.MeshVectorField3D)
    MergeFrom(*source);
  }
}

void MeshVectorField3D::MergeFrom(const MeshVectorField3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.MeshVectorField3D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from.has_mesh()) {
    _internal_mutable_mesh()->::DTCC::Mesh3D::MergeFrom(from._internal_mesh());
  }
}

void MeshVectorField3D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTCC.MeshVectorField3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void MeshVectorField3D::CopyFrom(const MeshVectorField3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.MeshVectorField3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool MeshVectorField3D::IsInitialized() const {
  return true;
}

void MeshVectorField3D::InternalSwap(MeshVectorField3D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
  swap(mesh_, other->mesh_);
}

::PROTOBUF_NAMESPACE_ID::Metadata MeshVectorField3D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SurfaceField2D::InitAsDefaultInstance() {
  ::DTCC::_SurfaceField2D_default_instance_._instance.get_mutable()->surface_ = const_cast< ::DTCC::Surface2D*>(
      ::DTCC::Surface2D::internal_default_instance());
}
class SurfaceField2D::_Internal {
 public:
  static const ::DTCC::Surface2D& surface(const SurfaceField2D* msg);
};

const ::DTCC::Surface2D&
SurfaceField2D::_Internal::surface(const SurfaceField2D* msg) {
  return *msg->surface_;
}
SurfaceField2D::SurfaceField2D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DTCC.SurfaceField2D)
}
SurfaceField2D::SurfaceField2D(const SurfaceField2D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_surface()) {
    surface_ = new ::DTCC::Surface2D(*from.surface_);
  } else {
    surface_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:DTCC.SurfaceField2D)
}

void SurfaceField2D::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SurfaceField2D_dtcc_2eproto.base);
  surface_ = nullptr;
}

SurfaceField2D::~SurfaceField2D() {
  // @@protoc_insertion_point(destructor:DTCC.SurfaceField2D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SurfaceField2D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete surface_;
}

void SurfaceField2D::ArenaDtor(void* object) {
  SurfaceField2D* _this = reinterpret_cast< SurfaceField2D* >(object);
  (void)_this;
}
void SurfaceField2D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SurfaceField2D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SurfaceField2D& SurfaceField2D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SurfaceField2D_dtcc_2eproto.base);
  return *internal_default_instance();
}


void SurfaceField2D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.SurfaceField2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  if (GetArena() == nullptr && surface_ != nullptr) {
    delete surface_;
  }
  surface_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SurfaceField2D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DTCC.Surface2D surface = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_surface(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float values = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SurfaceField2D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.SurfaceField2D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DTCC.Surface2D surface = 1;
  if (this->has_surface()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::surface(this), target, stream);
  }

  // repeated float values = 3;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.SurfaceField2D)
  return target;
}

size_t SurfaceField2D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.SurfaceField2D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .DTCC.Surface2D surface = 1;
  if (this->has_surface()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *surface_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SurfaceField2D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTCC.SurfaceField2D)
  GOOGLE_DCHECK_NE(&from, this);
  const SurfaceField2D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SurfaceField2D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTCC.SurfaceField2D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTCC.SurfaceField2D)
    MergeFrom(*source);
  }
}

void SurfaceField2D::MergeFrom(const SurfaceField2D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.SurfaceField2D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from.has_surface()) {
    _internal_mutable_surface()->::DTCC::Surface2D::MergeFrom(from._internal_surface());
  }
}

void SurfaceField2D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTCC.SurfaceField2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SurfaceField2D::CopyFrom(const SurfaceField2D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.SurfaceField2D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurfaceField2D::IsInitialized() const {
  return true;
}

void SurfaceField2D::InternalSwap(SurfaceField2D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
  swap(surface_, other->surface_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SurfaceField2D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void SurfaceField3D::InitAsDefaultInstance() {
  ::DTCC::_SurfaceField3D_default_instance_._instance.get_mutable()->surface_ = const_cast< ::DTCC::Surface3D*>(
      ::DTCC::Surface3D::internal_default_instance());
}
class SurfaceField3D::_Internal {
 public:
  static const ::DTCC::Surface3D& surface(const SurfaceField3D* msg);
};

const ::DTCC::Surface3D&
SurfaceField3D::_Internal::surface(const SurfaceField3D* msg) {
  return *msg->surface_;
}
SurfaceField3D::SurfaceField3D(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  values_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DTCC.SurfaceField3D)
}
SurfaceField3D::SurfaceField3D(const SurfaceField3D& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      values_(from.values_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  if (from._internal_has_surface()) {
    surface_ = new ::DTCC::Surface3D(*from.surface_);
  } else {
    surface_ = nullptr;
  }
  // @@protoc_insertion_point(copy_constructor:DTCC.SurfaceField3D)
}

void SurfaceField3D::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_SurfaceField3D_dtcc_2eproto.base);
  surface_ = nullptr;
}

SurfaceField3D::~SurfaceField3D() {
  // @@protoc_insertion_point(destructor:DTCC.SurfaceField3D)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void SurfaceField3D::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  if (this != internal_default_instance()) delete surface_;
}

void SurfaceField3D::ArenaDtor(void* object) {
  SurfaceField3D* _this = reinterpret_cast< SurfaceField3D* >(object);
  (void)_this;
}
void SurfaceField3D::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void SurfaceField3D::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const SurfaceField3D& SurfaceField3D::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_SurfaceField3D_dtcc_2eproto.base);
  return *internal_default_instance();
}


void SurfaceField3D::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.SurfaceField3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  values_.Clear();
  if (GetArena() == nullptr && surface_ != nullptr) {
    delete surface_;
  }
  surface_ = nullptr;
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* SurfaceField3D::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // .DTCC.Surface3D surface = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          ptr = ctx->ParseMessage(_internal_mutable_surface(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // repeated float values = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 26)) {
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::PackedFloatParser(_internal_mutable_values(), ptr, ctx);
          CHK_(ptr);
        } else if (static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 29) {
          _internal_add_values(::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<float>(ptr));
          ptr += sizeof(float);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* SurfaceField3D::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.SurfaceField3D)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // .DTCC.Surface3D surface = 1;
  if (this->has_surface()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        1, _Internal::surface(this), target, stream);
  }

  // repeated float values = 3;
  if (this->_internal_values_size() > 0) {
    target = stream->WriteFixedPacked(3, _internal_values(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.SurfaceField3D)
  return target;
}

size_t SurfaceField3D::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.SurfaceField3D)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated float values = 3;
  {
    unsigned int count = static_cast<unsigned int>(this->_internal_values_size());
    size_t data_size = 4UL * count;
    if (data_size > 0) {
      total_size += 1 +
        ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::Int32Size(
            static_cast<::PROTOBUF_NAMESPACE_ID::int32>(data_size));
    }
    int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(data_size);
    _values_cached_byte_size_.store(cached_size,
                                    std::memory_order_relaxed);
    total_size += data_size;
  }

  // .DTCC.Surface3D surface = 1;
  if (this->has_surface()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *surface_);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void SurfaceField3D::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTCC.SurfaceField3D)
  GOOGLE_DCHECK_NE(&from, this);
  const SurfaceField3D* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<SurfaceField3D>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTCC.SurfaceField3D)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTCC.SurfaceField3D)
    MergeFrom(*source);
  }
}

void SurfaceField3D::MergeFrom(const SurfaceField3D& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.SurfaceField3D)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  values_.MergeFrom(from.values_);
  if (from.has_surface()) {
    _internal_mutable_surface()->::DTCC::Surface3D::MergeFrom(from._internal_surface());
  }
}

void SurfaceField3D::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTCC.SurfaceField3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void SurfaceField3D::CopyFrom(const SurfaceField3D& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.SurfaceField3D)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool SurfaceField3D::IsInitialized() const {
  return true;
}

void SurfaceField3D::InternalSwap(SurfaceField3D* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  values_.InternalSwap(&other->values_);
  swap(surface_, other->surface_);
}

::PROTOBUF_NAMESPACE_ID::Metadata SurfaceField3D::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void Building::InitAsDefaultInstance() {
  ::DTCC::_Building_default_instance_._instance.get_mutable()->footprint_ = const_cast< ::DTCC::Polygon*>(
      ::DTCC::Polygon::internal_default_instance());
}
class Building::_Internal {
 public:
  static const ::DTCC::Polygon& footprint(const Building* msg);
};

const ::DTCC::Polygon&
Building::_Internal::footprint(const Building* msg) {
  return *msg->footprint_;
}
Building::Building(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DTCC.Building)
}
Building::Building(const Building& from)
  : ::PROTOBUF_NAMESPACE_ID::Message() {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (!from._internal_uuid().empty()) {
    uuid_.Set(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), from._internal_uuid(),
      GetArena());
  }
  if (from._internal_has_footprint()) {
    footprint_ = new ::DTCC::Polygon(*from.footprint_);
  } else {
    footprint_ = nullptr;
  }
  ::memcpy(&height_, &from.height_,
    static_cast<size_t>(reinterpret_cast<char*>(&groundheight_) -
    reinterpret_cast<char*>(&height_)) + sizeof(groundheight_));
  // @@protoc_insertion_point(copy_constructor:DTCC.Building)
}

void Building::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_Building_dtcc_2eproto.base);
  uuid_.UnsafeSetDefault(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  ::memset(&footprint_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&groundheight_) -
      reinterpret_cast<char*>(&footprint_)) + sizeof(groundheight_));
}

Building::~Building() {
  // @@protoc_insertion_point(destructor:DTCC.Building)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void Building::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
  uuid_.DestroyNoArena(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited());
  if (this != internal_default_instance()) delete footprint_;
}

void Building::ArenaDtor(void* object) {
  Building* _this = reinterpret_cast< Building* >(object);
  (void)_this;
}
void Building::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void Building::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const Building& Building::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_Building_dtcc_2eproto.base);
  return *internal_default_instance();
}


void Building::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.Building)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  uuid_.ClearToEmpty(&::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  if (GetArena() == nullptr && footprint_ != nullptr) {
    delete footprint_;
  }
  footprint_ = nullptr;
  ::memset(&height_, 0, static_cast<size_t>(
      reinterpret_cast<char*>(&groundheight_) -
      reinterpret_cast<char*>(&height_)) + sizeof(groundheight_));
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* Building::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // string uuid = 1;
      case 1:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 10)) {
          auto str = _internal_mutable_uuid();
          ptr = ::PROTOBUF_NAMESPACE_ID::internal::InlineGreedyStringParser(str, ptr, ctx);
          CHK_(::PROTOBUF_NAMESPACE_ID::internal::VerifyUTF8(str, "DTCC.Building.uuid"));
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // .DTCC.Polygon footPrint = 2;
      case 2:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 18)) {
          ptr = ctx->ParseMessage(_internal_mutable_footprint(), ptr);
          CHK_(ptr);
        } else goto handle_unusual;
        continue;
      // double height = 3;
      case 3:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 25)) {
          height_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      // double groundHeight = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 33)) {
          groundheight_ = ::PROTOBUF_NAMESPACE_ID::internal::UnalignedLoad<double>(ptr);
          ptr += sizeof(double);
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* Building::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.Building)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::VerifyUtf8String(
      this->_internal_uuid().data(), static_cast<int>(this->_internal_uuid().length()),
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::SERIALIZE,
      "DTCC.Building.uuid");
    target = stream->WriteStringMaybeAliased(
        1, this->_internal_uuid(), target);
  }

  // .DTCC.Polygon footPrint = 2;
  if (this->has_footprint()) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(
        2, _Internal::footprint(this), target, stream);
  }

  // double height = 3;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(3, this->_internal_height(), target);
  }

  // double groundHeight = 4;
  if (!(this->groundheight() <= 0 && this->groundheight() >= 0)) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::WriteDoubleToArray(4, this->_internal_groundheight(), target);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.Building)
  return target;
}

size_t Building::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.Building)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // string uuid = 1;
  if (this->uuid().size() > 0) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::StringSize(
        this->_internal_uuid());
  }

  // .DTCC.Polygon footPrint = 2;
  if (this->has_footprint()) {
    total_size += 1 +
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(
        *footprint_);
  }

  // double height = 3;
  if (!(this->height() <= 0 && this->height() >= 0)) {
    total_size += 1 + 8;
  }

  // double groundHeight = 4;
  if (!(this->groundheight() <= 0 && this->groundheight() >= 0)) {
    total_size += 1 + 8;
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void Building::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTCC.Building)
  GOOGLE_DCHECK_NE(&from, this);
  const Building* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<Building>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTCC.Building)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTCC.Building)
    MergeFrom(*source);
  }
}

void Building::MergeFrom(const Building& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.Building)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  if (from.uuid().size() > 0) {
    _internal_set_uuid(from._internal_uuid());
  }
  if (from.has_footprint()) {
    _internal_mutable_footprint()->::DTCC::Polygon::MergeFrom(from._internal_footprint());
  }
  if (!(from.height() <= 0 && from.height() >= 0)) {
    _internal_set_height(from._internal_height());
  }
  if (!(from.groundheight() <= 0 && from.groundheight() >= 0)) {
    _internal_set_groundheight(from._internal_groundheight());
  }
}

void Building::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTCC.Building)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void Building::CopyFrom(const Building& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.Building)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool Building::IsInitialized() const {
  return true;
}

void Building::InternalSwap(Building* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  uuid_.Swap(&other->uuid_, &::PROTOBUF_NAMESPACE_ID::internal::GetEmptyStringAlreadyInited(), GetArena());
  ::PROTOBUF_NAMESPACE_ID::internal::memswap<
      PROTOBUF_FIELD_OFFSET(Building, groundheight_)
      + sizeof(Building::groundheight_)
      - PROTOBUF_FIELD_OFFSET(Building, footprint_)>(
          reinterpret_cast<char*>(&footprint_),
          reinterpret_cast<char*>(&other->footprint_));
}

::PROTOBUF_NAMESPACE_ID::Metadata Building::GetMetadata() const {
  return GetMetadataStatic();
}


// ===================================================================

void CityModel::InitAsDefaultInstance() {
}
class CityModel::_Internal {
 public:
};

CityModel::CityModel(::PROTOBUF_NAMESPACE_ID::Arena* arena)
  : ::PROTOBUF_NAMESPACE_ID::Message(arena),
  buildings_(arena) {
  SharedCtor();
  RegisterArenaDtor(arena);
  // @@protoc_insertion_point(arena_constructor:DTCC.CityModel)
}
CityModel::CityModel(const CityModel& from)
  : ::PROTOBUF_NAMESPACE_ID::Message(),
      buildings_(from.buildings_) {
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  // @@protoc_insertion_point(copy_constructor:DTCC.CityModel)
}

void CityModel::SharedCtor() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&scc_info_CityModel_dtcc_2eproto.base);
}

CityModel::~CityModel() {
  // @@protoc_insertion_point(destructor:DTCC.CityModel)
  SharedDtor();
  _internal_metadata_.Delete<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

void CityModel::SharedDtor() {
  GOOGLE_DCHECK(GetArena() == nullptr);
}

void CityModel::ArenaDtor(void* object) {
  CityModel* _this = reinterpret_cast< CityModel* >(object);
  (void)_this;
}
void CityModel::RegisterArenaDtor(::PROTOBUF_NAMESPACE_ID::Arena*) {
}
void CityModel::SetCachedSize(int size) const {
  _cached_size_.Set(size);
}
const CityModel& CityModel::default_instance() {
  ::PROTOBUF_NAMESPACE_ID::internal::InitSCC(&::scc_info_CityModel_dtcc_2eproto.base);
  return *internal_default_instance();
}


void CityModel::Clear() {
// @@protoc_insertion_point(message_clear_start:DTCC.CityModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  buildings_.Clear();
  _internal_metadata_.Clear<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>();
}

const char* CityModel::_InternalParse(const char* ptr, ::PROTOBUF_NAMESPACE_ID::internal::ParseContext* ctx) {
#define CHK_(x) if (PROTOBUF_PREDICT_FALSE(!(x))) goto failure
  ::PROTOBUF_NAMESPACE_ID::Arena* arena = GetArena(); (void)arena;
  while (!ctx->Done(&ptr)) {
    ::PROTOBUF_NAMESPACE_ID::uint32 tag;
    ptr = ::PROTOBUF_NAMESPACE_ID::internal::ReadTag(ptr, &tag);
    CHK_(ptr);
    switch (tag >> 3) {
      // repeated .DTCC.Building buildings = 4;
      case 4:
        if (PROTOBUF_PREDICT_TRUE(static_cast<::PROTOBUF_NAMESPACE_ID::uint8>(tag) == 34)) {
          ptr -= 1;
          do {
            ptr += 1;
            ptr = ctx->ParseMessage(_internal_add_buildings(), ptr);
            CHK_(ptr);
            if (!ctx->DataAvailable(ptr)) break;
          } while (::PROTOBUF_NAMESPACE_ID::internal::ExpectTag<34>(ptr));
        } else goto handle_unusual;
        continue;
      default: {
      handle_unusual:
        if ((tag & 7) == 4 || tag == 0) {
          ctx->SetLastTag(tag);
          goto success;
        }
        ptr = UnknownFieldParse(tag,
            _internal_metadata_.mutable_unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(),
            ptr, ctx);
        CHK_(ptr != nullptr);
        continue;
      }
    }  // switch
  }  // while
success:
  return ptr;
failure:
  ptr = nullptr;
  goto success;
#undef CHK_
}

::PROTOBUF_NAMESPACE_ID::uint8* CityModel::_InternalSerialize(
    ::PROTOBUF_NAMESPACE_ID::uint8* target, ::PROTOBUF_NAMESPACE_ID::io::EpsCopyOutputStream* stream) const {
  // @@protoc_insertion_point(serialize_to_array_start:DTCC.CityModel)
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  // repeated .DTCC.Building buildings = 4;
  for (unsigned int i = 0,
      n = static_cast<unsigned int>(this->_internal_buildings_size()); i < n; i++) {
    target = stream->EnsureSpace(target);
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::
      InternalWriteMessage(4, this->_internal_buildings(i), target, stream);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    target = ::PROTOBUF_NAMESPACE_ID::internal::WireFormat::InternalSerializeUnknownFieldsToArray(
        _internal_metadata_.unknown_fields<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(::PROTOBUF_NAMESPACE_ID::UnknownFieldSet::default_instance), target, stream);
  }
  // @@protoc_insertion_point(serialize_to_array_end:DTCC.CityModel)
  return target;
}

size_t CityModel::ByteSizeLong() const {
// @@protoc_insertion_point(message_byte_size_start:DTCC.CityModel)
  size_t total_size = 0;

  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  // Prevent compiler warnings about cached_has_bits being unused
  (void) cached_has_bits;

  // repeated .DTCC.Building buildings = 4;
  total_size += 1UL * this->_internal_buildings_size();
  for (const auto& msg : this->buildings_) {
    total_size +=
      ::PROTOBUF_NAMESPACE_ID::internal::WireFormatLite::MessageSize(msg);
  }

  if (PROTOBUF_PREDICT_FALSE(_internal_metadata_.have_unknown_fields())) {
    return ::PROTOBUF_NAMESPACE_ID::internal::ComputeUnknownFieldsSize(
        _internal_metadata_, total_size, &_cached_size_);
  }
  int cached_size = ::PROTOBUF_NAMESPACE_ID::internal::ToCachedSize(total_size);
  SetCachedSize(cached_size);
  return total_size;
}

void CityModel::MergeFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_merge_from_start:DTCC.CityModel)
  GOOGLE_DCHECK_NE(&from, this);
  const CityModel* source =
      ::PROTOBUF_NAMESPACE_ID::DynamicCastToGenerated<CityModel>(
          &from);
  if (source == nullptr) {
  // @@protoc_insertion_point(generalized_merge_from_cast_fail:DTCC.CityModel)
    ::PROTOBUF_NAMESPACE_ID::internal::ReflectionOps::Merge(from, this);
  } else {
  // @@protoc_insertion_point(generalized_merge_from_cast_success:DTCC.CityModel)
    MergeFrom(*source);
  }
}

void CityModel::MergeFrom(const CityModel& from) {
// @@protoc_insertion_point(class_specific_merge_from_start:DTCC.CityModel)
  GOOGLE_DCHECK_NE(&from, this);
  _internal_metadata_.MergeFrom<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(from._internal_metadata_);
  ::PROTOBUF_NAMESPACE_ID::uint32 cached_has_bits = 0;
  (void) cached_has_bits;

  buildings_.MergeFrom(from.buildings_);
}

void CityModel::CopyFrom(const ::PROTOBUF_NAMESPACE_ID::Message& from) {
// @@protoc_insertion_point(generalized_copy_from_start:DTCC.CityModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

void CityModel::CopyFrom(const CityModel& from) {
// @@protoc_insertion_point(class_specific_copy_from_start:DTCC.CityModel)
  if (&from == this) return;
  Clear();
  MergeFrom(from);
}

bool CityModel::IsInitialized() const {
  return true;
}

void CityModel::InternalSwap(CityModel* other) {
  using std::swap;
  _internal_metadata_.Swap<::PROTOBUF_NAMESPACE_ID::UnknownFieldSet>(&other->_internal_metadata_);
  buildings_.InternalSwap(&other->buildings_);
}

::PROTOBUF_NAMESPACE_ID::Metadata CityModel::GetMetadata() const {
  return GetMetadataStatic();
}


// @@protoc_insertion_point(namespace_scope)
}  // namespace DTCC
PROTOBUF_NAMESPACE_OPEN
template<> PROTOBUF_NOINLINE ::DTCC::Vector2D* Arena::CreateMaybeMessage< ::DTCC::Vector2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::Vector2D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::Vector3D* Arena::CreateMaybeMessage< ::DTCC::Vector3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::Vector3D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::Simplex1D* Arena::CreateMaybeMessage< ::DTCC::Simplex1D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::Simplex1D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::Simplex2D* Arena::CreateMaybeMessage< ::DTCC::Simplex2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::Simplex2D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::Simplex3D* Arena::CreateMaybeMessage< ::DTCC::Simplex3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::Simplex3D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::BoundingBox2D* Arena::CreateMaybeMessage< ::DTCC::BoundingBox2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::BoundingBox2D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::BoundingBox3D* Arena::CreateMaybeMessage< ::DTCC::BoundingBox3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::BoundingBox3D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::Polygon* Arena::CreateMaybeMessage< ::DTCC::Polygon >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::Polygon >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::Grid2D* Arena::CreateMaybeMessage< ::DTCC::Grid2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::Grid2D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::Grid3D* Arena::CreateMaybeMessage< ::DTCC::Grid3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::Grid3D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::Mesh2D* Arena::CreateMaybeMessage< ::DTCC::Mesh2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::Mesh2D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::Mesh3D* Arena::CreateMaybeMessage< ::DTCC::Mesh3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::Mesh3D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::Surface2D* Arena::CreateMaybeMessage< ::DTCC::Surface2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::Surface2D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::Surface3D* Arena::CreateMaybeMessage< ::DTCC::Surface3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::Surface3D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::GridField2D* Arena::CreateMaybeMessage< ::DTCC::GridField2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::GridField2D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::GridField3D* Arena::CreateMaybeMessage< ::DTCC::GridField3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::GridField3D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::GridVectorField2D* Arena::CreateMaybeMessage< ::DTCC::GridVectorField2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::GridVectorField2D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::GridVectorField3D* Arena::CreateMaybeMessage< ::DTCC::GridVectorField3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::GridVectorField3D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::MeshField2D* Arena::CreateMaybeMessage< ::DTCC::MeshField2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::MeshField2D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::MeshField3D* Arena::CreateMaybeMessage< ::DTCC::MeshField3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::MeshField3D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::MeshVectorField2D* Arena::CreateMaybeMessage< ::DTCC::MeshVectorField2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::MeshVectorField2D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::MeshVectorField3D* Arena::CreateMaybeMessage< ::DTCC::MeshVectorField3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::MeshVectorField3D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::SurfaceField2D* Arena::CreateMaybeMessage< ::DTCC::SurfaceField2D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::SurfaceField2D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::SurfaceField3D* Arena::CreateMaybeMessage< ::DTCC::SurfaceField3D >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::SurfaceField3D >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::Building* Arena::CreateMaybeMessage< ::DTCC::Building >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::Building >(arena);
}
template<> PROTOBUF_NOINLINE ::DTCC::CityModel* Arena::CreateMaybeMessage< ::DTCC::CityModel >(Arena* arena) {
  return Arena::CreateMessageInternal< ::DTCC::CityModel >(arena);
}
PROTOBUF_NAMESPACE_CLOSE

// @@protoc_insertion_point(global_scope)
#include <google/protobuf/port_undef.inc>
